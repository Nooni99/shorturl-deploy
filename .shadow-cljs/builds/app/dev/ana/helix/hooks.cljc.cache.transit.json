["^ ","~:output",["^ ","~:js","goog.provide('helix.hooks');\r\ngoog.scope(function(){\r\n  helix.hooks.goog$module$goog$object = goog.module.get('goog.object');\r\n});\r\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\r\nhelix.hooks.raw_use_effect = module$node_modules$react$index.useEffect;\r\n\r\nhelix.hooks.raw_use_layout_effect = module$node_modules$react$index.useLayoutEffect;\r\n\r\nhelix.hooks.raw_use_memo = module$node_modules$react$index.useMemo;\r\n\r\nhelix.hooks.raw_use_callback = module$node_modules$react$index.useCallback;\r\n\r\nhelix.hooks.raw_use_imperative_handle = module$node_modules$react$index.useImperativeHandle;\r\n\r\n/**\r\n * Protocol that marks a type as callable when passed to a use-state setter.\r\n * @interface\r\n */\r\nhelix.hooks.IStateUpdater = function(){};\r\n\r\n(cljs.core.MultiFn.prototype.helix$hooks$IStateUpdater$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(helix.hooks.IStateUpdater[\"function\"] = true);\r\n/**\r\n * Like `react/useState`, but the update function returned can be used similar\r\n *   to `swap!` if the first argument implements `IStateUpdater`.\r\n *   By default, this includes functions and multimethods.\r\n * \r\n *   Example:\r\n *   ```\r\n *   (let [[state set-state] (use-state {:count 0})]\r\n * ;; ...\r\n * (set-state update :count inc))\r\n *   ```\r\n */\r\nhelix.hooks.use_state = (function helix$hooks$use_state(initial){\r\nvar vec__41119 = module$node_modules$react$index.useState(initial);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41119,(0),null);\r\nvar u = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41119,(1),null);\r\nvar updater = module$node_modules$react$index.useCallback((function() { \r\nvar G__41217__delegate = function (x,xs){\r\nif((((!((x == null))))?((((false) || ((cljs.core.PROTOCOL_SENTINEL === x.helix$hooks$IStateUpdater$))))?true:(((!x.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(helix.hooks.IStateUpdater,x):false)):cljs.core.native_satisfies_QMARK_(helix.hooks.IStateUpdater,x))){\r\nvar G__41124 = (function helix$hooks$use_state_$_spread_updater(y){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(x,y,xs);\r\n});\r\nreturn (u.cljs$core$IFn$_invoke$arity$1 ? u.cljs$core$IFn$_invoke$arity$1(G__41124) : u.call(null,G__41124));\r\n} else {\r\nreturn (u.cljs$core$IFn$_invoke$arity$1 ? u.cljs$core$IFn$_invoke$arity$1(x) : u.call(null,x));\r\n}\r\n};\r\nvar G__41217 = function (x,var_args){\r\nvar xs = null;\r\nif (arguments.length > 1) {\r\nvar G__41219__i = 0, G__41219__a = new Array(arguments.length -  1);\r\nwhile (G__41219__i < G__41219__a.length) {G__41219__a[G__41219__i] = arguments[G__41219__i + 1]; ++G__41219__i;}\r\n  xs = new cljs.core.IndexedSeq(G__41219__a,0,null);\r\n} \r\nreturn G__41217__delegate.call(this,x,xs);};\r\nG__41217.cljs$lang$maxFixedArity = 1;\r\nG__41217.cljs$lang$applyTo = (function (arglist__41220){\r\nvar x = cljs.core.first(arglist__41220);\r\nvar xs = cljs.core.rest(arglist__41220);\r\nreturn G__41217__delegate(x,xs);\r\n});\r\nG__41217.cljs$core$IFn$_invoke$arity$variadic = G__41217__delegate;\r\nreturn G__41217;\r\n})()\r\n,[]);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v,updater], null);\r\n});\r\n/**\r\n * Like react/useRef. Supports accessing the \"current\" property via\r\n *   dereference (@) and updating the \"current\" property via `reset!` and\r\n *   `swap!`\r\n */\r\nhelix.hooks.use_ref = (function helix$hooks$use_ref(x){\r\nvar ref = module$node_modules$react$index.useRef(null);\r\nif((ref.current == null)){\r\n(ref.current = (function (){var x41133 = ({\"current\": x});\r\n(x41133.cljs$core$IDeref$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x41133.cljs$core$IDeref$_deref$arity$1 = (function (this$){\r\nvar this$__$1 = this;\r\nreturn this$__$1.current;\r\n}));\r\n\r\n(x41133.cljs$core$IReset$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x41133.cljs$core$IReset$_reset_BANG_$arity$2 = (function (this$,v){\r\nvar this$__$1 = this;\r\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",v);\r\n}));\r\n\r\n(x41133.cljs$core$ISwap$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x41133.cljs$core$ISwap$_swap_BANG_$arity$2 = (function (this$,f){\r\nvar this$__$1 = this;\r\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",(function (){var G__41139 = this$__$1.current;\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__41139) : f.call(null,G__41139));\r\n})());\r\n}));\r\n\r\n(x41133.cljs$core$ISwap$_swap_BANG_$arity$3 = (function (this$,f,a){\r\nvar this$__$1 = this;\r\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",(function (){var G__41140 = this$__$1.current;\r\nvar G__41141 = a;\r\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__41140,G__41141) : f.call(null,G__41140,G__41141));\r\n})());\r\n}));\r\n\r\n(x41133.cljs$core$ISwap$_swap_BANG_$arity$4 = (function (this$,f,a,b){\r\nvar this$__$1 = this;\r\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",(function (){var G__41142 = this$__$1.current;\r\nvar G__41143 = a;\r\nvar G__41144 = b;\r\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__41142,G__41143,G__41144) : f.call(null,G__41142,G__41143,G__41144));\r\n})());\r\n}));\r\n\r\n(x41133.cljs$core$ISwap$_swap_BANG_$arity$5 = (function (this$,f,a,b,xs){\r\nvar this$__$1 = this;\r\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,this$__$1.current,a,b,xs));\r\n}));\r\n\r\nreturn x41133;\r\n})());\r\n} else {\r\n}\r\n\r\nreturn ref.current;\r\n});\r\n/**\r\n * Just react/useReducer.\r\n */\r\nhelix.hooks.use_reducer = (function helix$hooks$use_reducer(var_args){\r\nvar G__41146 = arguments.length;\r\nswitch (G__41146) {\r\ncase 2:\r\nreturn helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$2 = (function (reducer,init_state){\r\nreturn helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$3(reducer,init_state,undefined);\r\n}));\r\n\r\n(helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$3 = (function (reducer,init_state,init){\r\nreturn module$node_modules$react$index.useReducer(module$node_modules$react$index.useMemo((function (){\r\nif((((!(cljs.core.fn_QMARK_(reducer)))) && (cljs.core.ifn_QMARK_(reducer)))){\r\nreturn (function helix$hooks$wrap_ifn(state,action){\r\nreturn (reducer.cljs$core$IFn$_invoke$arity$2 ? reducer.cljs$core$IFn$_invoke$arity$2(state,action) : reducer.call(null,state,action));\r\n});\r\n} else {\r\nreturn reducer;\r\n}\r\n}),[reducer]),init_state,init);\r\n}));\r\n\r\n(helix.hooks.use_reducer.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Just react/useContext\r\n */\r\nhelix.hooks.use_context = module$node_modules$react$index.useContext;\r\nhelix.hooks.wrap_fx = (function helix$hooks$wrap_fx(f){\r\nreturn (function helix$hooks$wrap_fx_$_wrap_fx_return(){\r\nvar x = (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\r\nif(cljs.core.fn_QMARK_(x)){\r\nreturn x;\r\n} else {\r\nreturn undefined;\r\n}\r\n});\r\n});\r\nhelix.hooks.simple_body_QMARK_ = (function helix$hooks$simple_body_QMARK_(body){\r\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(body),(1))) && ((cljs.core.first(body) instanceof cljs.core.Symbol)));\r\n});\r\nhelix.hooks.determine_deps = (function helix$hooks$determine_deps(deps){\r\nvar G__41154 = deps;\r\nvar G__41154__$1 = (((G__41154 instanceof cljs.core.Keyword))?G__41154.fqn:null);\r\nswitch (G__41154__$1) {\r\ncase \"once\":\r\nreturn [];\r\n\r\nbreak;\r\ncase \"always\":\r\nreturn undefined;\r\n\r\nbreak;\r\ncase \"auto-deps\":\r\nthrow (new Error(\"Cannot use :auto-deps outside of macro.\"));\r\n\r\nbreak;\r\ndefault:\r\nreturn cljs.core.to_array(deps);\r\n\r\n}\r\n});\r\n/**\r\n * Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.\r\n */\r\nhelix.hooks.use_effect_STAR_ = (function helix$hooks$use_effect_STAR_(var_args){\r\nvar G__41160 = arguments.length;\r\nswitch (G__41160) {\r\ncase 1:\r\nreturn helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn module$node_modules$react$index.useEffect(helix.hooks.wrap_fx(f));\r\n}));\r\n\r\n(helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\r\nthrow (new Error(\"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn module$node_modules$react$index.useEffect(helix.hooks.wrap_fx(f),cljs.core.to_array(deps));\r\n}));\r\n\r\n(helix.hooks.use_effect_STAR_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Like `use-effect*` but instead calls react/useLayoutEffect.\r\n */\r\nhelix.hooks.use_layout_effect_STAR_ = (function helix$hooks$use_layout_effect_STAR_(var_args){\r\nvar G__41162 = arguments.length;\r\nswitch (G__41162) {\r\ncase 1:\r\nreturn helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn module$node_modules$react$index.useLayoutEffect(helix.hooks.wrap_fx(f));\r\n}));\r\n\r\n(helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\r\nthrow (new Error(\"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn module$node_modules$react$index.useLayoutEffect(helix.hooks.wrap_fx(f),cljs.core.to_array(deps));\r\n}));\r\n\r\n(helix.hooks.use_layout_effect_STAR_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\r\n *   `deps`.\r\n */\r\nhelix.hooks.use_memo_STAR_ = (function helix$hooks$use_memo_STAR_(var_args){\r\nvar G__41166 = arguments.length;\r\nswitch (G__41166) {\r\ncase 1:\r\nreturn helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn module$node_modules$react$index.useMemo(f);\r\n}));\r\n\r\n(helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\r\nthrow (new Error(\"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn module$node_modules$react$index.useMemo(f,cljs.core.to_array(deps));\r\n}));\r\n\r\n(helix.hooks.use_memo_STAR_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * `f` is a function which will be passed to react/useCallback.  See\r\n *   namespace doc for `deps`.\r\n */\r\nhelix.hooks.use_callback_STAR_ = (function helix$hooks$use_callback_STAR_(var_args){\r\nvar G__41176 = arguments.length;\r\nswitch (G__41176) {\r\ncase 1:\r\nreturn helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn module$node_modules$react$index.useCallback(f);\r\n}));\r\n\r\n(helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\r\nthrow (new Error(\"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn module$node_modules$react$index.useCallback(f,cljs.core.to_array(deps));\r\n}));\r\n\r\n(helix.hooks.use_callback_STAR_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\r\n *   See namespace doc for `deps`\r\n */\r\nhelix.hooks.use_imperative_handle_STAR_ = (function helix$hooks$use_imperative_handle_STAR_(var_args){\r\nvar G__41184 = arguments.length;\r\nswitch (G__41184) {\r\ncase 2:\r\nreturn helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (ref,f){\r\nreturn module$node_modules$react$index.useImperativeHandle(ref,f);\r\n}));\r\n\r\n(helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (ref,f,deps){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\r\nthrow (new Error(\"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn module$node_modules$react$index.useImperativeHandle(ref,f,cljs.core.to_array(deps));\r\n}));\r\n\r\n(helix.hooks.use_imperative_handle_STAR_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Just react/useDebugValue\r\n */\r\nhelix.hooks.use_debug_value = module$node_modules$react$index.useDebugValue;\r\n/**\r\n * Hook used for safely managing subscriptions, respecting Clojure equality.\r\n * \r\n *   In order to avoid removing and re-adding subscriptions each time this hook is\r\n *   called, the parameters passed to this hook should be memoized in some way–\r\n *   either by wrapping the entire params object with `use-memo` or by wrapping the\r\n *   individual callbacks with `use-callback`.\r\n */\r\nhelix.hooks.use_subscription = (function helix$hooks$use_subscription(p__41196){\r\nvar map__41197 = p__41196;\r\nvar map__41197__$1 = cljs.core.__destructure_map(map__41197);\r\nvar get_current_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41197__$1,new cljs.core.Keyword(null,\"get-current-value\",\"get-current-value\",-1706578691));\r\nvar subscribe = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41197__$1,new cljs.core.Keyword(null,\"subscribe\",\"subscribe\",416253756));\r\nvar vec__41198 = module$node_modules$react$index.useState((function (){\r\nreturn ({\"get-current-value\": get_current_value, \"subscribe\": subscribe, \"value\": (get_current_value.cljs$core$IFn$_invoke$arity$0 ? get_current_value.cljs$core$IFn$_invoke$arity$0() : get_current_value.call(null))});\r\n}));\r\nvar state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41198,(0),null);\r\nvar set_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41198,(1),null);\r\nmodule$node_modules$react$index.useEffect((function (){\r\nvar did_unsubscribe = ({\"value\": false});\r\nvar check_for_updates = (function helix$hooks$use_subscription_$_check_for_updates(){\r\nif(cljs.core.not(helix.hooks.goog$module$goog$object.get(did_unsubscribe,\"value\"))){\r\nvar value = (get_current_value.cljs$core$IFn$_invoke$arity$0 ? get_current_value.cljs$core$IFn$_invoke$arity$0() : get_current_value.call(null));\r\nvar G__41202 = (function (prev){\r\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(get_current_value,helix.hooks.goog$module$goog$object.get(prev,\"get-current-value\"))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(subscribe,helix.hooks.goog$module$goog$object.get(prev,\"subscribe\"))))){\r\nreturn prev;\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(value,helix.hooks.goog$module$goog$object.get(prev,\"value\"))){\r\nreturn prev;\r\n} else {\r\nreturn ({\"get-current-value\": helix.hooks.goog$module$goog$object.get(prev,\"get-current-value\"), \"subscribe\": helix.hooks.goog$module$goog$object.get(prev,\"subscribe\"), \"value\": value});\r\n\r\n}\r\n}\r\n});\r\nreturn (set_state.cljs$core$IFn$_invoke$arity$1 ? set_state.cljs$core$IFn$_invoke$arity$1(G__41202) : set_state.call(null,G__41202));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nvar unsubscribe = (subscribe.cljs$core$IFn$_invoke$arity$1 ? subscribe.cljs$core$IFn$_invoke$arity$1(check_for_updates) : subscribe.call(null,check_for_updates));\r\ncheck_for_updates();\r\n\r\nreturn (function (){\r\nhelix.hooks.goog$module$goog$object.set(did_unsubscribe,\"value\",true);\r\n\r\nreturn (unsubscribe.cljs$core$IFn$_invoke$arity$0 ? unsubscribe.cljs$core$IFn$_invoke$arity$0() : unsubscribe.call(null));\r\n});\r\n}),[get_current_value,subscribe]);\r\n\r\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(get_current_value,helix.hooks.goog$module$goog$object.get(state,\"get-current-value\"))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(subscribe,helix.hooks.goog$module$goog$object.get(state,\"subscribe\"))))){\r\nvar value = (get_current_value.cljs$core$IFn$_invoke$arity$0 ? get_current_value.cljs$core$IFn$_invoke$arity$0() : get_current_value.call(null));\r\nvar G__41205_41253 = ({\"get-current-value\": get_current_value, \"subscribe\": subscribe, \"value\": value});\r\n(set_state.cljs$core$IFn$_invoke$arity$1 ? set_state.cljs$core$IFn$_invoke$arity$1(G__41205_41253) : set_state.call(null,G__41205_41253));\r\n\r\nreturn value;\r\n} else {\r\nreturn helix.hooks.goog$module$goog$object.get(state,\"value\");\r\n}\r\n});\r\n/**\r\n * Equivalent to react/useId\r\n */\r\nhelix.hooks.use_id = module$node_modules$react$index.useId;\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.","~:file","helix/hooks.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$use-memo",["^ ","~:ns","~$helix.hooks","~:name","~$helix.hooks/use-memo","^7","helix/hooks.cljc","^9",1,"^8",233,"~:macro",true,"~:style/indent","~:defn","~:arglists",["~#list",[["~$deps","~$&","~$body"]]],"^6","Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function."],"~$use-imperative-handle",["^ ","^J","^K","^L","~$helix.hooks/use-imperative-handle","^7","helix/hooks.cljc","^9",1,"^8",292,"^N",true,"^O","^P","^Q",["^R",[["~$ref","^S","~$&","^T"]]],"^6","Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function."],"~$use-layout-effect",["^ ","^J","^K","^L","~$helix.hooks/use-layout-effect","^7","helix/hooks.cljc","^9",1,"^8",209,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","^T"]]],"^6","Like `use-effect` but instead calls react/useLayoutEffect."],"~$use-effect",["^ ","^J","^K","^L","~$helix.hooks/use-effect","^7","helix/hooks.cljc","^9",1,"^8",177,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","^T"]]],"^6","Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined."],"~$use-callback",["^ ","^J","^K","^L","~$helix.hooks/use-callback","^7","helix/hooks.cljc","^9",1,"^8",267,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","~$fn-body"]]],"^6","Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function."]],"^L","^K","~:reader-aliases",["^ "],"~:js-aliases",["^ ","react","~$module$node_modules$react$index"],"~:op","^J","~:imports",null,"~:requires",["^ ","~$goog.object","^1:","~$gobj","^1:","^D","^D","~$goog","^1<","^16","^16","~$react","^16"],"~:seen",["^G",["~:require","~:require-macros"]],"~:uses",null,"^1@",["^ ","^K","^K","^D","^D"],"~:form",["^R",["~$ns","^K","Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.",["^R",["^1?",["react","~:as","^1="],["^1:","^1D","^1;"]]],["^R",["^1@",["^K"]]]]],"~:flags",["^ ","^1?",["^G",[]],"^1@",["^G",[]]],"~:js-deps",["^ ","^15",["^ ","^1D","^1="]],"~:deps",["^1<","^D","^16","^1:"]],"^J","^K","~:resource-id",["~:shadow.build.classpath/resource","helix/hooks.cljc"],"~:compiled-at",1703447419244,"^13",["^ ","^1:","^1:","^1;","^1:","^D","^D","^1<","^1<","^16","^16","^1=","^16","^K","^K"],"~:resource-name","helix/hooks.cljc","~:warnings",[],"~:source","(ns helix.hooks\n  \"Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.\"\n  #?(:clj (:require [helix.impl.analyzer :as hana])\n     :cljs (:require\n            [\"react\" :as react]\n            [goog.object :as gobj]))\n  #?(:cljs (:require-macros [helix.hooks])))\n\n\n#?(:cljs\n   (do (def raw-use-effect react/useEffect)\n       (def raw-use-layout-effect react/useLayoutEffect)\n       (def raw-use-memo react/useMemo)\n       (def raw-use-callback react/useCallback)\n       (def raw-use-imperative-handle react/useImperativeHandle)))\n\n\n(defprotocol IStateUpdater\n  \"Protocol that marks a type as callable when passed to a use-state setter.\")\n\n\n#?(:cljs\n   (extend-protocol IStateUpdater\n     MultiFn ;; multimethods\n     function))\n\n\n#?(:cljs\n   (defn use-state\n     \"Like `react/useState`, but the update function returned can be used similar\n  to `swap!` if the first argument implements `IStateUpdater`.\n  By default, this includes functions and multimethods.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```\"\n     [initial]\n     (let [[v u] (react/useState initial)\n           updater (react/useCallback (fn [x & xs]\n                                        (if (satisfies? IStateUpdater x)\n                                          (u (fn spread-updater [y]\n                                               (apply x y xs)))\n                                          ;; if the first argument isn't valid\n                                          ;; updater, then call `u` with it\n                                          ;; ignoring other args\n                                          (u x)))\n                                      ;; `u` is guaranteed to be stable so we elide it\n                                      #js [])]\n       [v updater])))\n\n\n#?(:cljs\n   (defn use-ref\n     \"Like react/useRef. Supports accessing the \\\"current\\\" property via\n     dereference (@) and updating the \\\"current\\\" property via `reset!` and\n     `swap!`\"\n     [x]\n     (let [ref (react/useRef nil)]\n       (when (nil? (.-current ^js ref))\n         (set! (.-current ^js ref)\n               (specify! #js {:current x}\n                 IDeref\n                 (-deref [this]\n                   (.-current ^js this))\n\n                 IReset\n                 (-reset! [this v]\n                   (gobj/set this \"current\" v))\n\n                 ISwap\n                 (-swap!\n                   ([this f]\n                    (gobj/set this \"current\" (f (.-current ^js this))))\n                   ([this f a]\n                    (gobj/set this \"current\" (f (.-current ^js this) a)))\n                   ([this f a b]\n                    (gobj/set this \"current\" (f (.-current ^js this) a b)))\n                   ([this f a b xs]\n                    (gobj/set this \"current\" (apply f (.-current ^js this) a b xs)))))))\n       (.-current ^js ref))))\n\n\n#?(:cljs\n   (defn use-reducer\n     \"Just react/useReducer.\"\n     ([reducer init-state]\n      (use-reducer reducer init-state js/undefined))\n     ([reducer init-state init]\n      (react/useReducer\n       ;; handle ifn, e.g. multi-methods\n       (react/useMemo\n        #(if (and (not (fn? reducer)) (ifn? reducer))\n           (fn wrap-ifn [state action]\n             (reducer state action))\n           reducer)\n        #js [reducer])\n       init-state\n       init))))\n\n\n#?(:cljs\n   (def use-context\n     \"Just react/useContext\"\n     react/useContext))\n\n\n;; React `useEffect` expects either a function or undefined to be returned\n#?(:cljs\n   (defn- wrap-fx [f]\n     (fn wrap-fx-return []\n       (let [x (f)]\n         (if (fn? x)\n           x\n           js/undefined)))))\n\n\n(defn simple-body? [body]\n  (and (= (count body) 1) (symbol? (first body))))\n\n\n#?(:clj\n   (defn deps-macro-body [env deps body simple-body-ok? deps->hook-body]\n     (cond\n       ;;\n       ;; Warn on typical errors writing body\n       ;;\n\n       ;; a single symbol\n       (and (= (count body) 1) (symbol? (first body)) (not simple-body-ok?))\n       (do (hana/warn hana/warning-simple-body env {:form body})\n           nil)\n\n\n       ;;\n       ;; Different variations of deps\n       ;;\n\n       ;; deps are passed in as a vector\n       (vector? deps) (deps->hook-body `(cljs.core/array ~@deps)\n                                       body)\n\n       ;; auto deps is passed in\n       (= deps :auto-deps) (deps->hook-body\n                            `(cljs.core/array ~@(hana/resolve-local-vars env body))\n                            body)\n\n       ;; always fire it (don't pass any deps in to hook)\n       (= deps :always) (deps->hook-body body)\n\n       ;; pass an empty array for things that should only run once\n       (= deps :once) (deps->hook-body '(cljs.core/array) body)\n\n       :else (deps->hook-body `(determine-deps ~deps) body)))\n\n   :cljs (defn determine-deps [deps]\n           (case deps\n             :once (array)\n             :always js/undefined\n             :auto-deps (throw (js/Error. \"Cannot use :auto-deps outside of macro.\"))\n             (to-array deps))))\n\n\n(defmacro use-effect\n  \"Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   ;; we provide a CLJS defn in the case when we need to pass around the hook\n   ;; as a value. This will be slower, `:auto-deps` won't work and devtools will\n   ;; be harder to read\n   (defn use-effect*\n     \"Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.\"\n     ([f] (react/useEffect (wrap-fx f)))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"))))\n      (react/useEffect (wrap-fx f) (to-array deps)))))\n\n\n(defmacro use-layout-effect\n  \"Like `use-effect` but instead calls react/useLayoutEffect.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   (defn use-layout-effect*\n     \"Like `use-effect*` but instead calls react/useLayoutEffect.\"\n     ([f] (react/useLayoutEffect (wrap-fx f)))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"))))\n      (react/useLayoutEffect (wrap-fx f) (to-array deps)))))\n\n\n(defmacro use-memo\n  \"Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body))\n          merge\n          {:tag (hana/inferred-type &env fn-body)}))\n        ([deps fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body)\n                         ~deps)\n          merge\n          {:tag (hana/inferred-type &env (last fn-body))}))))))\n\n\n#?(:cljs\n   (defn use-memo*\n     \"Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.\"\n     ([f] (react/useMemo f))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"))))\n      (react/useMemo f (to-array deps)))))\n\n\n(defmacro use-callback\n  \"Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function.\"\n  {:style/indent :defn}\n  [deps & fn-body]\n  #?(:clj\n     (deps-macro-body\n      &env deps fn-body true\n      (fn\n        ([fn-body] `^function (raw-use-callback ~@fn-body))\n        ([deps fn-body] `^function (raw-use-callback ~@fn-body\n                                                     ~deps))))))\n\n#?(:cljs\n   (defn use-callback*\n     \"`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.\"\n     ([f] (react/useCallback f))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"))))\n      (react/useCallback f (to-array deps)))))\n\n\n(defmacro use-imperative-handle\n  \"Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function.\"\n  {:style/indent :defn}\n  [ref deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `(raw-use-imperative-handle ref (fn [] ~@fn-body)))\n        ([deps fn-body] `(raw-use-imperative-handle\n                          (fn [] ~@fn-body)\n                          ~deps))))))\n\n\n#?(:cljs\n   (defn use-imperative-handle*\n     \"Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`\"\n     ([ref f] (react/useImperativeHandle ref f))\n     ([ref f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"))))\n      (react/useImperativeHandle ref f (to-array deps)))))\n\n\n#?(:cljs\n   (def use-debug-value\n     \"Just react/useDebugValue\"\n     react/useDebugValue))\n\n\n#?(:cljs\n   (defn use-subscription\n     \"Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`.\"\n     [{:keys [get-current-value subscribe]}]\n     (let [[state set-state] (react/useState\n                              (fn []\n                                ;; Read the current value from our subscription.\n                                ;; When this value changes, we'll schedule an update with React.\n                                ;; It's important to also store the hook params so that we can check for staleness.\n                                ;; (See the comment in checkForUpdates() below for more info.)\n                                #js {:get-current-value get-current-value\n                                     :subscribe subscribe\n                                     :value (get-current-value)}))]\n\n       ;; It is important not to subscribe while rendering because this can lead to memory leaks.\n       ;; (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n       ;; Instead, we wait until the commit phase to attach our handler.\n       ;;\n       ;; We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n       ;; so that we don't stretch the commit phase.\n       ;; This also has an added benefit when multiple components are subscribed to the same source:\n       ;; It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n       ;; (Learn more at https://codesandbox.io/s/k0yvr5970o)\n       (react/useEffect\n        (fn []\n          (let [did-unsubscribe #js {:value false}\n                check-for-updates\n                (fn check-for-updates\n                  []\n                  ;; It's possible that this callback will be invoked even after being unsubscribed,\n                  ;; if it's removed as a result of a subscription event/update.\n                  ;; In this case, React will log a DEV warning about an update from an unmounted component.\n                  ;; We can avoid triggering that warning with this check.\n                  (when (not (gobj/get did-unsubscribe \"value\"))\n                    (let [value (get-current-value)]\n                      (set-state\n                       (fn [prev]\n                         (cond\n                           ;; Ignore values from stale sources!\n                           ;; Since we subscribe and unsubscribe in a passive effect,\n                           ;; it's possible that this callback will be invoked for a stale (previous) subscription.\n                           ;; This check avoids scheduling an update for that stale subscription.\n                           (or (not= get-current-value\n                                     (gobj/get prev \"get-current-value\"))\n                               (not= subscribe\n                                     (gobj/get prev \"subscribe\")))\n                           prev\n\n                           ;; The moment we've all been waiting for... the entire\n                           ;; point of rewriting this hook in ClojureScript.\n                           ;; If the value is equal under Clojure equality to the\n                           ;; previous value, then return the previous value to\n                           ;; preserve reference equality and allow React to bail.\n                           (= value (gobj/get prev \"value\"))\n                           prev\n\n                           ;; return the new value\n                           :else #js {:get-current-value (gobj/get prev \"get-current-value\")\n                                      :subscribe (gobj/get prev \"subscribe\")\n                                      :value value}))))))\n                unsubscribe (subscribe check-for-updates)]\n            ;; Because we're subscribing in a passive effect,\n            ;; it's possible that an update has occurred between render and our effect handler.\n            ;; Check for this and schedule an update if work has occurred.\n            (check-for-updates)\n            (fn []\n              (gobj/set did-unsubscribe \"value\" true)\n              (unsubscribe))))\n        #js [get-current-value subscribe])\n\n       (if (or\n            (not= get-current-value (gobj/get state \"get-current-value\"))\n            (not= subscribe (gobj/get state \"subscribe\")))\n         ;; If parameters have changed since our last render,\n         ;; schedule an update with its current value.\n         (let [value (get-current-value)]\n           (set-state #js {:get-current-value get-current-value\n                           :subscribe subscribe\n                           :value value})\n           ;; If the subscription has been updated, we'll schedule another update with React.\n           ;; React will process this update immediately, so the old subscription value won't be committed.\n           ;; It is still nice to avoid returning a mismatched value though, so let's override the return value.\n           value)\n\n         ;; If parameters haven't changed, return value stored in state\n         (gobj/get state \"value\")))))\n\n#?(:cljs\n   (def use-id\n     \"Equivalent to react/useId\"\n     react/useId))\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["helix.hooks/raw-use-effect","js/module$node_modules$react$index.useEffect","helix.hooks/raw-use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","helix.hooks/raw-use-memo","js/module$node_modules$react$index.useMemo","helix.hooks/raw-use-callback","js/module$node_modules$react$index.useCallback","helix.hooks/raw-use-imperative-handle","js/module$node_modules$react$index.useImperativeHandle","helix.hooks/IStateUpdater","cljs.core/PROTOCOL_SENTINEL","cljs.core/MultiFn","helix.hooks/use-state","initial","vec__41119","cljs.core.nth","v","u","js/module$node_modules$react$index.useState","updater","x","xs","cljs.core/native-satisfies?","G__41124","y","cljs.core.apply","helix.hooks/use-ref","ref","js/module$node_modules$react$index.useRef","x41133","this","helix.hooks.goog$module$goog$object.set","f","G__41139","a","G__41140","G__41141","b","G__41142","G__41143","G__41144","var_args","G__41146","helix.hooks/use-reducer","js/Error","reducer","init-state","helix.hooks.use_reducer","js/undefined","init","js/module$node_modules$react$index.useReducer","cljs.core/fn?","cljs.core/ifn?","state","action","helix.hooks/use-context","js/module$node_modules$react$index.useContext","helix.hooks/wrap-fx","helix.hooks/simple-body?","body","cljs.core._EQ_","cljs.core/count","cljs.core/Symbol","cljs.core/first","helix.hooks/determine-deps","deps","G__41154","cljs.core/Keyword","cljs.core/to-array","G__41160","helix.hooks/use-effect*","goog/DEBUG","G__41162","helix.hooks/use-layout-effect*","G__41166","helix.hooks/use-memo*","G__41176","helix.hooks/use-callback*","G__41184","helix.hooks/use-imperative-handle*","helix.hooks/use-debug-value","js/module$node_modules$react$index.useDebugValue","p__41196","map__41197","cljs.core/--destructure-map","cljs.core.get","helix.hooks/use-subscription","get-current-value","subscribe","vec__41198","set-state","did-unsubscribe","check-for-updates","cljs.core/not","helix.hooks.goog$module$goog$object.get","value","G__41202","prev","cljs.core.not_EQ_","unsubscribe","G__41205","helix.hooks/use-id","js/module$node_modules$react$index.useId"]],"~:used-vars",["^G",["~$js/module$node_modules$react$index.useMemo","~$helix.hooks/use-ref","~$cljs.core/to-array","~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/MultiFn","~$helix.hooks/use-subscription","~$js/undefined","~$helix.hooks/use-callback*","~$helix.hooks/use-memo*","~$helix.hooks/use-reducer","~$cljs.core/=","~$cljs.core/ifn?","~$cljs.core/count","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/not=","~$helix.hooks/raw-use-imperative-handle","~$helix.hooks/raw-use-layout-effect","~$cljs.core/native-satisfies?","~$helix.hooks/wrap-fx","~$helix.hooks/use-id","~$helix.hooks.goog$module$goog$object.set","~$helix.hooks/simple-body?","~$helix.hooks/use-imperative-handle*","~$cljs.core/fn?","~$js/module$node_modules$react$index.useCallback","~$helix.hooks/IStateUpdater","~$cljs.core/get","~$js/module$node_modules$react$index.useContext","~$helix.hooks/determine-deps","~$goog/DEBUG","~$js/module$node_modules$react$index.useLayoutEffect","~$helix.hooks/use-effect*","~$helix.hooks/use-layout-effect*","~$cljs.core/nth","~$js/module$node_modules$react$index.useState","~$js/module$node_modules$react$index.useDebugValue","~$js/module$node_modules$react$index.useReducer","~$js/module$node_modules$react$index.useRef","~$cljs.core/not","~$helix.hooks/raw-use-callback","~$helix.hooks/raw-use-effect","~$cljs.core/Symbol","~$js/module$node_modules$react$index.useEffect","~$js/module$node_modules$react$index.useImperativeHandle","~$helix.hooks/use-state","~$js/module$node_modules$react$index.useId","~$cljs.core/first","~$helix.hooks/use-context","~$helix.hooks/use-debug-value","~$helix.hooks.goog$module$goog$object.get","~$js/Error","~$helix.hooks/raw-use-memo"]]],"~:cache-keys",["~#cmap",[["^1I","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^1<","~$goog.dom.HtmlElement"]]],["^1I","helix/hooks.cljc"],["8ff081e0a741edb0b3b3d213df7571e19e532ba1","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^D","^16","^1:"]]],["^1I","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1I","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3="]]],["^1I","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<"]]],["^1I","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3:","^3="]]],["^1I","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1I","shadow/js.js"],["1ee65ad37b2c4980451f8a2979308ed6a021f431","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<"]]],"~:SHADOW-TIMESTAMP",[1703446907000,1703446907000,1701588412000],["^3D","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","1df918e8981877c2759388dfae58a059e089860d","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^3E"]]],["^1I","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","~$goog.reflect"]]],["^1I","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","~$goog.fs.blob","^3@","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3B","^3C"]]],["^1I","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3B","~$goog.html.SafeUrl","^3C","^3<","^3="]]],["^1I","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3K","~$goog.html.SafeStyle","^3M","^3A","~$goog.html.uncheckedconversions","^3B","^3="]]],["^1I","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","~$goog.dom.TagName","^3<","~$goog.dom.element"]]],["^1I","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3B","^3K","^3R","~$goog.html.SafeStyleSheet","^3M","^3T","^3A","^3C","^3<","~$goog.labs.userAgent.browser","~$goog.array","^1:","^3=","~$goog.dom.tags","^3L"]]],["^1I","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^1:"]]],["^1I","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1I","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3X","^3<","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1I","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3;"]]],["^1I","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",[]]],["^1I","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3X","^1:"]]],["^3D","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^3E"]]],["^1I","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","~$goog.dom.safe","^3S","^3B","^3="]]],["^1I","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3=","^3?"]]],["^1I","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","~$goog.flags"]]],["^1I","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3[","^3T"]]],["^1I","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","^3Q","^3K","^3R","^3V","^3M","^3A","^3B","^3="]]],["^1I","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<"]]],["^1I","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","~$goog.math.Long","~$goog.math.Integer","^41","^1:","^3X","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1I","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3B","^3C","^3L","^3<"]]],["^1I","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3B","^3R","^3C","^1:","^3<","^3="]]],["^1I","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3I"]]],["^1I","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","^41"]]],["^1I","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^1<","^3<","^3C"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/lilactown/helix/0.2.0/helix-0.2.0.jar!/helix/hooks.cljc",1701644990000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/lilactown/helix/0.2.0/helix-0.2.0.jar!/helix/impl/analyzer.clj",1701644990000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/api.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/zip.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1700591986000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.","^7","helix/hooks.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"~:shadow/protocol-prefixes",["^G",["helix$hooks$IStateUpdater$"]],"^E",null,"^F",["^G",[]],"^H",["^ ","^I",["^ ","^J","^K","^L","^M","^7","helix/hooks.cljc","^9",1,"^8",233,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","^T"]]],"^6","Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function."],"^U",["^ ","^J","^K","^L","^V","^7","helix/hooks.cljc","^9",1,"^8",292,"^N",true,"^O","^P","^Q",["^R",[["^W","^S","~$&","^T"]]],"^6","Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function."],"^X",["^ ","^J","^K","^L","^Y","^7","helix/hooks.cljc","^9",1,"^8",209,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","^T"]]],"^6","Like `use-effect` but instead calls react/useLayoutEffect."],"^Z",["^ ","^J","^K","^L","^[","^7","helix/hooks.cljc","^9",1,"^8",177,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","^T"]]],"^6","Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined."],"^10",["^ ","^J","^K","^L","^11","^7","helix/hooks.cljc","^9",1,"^8",267,"^N",true,"^O","^P","^Q",["^R",[["^S","~$&","^12"]]],"^6","Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function."]],"~:shadow/js-access-properties",["^G",["useLayoutEffect","useRef","useCallback","useImperativeHandle","useId","useDebugValue","useMemo","useReducer","useEffect","useState","useContext"]],"^L","^K","^13",["^ "],"^14",["^ ","^15","^16"],"^18",null,"^19",["^ ","^1:","^1:","^1;","^1:","^D","^D","^1<","^1<","^16","^16","^1=","^16"],"^1>",["^G",["^1?","^1@"]],"~:shadow/js-access-global",["^G",["undefined","Error"]],"^1A",null,"~:defs",["^ ","~$use-ref",["^ ","~:protocol-inline",null,"^5",["^ ","^7","helix/hooks.cljc","^8",67,"^9",10,"^:",67,"^;",17,"^Q",["^R",["~$quote",["^R",[["~$x"]]]]],"^6","Like react/useRef. Supports accessing the \"current\" property via\n     dereference (@) and updating the \"current\" property via `reset!` and\n     `swap!`"],"^L","^1V","^7","helix/hooks.cljc","^;",17,"~:method-params",["^R",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^9",4,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^R",["~$defn","^57","Like react/useRef. Supports accessing the \"current\" property via\n     dereference (@) and updating the \"current\" property via `reset!` and\n     `swap!`",["~$x"],["^R",["~$let",["^W",["^R",["~$react/useRef",null]]],["^R",["~$when",["^R",["~$nil?",["^R",["~$.-current","^W"]]]],["^R",["~$set!",["^R",["^5F","^W"]],["^R",["~$specify!",["~#js-value",["^ ","~:current","~$x"]],"~$IDeref",["^R",["~$-deref",["~$this"],["^R",["^5F","^5M"]]]],"~$IReset",["^R",["~$-reset!",["^5M","~$v"],["^R",["~$gobj/set","^5M","current","~$v"]]]],"~$ISwap",["^R",["~$-swap!",["^R",[["^5M","~$f"],["^R",["^5P","^5M","current",["^R",["~$f",["^R",["^5F","^5M"]]]]]]]],["^R",[["^5M","~$f","~$a"],["^R",["^5P","^5M","current",["^R",["~$f",["^R",["^5F","^5M"]],"~$a"]]]]]],["^R",[["^5M","~$f","~$a","~$b"],["^R",["^5P","^5M","current",["^R",["~$f",["^R",["^5F","^5M"]],"~$a","~$b"]]]]]],["^R",[["^5M","~$f","~$a","~$b","~$xs"],["^R",["^5P","^5M","current",["^R",["~$apply","~$f",["^R",["^5F","^5M"]],"~$a","~$b","^5S"]]]]]]]]]]]]]],["^R",["^5F","^W"]]]]]]],"~:variadic?",false,"^8",67,"~:ret-tag","~$js","^:",67,"~:max-fixed-arity",1,"~:fn-var",true,"^Q",["^R",["^59",["^R",[["~$x"]]]]],"^6","Like react/useRef. Supports accessing the \"current\" property via\n     dereference (@) and updating the \"current\" property via `reset!` and\n     `swap!`"],"~$use-subscription",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",327,"^9",10,"^:",327,"^;",26,"^Q",["^R",["^59",["^R",[[["^ ","~:keys",["~$get-current-value","~$subscribe"]]]]]]],"^6","Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`."],"^L","^1[","^7","helix/hooks.cljc","^;",26,"^5:",["^R",[["~$p__41196"]]],"^5;",null,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^5Z","Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`.",[["^ ","^5[",["^60","^61"]]],["^R",["^5B",[["~$state","~$set-state"],["^R",["~$react/useState",["^R",["~$fn",[],["^5I",["^ ","~:get-current-value","^60","~:subscribe","^61","~:value",["^R",["^60"]]]]]]]]],["^R",["~$react/useEffect",["^R",["^66",[],["^R",["^5B",["~$did-unsubscribe",["^5I",["^ ","^69",false]],"~$check-for-updates",["^R",["^66","^6<",[],["^R",["^5D",["^R",["~$not",["^R",["~$gobj/get","^6;","value"]]]],["^R",["^5B",["~$value",["^R",["^60"]]],["^R",["^64",["^R",["^66",["~$prev"],["^R",["~$cond",["^R",["~$or",["^R",["~$not=","^60",["^R",["^6>","^6@","get-current-value"]]]],["^R",["^6C","^61",["^R",["^6>","^6@","subscribe"]]]]]],"^6@",["^R",["~$=","^6?",["^R",["^6>","^6@","value"]]]],"^6@","~:else",["^5I",["^ ","^67",["^R",["^6>","^6@","get-current-value"]],"^68",["^R",["^6>","^6@","subscribe"]],"^69","^6?"]]]]]]]]]]]]]],"~$unsubscribe",["^R",["^61","^6<"]]],["^R",["^6<"]],["^R",["^66",[],["^R",["^5P","^6;","value",true]],["^R",["^6E"]]]]]]]],["^5I",["^60","^61"]]]],["^R",["~$if",["^R",["^6B",["^R",["^6C","^60",["^R",["^6>","^63","get-current-value"]]]],["^R",["^6C","^61",["^R",["^6>","^63","subscribe"]]]]]],["^R",["^5B",["^6?",["^R",["^60"]]],["^R",["^64",["^5I",["^ ","^67","^60","^68","^61","^69","^6?"]]]],"^6?"]],["^R",["^6>","^63","value"]]]]]]]]],"^5U",false,"^8",327,"^5V",["^G",["~$any","^5W"]],"^:",327,"^5X",1,"^5Y",true,"^Q",["^R",["^59",["^R",[[["^ ","^5[",["^60","^61"]]]]]]],"^6","Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`."],"~$use-memo*",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",256,"^9",10,"^:",256,"^;",19,"^Q",["^R",["^59",["^R",[["~$f"],["~$f","^S"]]]]],"^6","Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.","~:top-fn",["^ ","^5U",false,"~:fixed-arity",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]]],"^L","^22","^7","helix/hooks.cljc","^;",19,"^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]],"^5:",[["~$f"],["~$f","^S"]],"^5;",null,"^6J",2,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^6H","Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.",["^R",[["~$f"],["^R",["~$react/useMemo","~$f"]]]],["^R",[["~$f","^S"],["^R",["^5D","^2H",["^R",["^5D",["^R",["~$=","^S","~:auto-deps"]],["^R",["~$throw",["^R",["~$js/Error.","Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that"]]]]]]]],["^R",["^6K","~$f",["^R",["~$to-array","^S"]]]]]]]]],"^5U",false,"~:methods",[["^ ","^6J",1,"^5U",false,"~:tag","^5W"],["^ ","^6J",2,"^5U",false,"^6Q","^5W"]],"^8",256,"^:",256,"^5X",2,"^5Y",true,"^Q",["^R",[["~$f"],["~$f","^S"]]],"^6","Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`."],"~$use-reducer",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",98,"^9",10,"^:",98,"^;",21,"^Q",["^R",["^59",["^R",[["~$reducer","~$init-state"],["^6S","^6T","~$init"]]]]],"^6","Just react/useReducer.","^6I",["^ ","^5U",false,"^6J",3,"^5X",3,"^5:",[["^6S","^6T"],["^6S","^6T","^6U"]],"^Q",["^R",[["^6S","^6T"],["^6S","^6T","^6U"]]],"^5<",["^R",[null,null]]]],"^L","^23","^7","helix/hooks.cljc","^;",21,"^6I",["^ ","^5U",false,"^6J",3,"^5X",3,"^5:",[["^6S","^6T"],["^6S","^6T","^6U"]],"^Q",["^R",[["^6S","^6T"],["^6S","^6T","^6U"]]],"^5<",["^R",[null,null]]],"^5:",[["^6S","^6T"],["^6S","^6T","^6U"]],"^5;",null,"^6J",3,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^6R","Just react/useReducer.",["^R",[["^6S","^6T"],["^R",["^6R","^6S","^6T","^20"]]]],["^R",[["^6S","^6T","^6U"],["^R",["~$react/useReducer",["^R",["^6K",["^R",["~$fn*",[],["^R",["^6F",["^R",["~$and",["^R",["^6=",["^R",["~$fn?","^6S"]]]],["^R",["~$ifn?","^6S"]]]],["^R",["^66","~$wrap-ifn",["^63","~$action"],["^R",["^6S","^63","^70"]]]],"^6S"]]]],["^5I",["^6S"]]]],"^6T","^6U"]]]]]]],"^5U",false,"^6P",[["^ ","^6J",2,"^5U",false,"^6Q","^6G"],["^ ","^6J",3,"^5U",false,"^6Q","^5W"]],"^8",98,"^:",98,"^5X",3,"^5Y",true,"^Q",["^R",[["^6S","^6T"],["^6S","^6T","^6U"]]],"^6","Just react/useReducer."],"~$use-callback*",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",281,"^9",10,"^:",281,"^;",23,"^Q",["^R",["^59",["^R",[["~$f"],["~$f","^S"]]]]],"^6","~`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.","^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]]],"^L","^21","^7","helix/hooks.cljc","^;",23,"^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]],"^5:",[["~$f"],["~$f","^S"]],"^5;",null,"^6J",2,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^71","~`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.",["^R",[["~$f"],["^R",["~$react/useCallback","~$f"]]]],["^R",[["~$f","^S"],["^R",["^5D","^2H",["^R",["^5D",["^R",["~$=","^S","^6L"]],["^R",["^6M",["^R",["^6N","Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that"]]]]]]]],["^R",["^72","~$f",["^R",["^6O","^S"]]]]]]]]],"^5U",false,"^6P",[["^ ","^6J",1,"^5U",false,"^6Q","^5W"],["^ ","^6J",2,"^5U",false,"^6Q","^5W"]],"^8",281,"^:",281,"^5X",2,"^5Y",true,"^Q",["^R",[["~$f"],["~$f","^S"]]],"^6","~`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`."],"~$raw-use-layout-effect",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",23,"^9",13,"^:",23,"^;",34],"^L","^2;","^7","helix/hooks.cljc","^;",34,"^9",8,"^5=",["^ ","^5>","^5?","^5@",["^R",["~$do",["^R",["~$def","~$raw-use-effect","^6:"]],["^R",["^75","^73","~$react/useLayoutEffect"]],["^R",["^75","~$raw-use-memo","^6K"]],["^R",["^75","~$raw-use-callback","^72"]],["^R",["^75","~$raw-use-imperative-handle","~$react/useImperativeHandle"]]]]],"^8",23,"^:",23,"^6Q","^5W"],"^7:",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",26,"^9",13,"^:",26,"^;",38],"^L","^2:","^7","helix/hooks.cljc","^;",38,"^9",8,"^5=",["^ ","^5>","^5?","^5@",["^R",["^74",["^R",["^75","^76","^6:"]],["^R",["^75","^73","^77"]],["^R",["^75","^78","^6K"]],["^R",["^75","^79","^72"]],["^R",["^75","^7:","^7;"]]]]],"^8",26,"^:",26,"^6Q","^5W"],"~$wrap-fx",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",123,"^9",11,"^:",123,"^;",18,"~:private",true,"^Q",["^R",["^59",["^R",[["~$f"]]]]]],"^7=",true,"^L","^2=","^7","helix/hooks.cljc","^;",18,"^5:",["^R",[["~$f"]]],"^5;",null,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["~$defn-","^7<",["~$f"],["^R",["^66","~$wrap-fx-return",[],["^R",["^5B",["~$x",["^R",["~$f"]]],["^R",["^6F",["^R",["^6Y","~$x"]],"~$x","^20"]]]]]]]]],"^5U",false,"^8",123,"^5V","~$function","^:",123,"^5X",1,"^5Y",true,"^Q",["^R",["^59",["^R",[["~$f"]]]]]],"~$use-id",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",419,"^9",9,"^:",419,"^;",15],"^L","^2>","^7","helix/hooks.cljc","^;",15,"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^75","^7A","Equivalent to react/useId","~$react/useId"]]],"^8",419,"^:",419,"^6Q","^5W","^6","Equivalent to react/useId"],"~$simple-body?",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",131,"^9",7,"^:",131,"^;",19,"^Q",["^R",["^59",["^R",[["^T"]]]]]],"^L","^2@","^7","helix/hooks.cljc","^;",19,"^5:",["^R",[["^T"]]],"^5;",null,"^5<",["^R",[null,null]],"^9",1,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^7C",["^T"],["^R",["^6X",["^R",["~$=",["^R",["~$count","^T"]],1]],["^R",["~$symbol?",["^R",["~$first","^T"]]]]]]]]],"^5U",false,"^8",131,"^5V","~$boolean","^:",131,"^5X",1,"^5Y",true,"^Q",["^R",["^59",["^R",[["^T"]]]]]],"~$use-imperative-handle*",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",309,"^9",10,"^:",309,"^;",32,"^Q",["^R",["^59",["^R",[["^W","~$f"],["^W","~$f","^S"]]]]],"^6","Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`","^6I",["^ ","^5U",false,"^6J",3,"^5X",3,"^5:",[["^W","~$f"],["^W","~$f","^S"]],"^Q",["^R",[["^W","~$f"],["^W","~$f","^S"]]],"^5<",["^R",[null,null]]]],"^L","^2A","^7","helix/hooks.cljc","^;",32,"^6I",["^ ","^5U",false,"^6J",3,"^5X",3,"^5:",[["^W","~$f"],["^W","~$f","^S"]],"^Q",["^R",[["^W","~$f"],["^W","~$f","^S"]]],"^5<",["^R",[null,null]]],"^5:",[["^W","~$f"],["^W","~$f","^S"]],"^5;",null,"^6J",3,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^7H","Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`",["^R",[["^W","~$f"],["^R",["^7;","^W","~$f"]]]],["^R",[["^W","~$f","^S"],["^R",["^5D","^2H",["^R",["^5D",["^R",["~$=","^S","^6L"]],["^R",["^6M",["^R",["^6N","Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that"]]]]]]]],["^R",["^7;","^W","~$f",["^R",["^6O","^S"]]]]]]]]],"^5U",false,"^6P",[["^ ","^6J",2,"^5U",false,"^6Q","^5W"],["^ ","^6J",3,"^5U",false,"^6Q","^5W"]],"^8",309,"^:",309,"^5X",3,"^5Y",true,"^Q",["^R",[["^W","~$f"],["^W","~$f","^S"]]],"^6","Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`"],"~$IStateUpdater",["^ ","^5",["^ ","~:protocol-symbol",true,"^7","helix/hooks.cljc","^;",27,"^9",14,"^8",29,"~:protocol-info",["^ ","^6P",["^ "]],"^:",29,"~:sigs",["^ "],"^6","Protocol that marks a type as callable when passed to a use-state setter.","~:jsdoc",["^R",["@interface"]]],"^7J",true,"^L","^2D","^7","helix/hooks.cljc","^;",27,"^9",1,"^5=",["^ ","^5>","^5?","^5@",["^R",["~$defprotocol","^7I","Protocol that marks a type as callable when passed to a use-state setter."]]],"^8",29,"^7K",["^ ","^6P",["^ "]],"~:info",null,"^:",29,"^6Q","^6G","^7L",["^ "],"~:impls",["^G",["^1Z","^7@"]],"^6","Protocol that marks a type as callable when passed to a use-state setter.","^7M",["^R",["@interface"]]],"~$determine-deps",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",169,"^9",16,"^:",169,"^;",30,"^Q",["^R",["^59",["^R",[["^S"]]]]]],"^L","^2G","^7","helix/hooks.cljc","^;",30,"^5:",["^R",[["^S"]]],"^5;",null,"^5<",["^R",[null,null]],"^9",10,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^7Q",["^S"],["^R",["~$case","^S","~:once",["^R",["~$array"]],"~:always","^20","^6L",["^R",["^6M",["^R",["^6N","Cannot use :auto-deps outside of macro."]]]],["^R",["^6O","^S"]]]]]]],"^5U",false,"^8",169,"^:",169,"^5X",1,"^5Y",true,"^Q",["^R",["^59",["^R",[["^S"]]]]]],"~$use-layout-effect*",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",223,"^9",10,"^:",223,"^;",28,"^Q",["^R",["^59",["^R",[["~$f"],["~$f","^S"]]]]],"^6","Like `use-effect*` but instead calls react/useLayoutEffect.","^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]]],"^L","^2K","^7","helix/hooks.cljc","^;",28,"^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]],"^5:",[["~$f"],["~$f","^S"]],"^5;",null,"^6J",2,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^7V","Like `use-effect*` but instead calls react/useLayoutEffect.",["^R",[["~$f"],["^R",["^77",["^R",["^7<","~$f"]]]]]],["^R",[["~$f","^S"],["^R",["^5D","^2H",["^R",["^5D",["^R",["~$=","^S","^6L"]],["^R",["^6M",["^R",["^6N","Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that"]]]]]]]],["^R",["^77",["^R",["^7<","~$f"]],["^R",["^6O","^S"]]]]]]]]],"^5U",false,"^6P",[["^ ","^6J",1,"^5U",false,"^6Q","^5W"],["^ ","^6J",2,"^5U",false,"^6Q","^5W"]],"^8",223,"^:",223,"^5X",2,"^5Y",true,"^Q",["^R",[["~$f"],["~$f","^S"]]],"^6","Like `use-effect*` but instead calls react/useLayoutEffect."],"~$use-effect*",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",199,"^9",10,"^:",199,"^;",21,"^Q",["^R",["^59",["^R",[["~$f"],["~$f","^S"]]]]],"^6","Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.","^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]]],"^L","^2J","^7","helix/hooks.cljc","^;",21,"^6I",["^ ","^5U",false,"^6J",2,"^5X",2,"^5:",[["~$f"],["~$f","^S"]],"^Q",["^R",[["~$f"],["~$f","^S"]]],"^5<",["^R",[null,null]]],"^5:",[["~$f"],["~$f","^S"]],"^5;",null,"^6J",2,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^7W","Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.",["^R",[["~$f"],["^R",["^6:",["^R",["^7<","~$f"]]]]]],["^R",[["~$f","^S"],["^R",["^5D","^2H",["^R",["^5D",["^R",["~$=","^S","^6L"]],["^R",["^6M",["^R",["^6N","Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that"]]]]]]]],["^R",["^6:",["^R",["^7<","~$f"]],["^R",["^6O","^S"]]]]]]]]],"^5U",false,"^6P",[["^ ","^6J",1,"^5U",false,"^6Q","^5W"],["^ ","^6J",2,"^5U",false,"^6Q","^5W"]],"^8",199,"^:",199,"^5X",2,"^5Y",true,"^Q",["^R",[["~$f"],["~$f","^S"]]],"^6","Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`."],"^79",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",25,"^9",13,"^:",25,"^;",29],"^L","^2R","^7","helix/hooks.cljc","^;",29,"^9",8,"^5=",["^ ","^5>","^5?","^5@",["^R",["^74",["^R",["^75","^76","^6:"]],["^R",["^75","^73","^77"]],["^R",["^75","^78","^6K"]],["^R",["^75","^79","^72"]],["^R",["^75","^7:","^7;"]]]]],"^8",25,"^:",25,"^6Q","^5W"],"^76",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",22,"^9",13,"^:",22,"^;",27],"^L","^2S","^7","helix/hooks.cljc","^;",27,"^9",8,"^5=",["^ ","^5>","^5?","^5@",["^R",["^74",["^R",["^75","^76","^6:"]],["^R",["^75","^73","^77"]],["^R",["^75","^78","^6K"]],["^R",["^75","^79","^72"]],["^R",["^75","^7:","^7;"]]]]],"^8",22,"^:",22,"^6Q","^5W"],"~$use-state",["^ ","^58",null,"^5",["^ ","^7","helix/hooks.cljc","^8",40,"^9",10,"^:",40,"^;",19,"^Q",["^R",["^59",["^R",[["~$initial"]]]]],"^6","Like `react/useState`, but the update function returned can be used similar\n  to `swap!` if the first argument implements `IStateUpdater`.\n  By default, this includes functions and multimethods.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```"],"^L","^2W","^7","helix/hooks.cljc","^;",19,"^5:",["^R",[["^7Y"]]],"^5;",null,"^5<",["^R",[null,null]],"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^5A","^7X","Like `react/useState`, but the update function returned can be used similar\n  to `swap!` if the first argument implements `IStateUpdater`.\n  By default, this includes functions and multimethods.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```",["^7Y"],["^R",["^5B",[["~$v","~$u"],["^R",["^65","^7Y"]],"~$updater",["^R",["^72",["^R",["^66",["~$x","~$&","^5S"],["^R",["^6F",["^R",["~$satisfies?","^7I","~$x"]],["^R",["~$u",["^R",["^66","~$spread-updater",["~$y"],["^R",["^5T","~$x","~$y","^5S"]]]]]],["^R",["~$u","~$x"]]]]]],["^5I",[]]]]],["~$v","^7Z"]]]]]],"^5U",false,"^8",40,"^5V","~$cljs.core/IVector","^:",40,"^5X",1,"^5Y",true,"^Q",["^R",["^59",["^R",[["^7Y"]]]]],"^6","Like `react/useState`, but the update function returned can be used similar\n  to `swap!` if the first argument implements `IStateUpdater`.\n  By default, this includes functions and multimethods.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```"],"~$use-context",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",116,"^9",9,"^:",116,"^;",20],"^L","^2Z","^7","helix/hooks.cljc","^;",20,"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^75","^82","Just react/useContext","~$react/useContext"]]],"^8",116,"^:",116,"^6Q","^5W","^6","Just react/useContext"],"~$use-debug-value",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",321,"^9",9,"^:",321,"^;",24],"^L","^2[","^7","helix/hooks.cljc","^;",24,"^9",4,"^5=",["^ ","^5>","^5?","^5@",["^R",["^75","^84","Just react/useDebugValue","~$react/useDebugValue"]]],"^8",321,"^:",321,"^6Q","^5W","^6","Just react/useDebugValue"],"^78",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",24,"^9",13,"^:",24,"^;",25],"^L","^32","^7","helix/hooks.cljc","^;",25,"^9",8,"^5=",["^ ","^5>","^5?","^5@",["^R",["^74",["^R",["^75","^76","^6:"]],["^R",["^75","^73","^77"]],["^R",["^75","^78","^6K"]],["^R",["^75","^79","^72"]],["^R",["^75","^7:","^7;"]]]]],"^8",24,"^:",24,"^6Q","^5W"]],"^1@",["^ ","^K","^K","^D","^D"],"~:cljs.analyzer/constants",["^ ","^1>",["^G",["^6D","^6L","^68","^67"]],"~:order",["^6L","^67","^68","^6D"]],"^1E",["^ ","^1?",["^G",[]],"^1@",["^G",[]]],"^1F",["^ ","^15",["^ ","^1D","^1="]],"^1G",["^1<","^D","^16","^1:"]],"^J","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^34",[["^8:","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^8:","~:shadow-tweaks"],null,["^8:","~:source-map-inline"],null,["^8:","~:elide-asserts"],false,["^8:","~:optimize-constants"],null,["^8:","^1L"],null,["^8:","~:external-config"],null,["^8:","~:tooling-config"],null,["^8:","~:emit-constants"],null,["^8:","~:load-tests"],null,["^8:","~:form-size-threshold"],null,["^8:","~:global-goog-object&array"],null,["^8:","~:data-readers"],null,["^8:","~:infer-externs"],"~:auto",["^8:","^1N"],null,["^8<","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8:","~:fn-invoke-direct"],null,["^8:","~:source-map"],"/dev/null"]]]