["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\r\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\r\n\r\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\r\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__31294_SHARP_){\r\nreturn (max === p1__31294_SHARP_);\r\n}),coll));\r\n});\r\n/**\r\n * Return a set that is the union of the input sets\r\n */\r\nclojure.set.union = (function clojure$set$union(var_args){\r\nvar G__31300 = arguments.length;\r\nswitch (G__31300) {\r\ncase 0:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__5794__auto__ = [];\r\nvar len__5769__auto___31355 = arguments.length;\r\nvar i__5770__auto___31356 = (0);\r\nwhile(true){\r\nif((i__5770__auto___31356 < len__5769__auto___31355)){\r\nargs_arr__5794__auto__.push((arguments[i__5770__auto___31356]));\r\n\r\nvar G__31357 = (i__5770__auto___31356 + (1));\r\ni__5770__auto___31356 = G__31357;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\r\n\r\n}\r\n});\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn cljs.core.PersistentHashSet.EMPTY;\r\n}));\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n}));\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nif((cljs.core.count(s1) < cljs.core.count(s2))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\r\n}\r\n}));\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\r\n}));\r\n\r\n/** @this {Function} */\r\n(clojure.set.union.cljs$lang$applyTo = (function (seq31297){\r\nvar G__31298 = cljs.core.first(seq31297);\r\nvar seq31297__$1 = cljs.core.next(seq31297);\r\nvar G__31299 = cljs.core.first(seq31297__$1);\r\nvar seq31297__$2 = cljs.core.next(seq31297__$1);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__31298,G__31299,seq31297__$2);\r\n}));\r\n\r\n(clojure.set.union.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Return a set that is the intersection of the input sets\r\n */\r\nclojure.set.intersection = (function clojure$set$intersection(var_args){\r\nvar G__31309 = arguments.length;\r\nswitch (G__31309) {\r\ncase 1:\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__5794__auto__ = [];\r\nvar len__5769__auto___31364 = arguments.length;\r\nvar i__5770__auto___31365 = (0);\r\nwhile(true){\r\nif((i__5770__auto___31365 < len__5769__auto___31364)){\r\nargs_arr__5794__auto__.push((arguments[i__5770__auto___31365]));\r\n\r\nvar G__31366 = (i__5770__auto___31365 + (1));\r\ni__5770__auto___31365 = G__31366;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\r\n\r\n}\r\n});\r\n\r\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n}));\r\n\r\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nwhile(true){\r\nif((cljs.core.count(s2) < cljs.core.count(s1))){\r\nvar G__31369 = s2;\r\nvar G__31370 = s1;\r\ns1 = G__31369;\r\ns2 = G__31370;\r\ncontinue;\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\r\nreturn (function (result,item){\r\nif(cljs.core.contains_QMARK_(s2,item)){\r\nreturn result;\r\n} else {\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\r\n}\r\n});})(s1,s2))\r\n,s1,s1);\r\n}\r\nbreak;\r\n}\r\n}));\r\n\r\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__31304_SHARP_){\r\nreturn (- cljs.core.count(p1__31304_SHARP_));\r\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\r\n}));\r\n\r\n/** @this {Function} */\r\n(clojure.set.intersection.cljs$lang$applyTo = (function (seq31306){\r\nvar G__31307 = cljs.core.first(seq31306);\r\nvar seq31306__$1 = cljs.core.next(seq31306);\r\nvar G__31308 = cljs.core.first(seq31306__$1);\r\nvar seq31306__$2 = cljs.core.next(seq31306__$1);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__31307,G__31308,seq31306__$2);\r\n}));\r\n\r\n(clojure.set.intersection.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Return a set that is the first set without elements of the remaining sets\r\n */\r\nclojure.set.difference = (function clojure$set$difference(var_args){\r\nvar G__31319 = arguments.length;\r\nswitch (G__31319) {\r\ncase 1:\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__5794__auto__ = [];\r\nvar len__5769__auto___31402 = arguments.length;\r\nvar i__5770__auto___31415 = (0);\r\nwhile(true){\r\nif((i__5770__auto___31415 < len__5769__auto___31402)){\r\nargs_arr__5794__auto__.push((arguments[i__5770__auto___31415]));\r\n\r\nvar G__31416 = (i__5770__auto___31415 + (1));\r\ni__5770__auto___31415 = G__31416;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\r\n\r\n}\r\n});\r\n\r\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n}));\r\n\r\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nif((cljs.core.count(s1) < cljs.core.count(s2))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\r\nif(cljs.core.contains_QMARK_(s2,item)){\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\r\n} else {\r\nreturn result;\r\n}\r\n}),s1,s1);\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\r\n}\r\n}));\r\n\r\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\r\n}));\r\n\r\n/** @this {Function} */\r\n(clojure.set.difference.cljs$lang$applyTo = (function (seq31316){\r\nvar G__31317 = cljs.core.first(seq31316);\r\nvar seq31316__$1 = cljs.core.next(seq31316);\r\nvar G__31318 = cljs.core.first(seq31316__$1);\r\nvar seq31316__$2 = cljs.core.next(seq31316__$1);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__31317,G__31318,seq31316__$2);\r\n}));\r\n\r\n(clojure.set.difference.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Returns a set of the elements for which pred is true\r\n */\r\nclojure.set.select = (function clojure$set$select(pred,xset){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\r\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\r\nreturn s;\r\n} else {\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\r\n}\r\n}),xset,xset);\r\n});\r\n/**\r\n * Returns a rel of the elements of xrel with only the keys in ks\r\n */\r\nclojure.set.project = (function clojure$set$project(xrel,ks){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__31320_SHARP_){\r\nreturn cljs.core.select_keys(p1__31320_SHARP_,ks);\r\n}),xrel));\r\n});\r\n/**\r\n * Returns the map with the keys in kmap renamed to the vals in kmap\r\n */\r\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__31324){\r\nvar vec__31325 = p__31324;\r\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31325,(0),null);\r\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31325,(1),null);\r\nif(cljs.core.contains_QMARK_(map,old)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\r\n} else {\r\nreturn m;\r\n}\r\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\r\n});\r\n/**\r\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\r\n */\r\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__31329_SHARP_){\r\nreturn clojure.set.rename_keys(p1__31329_SHARP_,kmap);\r\n}),xrel));\r\n});\r\n/**\r\n * Returns a map of the distinct values of ks in the xrel mapped to a\r\n *   set of the maps in xrel with the corresponding values of ks.\r\n */\r\nclojure.set.index = (function clojure$set$index(xrel,ks){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\r\nvar ik = cljs.core.select_keys(x,ks);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\r\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\r\n});\r\n/**\r\n * Returns the map with the vals mapped to the keys.\r\n */\r\nclojure.set.map_invert = (function clojure$set$map_invert(m){\r\nreturn cljs.core.persistent_BANG_(cljs.core.reduce_kv((function (m__$1,k,v){\r\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\r\n}),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),m));\r\n});\r\n/**\r\n * When passed 2 rels, returns the rel corresponding to the natural\r\n *   join. When passed an additional keymap, joins on the corresponding\r\n *   keys.\r\n */\r\nclojure.set.join = (function clojure$set$join(var_args){\r\nvar G__31337 = arguments.length;\r\nswitch (G__31337) {\r\ncase 2:\r\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(clojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\r\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\r\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\r\nvar vec__31340 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31340,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31340,(1),null);\r\nvar idx = clojure.set.index(r,ks);\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\r\nvar found = (function (){var G__31343 = cljs.core.select_keys(x,ks);\r\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__31343) : idx.call(null,G__31343));\r\n})();\r\nif(cljs.core.truth_(found)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__31332_SHARP_,p2__31333_SHARP_){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__31332_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__31333_SHARP_,x], 0)));\r\n}),ret,found);\r\n} else {\r\nreturn ret;\r\n}\r\n}),cljs.core.PersistentHashSet.EMPTY,s);\r\n} else {\r\nreturn cljs.core.PersistentHashSet.EMPTY;\r\n}\r\n}));\r\n\r\n(clojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\r\nvar vec__31344 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31344,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31344,(1),null);\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31344,(2),null);\r\nvar idx = clojure.set.index(r,cljs.core.vals(k));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\r\nvar found = (function (){var G__31348 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\r\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__31348) : idx.call(null,G__31348));\r\n})();\r\nif(cljs.core.truth_(found)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__31334_SHARP_,p2__31335_SHARP_){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__31334_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__31335_SHARP_,x], 0)));\r\n}),ret,found);\r\n} else {\r\nreturn ret;\r\n}\r\n}),cljs.core.PersistentHashSet.EMPTY,s);\r\n}));\r\n\r\n(clojure.set.join.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Is set1 a subset of set2?\r\n */\r\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\r\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__31349_SHARP_){\r\nreturn cljs.core.contains_QMARK_(set2,p1__31349_SHARP_);\r\n}),set1)));\r\n});\r\n/**\r\n * Is set1 a superset of set2?\r\n */\r\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\r\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__31351_SHARP_){\r\nreturn cljs.core.contains_QMARK_(set1,p1__31351_SHARP_);\r\n}),set2)));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","^E","^E","~$goog","^P"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^E","^E"],"~:form",["~#list",["~$ns","^J"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^P","^E"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1703447415946,"^K",["^ ","^E","^E","^P","^P"],"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m]\n  (persistent!\n    (reduce-kv (fn [m k v] (assoc! m v k))\n      (transient {})\n      m)))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply","cljs.core/max-key","cljs.core/cons","p1__31294#","cljs.core.remove","var_args","G__31300","clojure.set/union","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq31297","G__31298","cljs.core/first","cljs.core/next","G__31299","self__5754__auto__","s1","s2","cljs.core/count","cljs.core.reduce","cljs.core/conj","sets","bubbled-sets","cljs.core.conj","cljs.core/into","cljs.core/rest","G__31309","clojure.set/intersection","seq31306","G__31307","G__31308","result","item","cljs.core/contains?","cljs.core.disj","p1__31304#","G__31319","clojure.set/difference","seq31316","G__31317","G__31318","cljs.core/disj","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__31320#","cljs.core.map","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__31324","vec__31325","cljs.core.nth","m","old","new","cljs.core.assoc","cljs.core.get","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__31329#","clojure.set/index","x","ik","clojure.set/map-invert","cljs.core/persistent!","cljs.core/reduce-kv","v","cljs.core.assoc_BANG_","cljs.core/transient","G__31337","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__31340","clojure.set.intersection","r","idx","ret","found","G__31343","p1__31332#","p2__31333#","cljs.core.merge","km","vec__31344","cljs.core/vals","G__31348","p1__31334#","p2__31335#","clojure.set/subset?","set1","set2","p1__31349#","cljs.core/every?","clojure.set/superset?","p1__31351#"]],"~:used-vars",["^H",["~$cljs.core/rest","~$clojure.set/intersection","~$clojure.set/project","~$clojure.set/index","~$cljs.core/keys","~$clojure.set/bubble-max-key","~$cljs.core/IndexedSeq","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/dissoc","~$cljs.core/max-key","~$cljs.core/set","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$clojure.set/rename-keys","~$cljs.core/vals","~$cljs.core/get","~$cljs.core/remove","~$clojure.set/difference","~$clojure.set/superset?","~$cljs.core/persistent!","~$cljs.core/nth","~$clojure.set/subset?","~$cljs.core/next","~$cljs.core/select-keys","~$cljs.core/transient","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$clojure.set/union","~$cljs.core/reduce-kv","~$clojure.set/rename","~$clojure.set/map-invert","~$cljs.core/first","~$cljs.core/assoc!","~$clojure.set/join","~$cljs.core/merge","~$cljs.core/every?","~$clojure.set/select","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^[","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^P","~$goog.dom.HtmlElement"]]],["^[","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^[","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2E"]]],["^[","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D"]]],["^[","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2B","^2E"]]],["^[","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D"]]],"~:SHADOW-TIMESTAMP",[1703446907000,1703446907000,1701588412000],["^[","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","~$goog.reflect"]]],["^[","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","~$goog.fs.blob","^2H","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2J","^2K"]]],["^[","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2J","~$goog.html.SafeUrl","^2K","^2D","^2E"]]],["^[","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2O","~$goog.html.SafeStyle","^2Q","^2I","~$goog.html.uncheckedconversions","^2J","^2E"]]],["^[","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","~$goog.dom.TagName","^2D","~$goog.dom.element"]]],["^[","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2J","^2O","^2V","~$goog.html.SafeStyleSheet","^2Q","^2X","^2I","^2K","^2D","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2E","~$goog.dom.tags","^2P"]]],["^[","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^31"]]],["^[","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^30","^2D","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2C"]]],["^[","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",[]]],["^[","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^30","^31"]]],["^[","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","~$goog.dom.safe","^2W","^2J","^2E"]]],["^[","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2E","^2G"]]],["^[","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","~$goog.flags"]]],["^[","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^34","^2X"]]],["^[","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","^2U","^2O","^2V","^2Z","^2Q","^2I","^2J","^2E"]]],["^[","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P"]]],["^[","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","~$goog.math.Long","~$goog.math.Integer","^36","^31","^30","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2J","^2K","^2P","^2D"]]],["^[","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2J","^2V","^2K","^31","^2D","^2E"]]],["^[","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2M"]]],["^[","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^E"]]],["^[","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","^36"]]],["^[","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2=",["^ ","^2>",null,"^2?",["^H",[]],"^2@",["^P","^2D","^2K"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1700591986000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^E","^E","^P","^P"],"^Q",["^H",[]],"~:shadow/js-access-global",["^H",["Error"]],"^R",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^U",["~$quote",["^U",[[],["~$s1"],["^4:","~$s2"],["^4:","^4;","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^4:"],["^4:","^4;"]],"^48",["^U",[[],["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"~:arglists-meta",["^U",[null,null,null,null]]]],"^I","^20","^6","clojure/set.cljs","^:",12,"^4=",["^ ","^4>",true,"^4?",2,"^4@",2,"^4A",[[],["^4:"],["^4:","^4;"]],"^48",["^U",[[],["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^4B",["^U",[null,null,null,null]]],"^4A",[[],["^4:"],["^4:","^4;"]],"~:protocol-impl",null,"^4?",2,"^4B",["^U",[null,null,null,null]],"^8",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^U",["~$defn","^46","Return a set that is the union of the input sets",["^U",[[],["^H",[]]]],["^U",[["^4:"],"^4:"]],["^U",[["^4:","^4;"],["^U",["~$if",["^U",["~$<",["^U",["~$count","^4:"]],["^U",["^4J","^4;"]]]],["^U",["~$reduce","~$conj","^4;","^4:"]],["^U",["^4K","^4L","^4:","^4;"]]]]]],["^U",[["^4:","^4;","~$&","^4<"],["^U",["~$let",["~$bubbled-sets",["^U",["~$bubble-max-key","^4J",["^U",["^4L","^4<","^4;","^4:"]]]]],["^U",["^4K","~$into",["^U",["~$first","^4N"]],["^U",["~$rest","^4N"]]]]]]]]]]],"^4>",true,"~:methods",[["^ ","^4?",0,"^4>",false,"~:tag","~$cljs.core/ISet"],["^ ","^4?",1,"^4>",false],["^ ","^4?",2,"^4>",false,"^4T",["^H",[null,"~$any"]]],["^ ","^4?",2,"^4>",true,"^4T",["^H",[null,"^4V"]]]],"^7",19,"^9",19,"^4@",2,"~:fn-var",true,"^48",["^U",[[],["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^48",["^U",["^49",["^U",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^I","^23","^6","clojure/set.cljs","^:",17,"^4A",["^U",[["~$m"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^4X","Returns the map with the vals mapped to the keys.",["~$m"],["^U",["~$persistent!",["^U",["~$reduce-kv",["^U",["~$fn",["~$m","~$k","~$v"],["^U",["~$assoc!","~$m","~$v","~$k"]]]],["^U",["~$transient",["^ "]]],"~$m"]]]]]]],"^4>",false,"^7",97,"~:ret-tag","~$clj","^9",97,"^4@",1,"^4W",true,"^48",["^U",["^49",["^U",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",105,"^8",7,"^9",105,"^:",11,"^48",["^U",["^49",["^U",[["~$xrel","~$yrel"],["^55","^56","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^4=",["^ ","^4>",false,"^4?",3,"^4@",3,"^4A",[["^55","^56"],["^55","^56","^57"]],"^48",["^U",[["^55","^56"],["^55","^56","^57"]]],"^4B",["^U",[null,null]]]],"^I","^26","^6","clojure/set.cljs","^:",11,"^4=",["^ ","^4>",false,"^4?",3,"^4@",3,"^4A",[["^55","^56"],["^55","^56","^57"]],"^48",["^U",[["^55","^56"],["^55","^56","^57"]]],"^4B",["^U",[null,null]]],"^4A",[["^55","^56"],["^55","^56","^57"]],"^4C",null,"^4?",3,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^54","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.",["^U",[["^55","^56"],["^U",["^4I",["^U",["~$and",["^U",["~$seq","^55"]],["^U",["^59","^56"]]]],["^U",["^4M",["~$ks",["^U",["~$intersection",["^U",["~$set",["^U",["~$keys",["^U",["^4Q","^55"]]]]]],["^U",["^5<",["^U",["^5=",["^U",["^4Q","^56"]]]]]]]],["~$r","~$s"],["^U",["^4I",["^U",["~$<=",["^U",["^4J","^55"]],["^U",["^4J","^56"]]]],["^55","^56"],["^56","^55"]]],"~$idx",["^U",["~$index","~$r","^5:"]]],["^U",["^4K",["^U",["^4[",["~$ret","~$x"],["^U",["^4M",["~$found",["^U",["^5?",["^U",["~$select-keys","~$x","^5:"]]]]],["^U",["^4I","^5B",["^U",["^4K",["^U",["~$fn*",["~$p1__31332#","~$p2__31333#"],["^U",["^4L","^5E",["^U",["~$merge","^5F","~$x"]]]]]],"^5A","^5B"]],"^5A"]]]]]],["^H",[]],"~$s"]]]],["^H",[]]]]]],["^U",[["^55","^56","^57"],["^U",["^4M",[["~$r","~$s","~$k"],["^U",["^4I",["^U",["^5>",["^U",["^4J","^55"]],["^U",["^4J","^56"]]]],["^55","^56",["^U",["^4X","^57"]]],["^56","^55","^57"]]],"^5?",["^U",["^5@","~$r",["^U",["~$vals","~$k"]]]]],["^U",["^4K",["^U",["^4[",["^5A","~$x"],["^U",["^4M",["^5B",["^U",["^5?",["^U",["~$rename-keys",["^U",["^5C","~$x",["^U",["^5=","~$k"]]]],"~$k"]]]]],["^U",["^4I","^5B",["^U",["^4K",["^U",["^5D",["~$p1__31334#","~$p2__31335#"],["^U",["^4L","^5J",["^U",["^5G","^5K","~$x"]]]]]],"^5A","^5B"]],"^5A"]]]]]],["^H",[]],"~$s"]]]]]]]]],"^4>",false,"^4S",[["^ ","^4?",2,"^4>",false,"^4T",["^H",[null,"^4V","^4U"]]],["^ ","^4?",3,"^4>",false,"^4T",["^H",[null,"^4V"]]]],"^7",105,"^9",105,"^4@",3,"^4W",true,"^48",["^U",[["^55","^56"],["^55","^56","^57"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^48",["^U",["^49",["^U",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^I","^29","^6","clojure/set.cljs","^:",13,"^4A",["^U",[["^5M","^5N"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^5L","Returns a set of the elements for which pred is true",["^5M","^5N"],["^U",["^4K",["^U",["^4[",["~$s","~$k"],["^U",["^4I",["^U",["^5M","~$k"]],"~$s",["^U",["~$disj","~$s","~$k"]]]]]],"^5N","^5N"]]]]],"^4>",false,"^7",61,"^52",["^H",[null,"^4V"]],"^9",61,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^5M","^5N"]]]]],"^;","Returns a set of the elements for which pred is true"],"^5;",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^48",["^U",["^49",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]]]],"^;","Return a set that is the intersection of the input sets","^4=",["^ ","^4>",true,"^4?",2,"^4@",2,"^4A",[["^4:"],["^4:","^4;"]],"^48",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^4B",["^U",[null,null,null]]]],"^I","^1<","^6","clojure/set.cljs","^:",19,"^4=",["^ ","^4>",true,"^4?",2,"^4@",2,"^4A",[["^4:"],["^4:","^4;"]],"^48",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^4B",["^U",[null,null,null]]],"^4A",[["^4:"],["^4:","^4;"]],"^4C",null,"^4?",2,"^4B",["^U",[null,null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^5;","Return a set that is the intersection of the input sets",["^U",[["^4:"],"^4:"]],["^U",[["^4:","^4;"],["^U",["^4I",["^U",["~$<",["^U",["^4J","^4;"]],["^U",["^4J","^4:"]]]],["^U",["~$recur","^4;","^4:"]],["^U",["^4K",["^U",["^4[",["~$result","~$item"],["^U",["^4I",["^U",["~$contains?","^4;","^5R"]],"^5Q",["^U",["^5O","^5Q","^5R"]]]]]],"^4:","^4:"]]]]]],["^U",[["^4:","^4;","~$&","^4<"],["^U",["^4M",["^4N",["^U",["^4O",["^U",["^5D",["~$p1__31304#"],["^U",["~$-",["^U",["^4J","^5T"]]]]]],["^U",["^4L","^4<","^4;","^4:"]]]]],["^U",["^4K","^5;",["^U",["^4Q","^4N"]],["^U",["^4R","^4N"]]]]]]]]]]],"^4>",true,"^4S",[["^ ","^4?",1,"^4>",false],["^ ","^4?",2,"^4>",false,"^4T",["^H",[null,"^4V"]]],["^ ","^4?",2,"^4>",true,"^4T",["^H",[null,"^4V"]]]],"^7",31,"^9",31,"^4@",2,"^4W",true,"^48",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",141,"^8",7,"^9",141,"^:",16,"^48",["^U",["^49",["^U",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^I","^1R","^6","clojure/set.cljs","^:",16,"^4A",["^U",[["^5V","^5W"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^5U","Is set1 a superset of set2?",["^5V","^5W"],["^U",["^58",["^U",["~$>=",["^U",["^4J","^5V"]],["^U",["^4J","^5W"]]]],["^U",["~$every?",["^U",["^5D",["~$p1__31351#"],["^U",["^5S","^5V","^5Z"]]]],"^5W"]]]]]]],"^4>",false,"^7",141,"^52","~$boolean","^9",141,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^5V","^5W"]]]]],"^;","Is set1 a superset of set2?"],"^5@",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^48",["^U",["^49",["^U",[["^55","^5:"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^I","^1>","^6","clojure/set.cljs","^:",12,"^4A",["^U",[["^55","^5:"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^5@","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.",["^55","^5:"],["^U",["^4K",["^U",["^4[",["~$m","~$x"],["^U",["^4M",["~$ik",["^U",["^5C","~$x","^5:"]]],["^U",["~$assoc","~$m","^60",["^U",["^4L",["^U",["~$get","~$m","^60",["^H",[]]]],"~$x"]]]]]]]],["^ "],"^55"]]]]],"^4>",false,"^7",87,"^52",["^H",[null,"^4V"]],"^9",87,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^55","^5:"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^4O",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^48",["^U",["^49",["^U",[["~$k","~$coll"]]]]]],"^63",true,"^I","^1@","^6","clojure/set.cljs","^:",22,"^4A",["^U",[["~$k","^64"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["~$defn-","^4O",["~$k","^64"],"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.",["^U",["^4M",["~$max",["^U",["~$apply","~$max-key","~$k","^64"]]],["^U",["~$cons","^66",["^U",["~$remove",["^U",["^5D",["~$p1__31294#"],["^U",["~$identical?","^66","^6;"]]]],"^64"]]]]]]]]],"^4>",false,"^7",13,"^52","^53","^9",13,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["~$k","^64"]]]]]],"~$subset?",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",135,"^8",7,"^9",135,"^:",14,"^48",["^U",["^49",["^U",[["^5V","^5W"]]]]],"^;","Is set1 a subset of set2?"],"^I","^1U","^6","clojure/set.cljs","^:",14,"^4A",["^U",[["^5V","^5W"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^6=","Is set1 a subset of set2?",["^5V","^5W"],["^U",["^58",["^U",["^5>",["^U",["^4J","^5V"]],["^U",["^4J","^5W"]]]],["^U",["^5Y",["^U",["^5D",["~$p1__31349#"],["^U",["^5S","^5W","^6>"]]]],"^5V"]]]]]]],"^4>",false,"^7",135,"^52","^5[","^9",135,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^5V","^5W"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^48",["^U",["^49",["^U",[["^55","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^I","^22","^6","clojure/set.cljs","^:",13,"^4A",["^U",[["^55","^6@"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^6?","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap",["^55","^6@"],["^U",["^5<",["^U",["~$map",["^U",["^5D",["~$p1__31329#"],["^U",["^5I","^6B","^6@"]]]],"^55"]]]]]]],"^4>",false,"^7",82,"^52",["^H",["^53","^4V","^4U","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^55","^6@"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^5I",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^48",["^U",["^49",["^U",[["^6A","^6@"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^I","^1M","^6","clojure/set.cljs","^:",18,"^4A",["^U",[["^6A","^6@"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^5I","Returns the map with the keys in kmap renamed to the vals in kmap",["^6A","^6@"],["^U",["^4K",["^U",["^4[",["~$m",["~$old","~$new"]],["^U",["^4I",["^U",["^5S","^6A","^6E"]],["^U",["^61","~$m","^6F",["^U",["^62","^6A","^6E"]]]],"~$m"]]]],["^U",["^67","~$dissoc","^6A",["^U",["^5=","^6@"]]]],"^6@"]]]]],"^4>",false,"^7",72,"^52",["^H",[null,"^4V"]],"^9",72,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^6A","^6@"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^48",["^U",["^49",["^U",[["^55","^5:"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^I","^1=","^6","clojure/set.cljs","^:",14,"^4A",["^U",[["^55","^5:"]]],"^4C",null,"^4B",["^U",[null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^6H","Returns a rel of the elements of xrel with only the keys in ks",["^55","^5:"],["^U",["^5<",["^U",["^6A",["^U",["^5D",["~$p1__31320#"],["^U",["^5C","^6I","^5:"]]]],"^55"]]]]]]],"^4>",false,"^7",67,"^52",["^H",["^53","^4V","^4U","^6C","^6D"]],"^9",67,"^4@",2,"^4W",true,"^48",["^U",["^49",["^U",[["^55","^5:"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^47",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^48",["^U",["^49",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^4=",["^ ","^4>",true,"^4?",2,"^4@",2,"^4A",[["^4:"],["^4:","^4;"]],"^48",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^4B",["^U",[null,null,null]]]],"^I","^1Q","^6","clojure/set.cljs","^:",17,"^4=",["^ ","^4>",true,"^4?",2,"^4@",2,"^4A",[["^4:"],["^4:","^4;"]],"^48",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^4B",["^U",[null,null,null]]],"^4A",[["^4:"],["^4:","^4;"]],"^4C",null,"^4?",2,"^4B",["^U",[null,null,null]],"^8",1,"^4D",["^ ","^4E","^4F","^4G",["^U",["^4H","^6J","Return a set that is the first set without elements of the remaining sets",["^U",[["^4:"],"^4:"]],["^U",[["^4:","^4;"],["^U",["^4I",["^U",["~$<",["^U",["^4J","^4:"]],["^U",["^4J","^4;"]]]],["^U",["^4K",["^U",["^4[",["^5Q","^5R"],["^U",["^4I",["^U",["^5S","^4;","^5R"]],["^U",["^5O","^5Q","^5R"]],"^5Q"]]]],"^4:","^4:"]],["^U",["^4K","^5O","^4:","^4;"]]]]]],["^U",[["^4:","^4;","~$&","^4<"],["^U",["^4K","^6J","^4:",["^U",["^4L","^4<","^4;"]]]]]]]]],"^4>",true,"^4S",[["^ ","^4?",1,"^4>",false],["^ ","^4?",2,"^4>",false,"^4T",["^H",[null,"^4V"]]],["^ ","^4?",2,"^4>",true,"^4T",["^H",[null,"^4V"]]]],"^7",46,"^9",46,"^4@",2,"^4W",true,"^48",["^U",[["^4:"],["^4:","^4;"],["^4:","^4;","~$&","^4<"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^S",["^ ","^E","^E"],"^W",["^ "],"^X",["^ "],"^Y",["^P","^E"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2<",[["^6M","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^6M","~:shadow-tweaks"],null,["^6M","~:source-map-inline"],null,["^6M","~:elide-asserts"],false,["^6M","~:optimize-constants"],null,["^6M","^12"],null,["^6M","~:external-config"],null,["^6M","~:tooling-config"],null,["^6M","~:emit-constants"],null,["^6M","~:load-tests"],null,["^6M","~:form-size-threshold"],null,["^6M","~:global-goog-object&array"],null,["^6M","~:data-readers"],null,["^6M","~:infer-externs"],"~:auto",["^6M","^14"],null,["^6O","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6M","~:fn-invoke-direct"],null,["^6M","~:source-map"],"/dev/null"]]]