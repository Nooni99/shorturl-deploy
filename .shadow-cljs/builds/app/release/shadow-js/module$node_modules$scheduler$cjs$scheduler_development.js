["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/scheduler/cjs/scheduler.development.js"],"~:js","shadow$provide[7]=function(da,X,pa,x){}","~:source","shadow$provide[7] = function(global,require,module,exports) {\n/**\r\n * @license React\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n\r\n          'use strict';\r\n\r\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\r\nif (\r\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\r\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\r\n    'function'\r\n) {\r\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\r\n}\r\n          var enableSchedulerDebugging = false;\r\nvar enableProfiling = false;\r\nvar frameYieldMs = 5;\r\n\r\nfunction push(heap, node) {\r\n  var index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\nfunction peek(heap) {\r\n  return heap.length === 0 ? null : heap[0];\r\n}\r\nfunction pop(heap) {\r\n  if (heap.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  var first = heap[0];\r\n  var last = heap.pop();\r\n\r\n  if (last !== first) {\r\n    heap[0] = last;\r\n    siftDown(heap, last, 0);\r\n  }\r\n\r\n  return first;\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  var index = i;\r\n\r\n  while (index > 0) {\r\n    var parentIndex = index - 1 >>> 1;\r\n    var parent = heap[parentIndex];\r\n\r\n    if (compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  var index = i;\r\n  var length = heap.length;\r\n  var halfLength = length >>> 1;\r\n\r\n  while (index < halfLength) {\r\n    var leftIndex = (index + 1) * 2 - 1;\r\n    var left = heap[leftIndex];\r\n    var rightIndex = leftIndex + 1;\r\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\r\n\r\n    if (compare(left, node) < 0) {\r\n      if (rightIndex < length && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (rightIndex < length && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  var diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n\r\n// TODO: Use symbols?\r\nvar ImmediatePriority = 1;\r\nvar UserBlockingPriority = 2;\r\nvar NormalPriority = 3;\r\nvar LowPriority = 4;\r\nvar IdlePriority = 5;\r\n\r\nfunction markTaskErrored(task, ms) {\r\n}\r\n\r\n/* eslint-disable no-var */\r\n\r\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nif (hasPerformanceNow) {\r\n  var localPerformance = performance;\r\n\r\n  exports.unstable_now = function () {\r\n    return localPerformance.now();\r\n  };\r\n} else {\r\n  var localDate = Date;\r\n  var initialTime = localDate.now();\r\n\r\n  exports.unstable_now = function () {\r\n    return localDate.now() - initialTime;\r\n  };\r\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\n\r\n\r\nvar maxSigned31BitInt = 1073741823; // Times out immediately\r\n\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\r\n\r\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\r\n\r\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\r\n\r\nvar taskQueue = [];\r\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\r\n\r\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\r\nvar currentTask = null;\r\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\r\n\r\nvar isPerformingWork = false;\r\nvar isHostCallbackScheduled = false;\r\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\r\n\r\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\r\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\r\nvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\r\n\r\nvar isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  var timer = peek(timerQueue);\r\n\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      var firstTimer = peek(timerQueue);\r\n\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n\r\n\r\n  isHostCallbackScheduled = false;\r\n\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n\r\n  try {\r\n    if (enableProfiling) {\r\n      try {\r\n        return workLoop(hasTimeRemaining, initialTime);\r\n      } catch (error) {\r\n        if (currentTask !== null) {\r\n          var currentTime = exports.unstable_now();\r\n          markTaskErrored(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n\r\n        throw error;\r\n      }\r\n    } else {\r\n      // No catch in prod code path.\r\n      return workLoop(hasTimeRemaining, initialTime);\r\n    }\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  var currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n\r\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\r\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n\r\n    var callback = currentTask.callback;\r\n\r\n    if (typeof callback === 'function') {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n\r\n      var continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = exports.unstable_now();\r\n\r\n      if (typeof continuationCallback === 'function') {\r\n        currentTask.callback = continuationCallback;\r\n      } else {\r\n\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n      }\r\n\r\n      advanceTimers(currentTime);\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n\r\n    currentTask = peek(taskQueue);\r\n  } // Return whether there's additional work\r\n\r\n\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    var firstTimer = peek(timerQueue);\r\n\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case LowPriority:\r\n    case IdlePriority:\r\n      break;\r\n\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_next(eventHandler) {\r\n  var priorityLevel;\r\n\r\n  switch (currentPriorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = NormalPriority;\r\n      break;\r\n\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function () {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\r\n  var currentTime = exports.unstable_now();\r\n  var startTime;\r\n\r\n  if (typeof options === 'object' && options !== null) {\r\n    var delay = options.delay;\r\n\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n  } else {\r\n    startTime = currentTime;\r\n  }\r\n\r\n  var timeout;\r\n\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\r\n      break;\r\n\r\n    case UserBlockingPriority:\r\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\r\n      break;\r\n\r\n    case IdlePriority:\r\n      timeout = IDLE_PRIORITY_TIMEOUT;\r\n      break;\r\n\r\n    case LowPriority:\r\n      timeout = LOW_PRIORITY_TIMEOUT;\r\n      break;\r\n\r\n    case NormalPriority:\r\n    default:\r\n      timeout = NORMAL_PRIORITY_TIMEOUT;\r\n      break;\r\n  }\r\n\r\n  var expirationTime = startTime + timeout;\r\n  var newTask = {\r\n    id: taskIdCounter++,\r\n    callback: callback,\r\n    priorityLevel: priorityLevel,\r\n    startTime: startTime,\r\n    expirationTime: expirationTime,\r\n    sortIndex: -1\r\n  };\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      } // Schedule a timeout.\r\n\r\n\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n    // wait until the next time we yield.\r\n\r\n\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction unstable_pauseExecution() {\r\n}\r\n\r\nfunction unstable_continueExecution() {\r\n\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction unstable_getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction unstable_cancelCallback(task) {\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n\r\n\r\n  task.callback = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nvar isMessageLoopRunning = false;\r\nvar scheduledHostCallback = null;\r\nvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\r\n// thread, like user events. By default, it yields multiple times per frame.\r\n// It does not attempt to align with frame boundaries, since most tasks don't\r\n// need to be frame aligned; for those that do, use requestAnimationFrame.\r\n\r\nvar frameInterval = frameYieldMs;\r\nvar startTime = -1;\r\n\r\nfunction shouldYieldToHost() {\r\n  var timeElapsed = exports.unstable_now() - startTime;\r\n\r\n  if (timeElapsed < frameInterval) {\r\n    // The main thread has only been blocked for a really short amount of time;\r\n    // smaller than a single frame. Don't yield yet.\r\n    return false;\r\n  } // The main thread has been blocked for a non-negligible amount of time. We\r\n\r\n\r\n  return true;\r\n}\r\n\r\nfunction requestPaint() {\r\n\r\n}\r\n\r\nfunction forceFrameRate(fps) {\r\n  if (fps < 0 || fps > 125) {\r\n    // Using console['error'] to evade Babel and ESLint\r\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\r\n    return;\r\n  }\r\n\r\n  if (fps > 0) {\r\n    frameInterval = Math.floor(1000 / fps);\r\n  } else {\r\n    // reset the framerate\r\n    frameInterval = frameYieldMs;\r\n  }\r\n}\r\n\r\nvar performWorkUntilDeadline = function () {\r\n  if (scheduledHostCallback !== null) {\r\n    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\r\n    // has been blocked.\r\n\r\n    startTime = currentTime;\r\n    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\r\n    // error can be observed.\r\n    //\r\n    // Intentionally not using a try-catch, since that makes some debugging\r\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\r\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\r\n\r\n    var hasMoreWork = true;\r\n\r\n    try {\r\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n    } finally {\r\n      if (hasMoreWork) {\r\n        // If there's more work, schedule the next message event at the end\r\n        // of the preceding one.\r\n        schedulePerformWorkUntilDeadline();\r\n      } else {\r\n        isMessageLoopRunning = false;\r\n        scheduledHostCallback = null;\r\n      }\r\n    }\r\n  } else {\r\n    isMessageLoopRunning = false;\r\n  } // Yielding to the browser will give it a chance to paint, so we can\r\n};\r\n\r\nvar schedulePerformWorkUntilDeadline;\r\n\r\nif (typeof localSetImmediate === 'function') {\r\n  // Node.js and old IE.\r\n  // There's a few reasons for why we prefer setImmediate.\r\n  //\r\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\r\n  // (Even though this is a DOM fork of the Scheduler, you could get here\r\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\r\n  // https://github.com/facebook/react/issues/20756\r\n  //\r\n  // But also, it runs earlier which is the semantic we want.\r\n  // If other browsers ever implement it, it's better to use it.\r\n  // Although both of these would be inferior to native scheduling.\r\n  schedulePerformWorkUntilDeadline = function () {\r\n    localSetImmediate(performWorkUntilDeadline);\r\n  };\r\n} else if (typeof MessageChannel !== 'undefined') {\r\n  // DOM and Worker environments.\r\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\r\n  var channel = new MessageChannel();\r\n  var port = channel.port2;\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n\r\n  schedulePerformWorkUntilDeadline = function () {\r\n    port.postMessage(null);\r\n  };\r\n} else {\r\n  // We should only fallback here in non-browser environments.\r\n  schedulePerformWorkUntilDeadline = function () {\r\n    localSetTimeout(performWorkUntilDeadline, 0);\r\n  };\r\n}\r\n\r\nfunction requestHostCallback(callback) {\r\n  scheduledHostCallback = callback;\r\n\r\n  if (!isMessageLoopRunning) {\r\n    isMessageLoopRunning = true;\r\n    schedulePerformWorkUntilDeadline();\r\n  }\r\n}\r\n\r\nfunction requestHostTimeout(callback, ms) {\r\n  taskTimeoutID = localSetTimeout(function () {\r\n    callback(exports.unstable_now());\r\n  }, ms);\r\n}\r\n\r\nfunction cancelHostTimeout() {\r\n  localClearTimeout(taskTimeoutID);\r\n  taskTimeoutID = -1;\r\n}\r\n\r\nvar unstable_requestPaint = requestPaint;\r\nvar unstable_Profiling =  null;\r\n\r\nexports.unstable_IdlePriority = IdlePriority;\r\nexports.unstable_ImmediatePriority = ImmediatePriority;\r\nexports.unstable_LowPriority = LowPriority;\r\nexports.unstable_NormalPriority = NormalPriority;\r\nexports.unstable_Profiling = unstable_Profiling;\r\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\r\nexports.unstable_cancelCallback = unstable_cancelCallback;\r\nexports.unstable_continueExecution = unstable_continueExecution;\r\nexports.unstable_forceFrameRate = forceFrameRate;\r\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\r\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\r\nexports.unstable_next = unstable_next;\r\nexports.unstable_pauseExecution = unstable_pauseExecution;\r\nexports.unstable_requestPaint = unstable_requestPaint;\r\nexports.unstable_runWithPriority = unstable_runWithPriority;\r\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\r\nexports.unstable_shouldYield = shouldYieldToHost;\r\nexports.unstable_wrapCallback = unstable_wrapCallback;\r\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\r\nif (\r\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\r\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\r\n    'function'\r\n) {\r\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\r\n}\r\n        \r\n  })();\r\n}\r\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1703447043748,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$scheduler$cjs$scheduler_development.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,CAAf,CAAA,CAAoB,QAAQ,CAACC,EAAD,CAAQC,CAAR,CAAgBC,EAAhB,CAAuBC,CAAvB,CAAgC;\",\n\"sources\":[\"node_modules/scheduler/cjs/scheduler.development.js\"],\n\"sourcesContent\":[\"shadow$provide[7] = function(global,require,module,exports) {\\n/**\\r\\n * @license React\\r\\n * scheduler.development.js\\r\\n *\\r\\n * Copyright (c) Facebook, Inc. and its affiliates.\\r\\n *\\r\\n * This source code is licensed under the MIT license found in the\\r\\n * LICENSE file in the root directory of this source tree.\\r\\n */\\r\\n\\r\\n'use strict';\\r\\n\\r\\nif (process.env.NODE_ENV !== \\\"production\\\") {\\r\\n  (function() {\\r\\n\\r\\n          'use strict';\\r\\n\\r\\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\\r\\nif (\\r\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\\r\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\\r\\n    'function'\\r\\n) {\\r\\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\\r\\n}\\r\\n          var enableSchedulerDebugging = false;\\r\\nvar enableProfiling = false;\\r\\nvar frameYieldMs = 5;\\r\\n\\r\\nfunction push(heap, node) {\\r\\n  var index = heap.length;\\r\\n  heap.push(node);\\r\\n  siftUp(heap, node, index);\\r\\n}\\r\\nfunction peek(heap) {\\r\\n  return heap.length === 0 ? null : heap[0];\\r\\n}\\r\\nfunction pop(heap) {\\r\\n  if (heap.length === 0) {\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  var first = heap[0];\\r\\n  var last = heap.pop();\\r\\n\\r\\n  if (last !== first) {\\r\\n    heap[0] = last;\\r\\n    siftDown(heap, last, 0);\\r\\n  }\\r\\n\\r\\n  return first;\\r\\n}\\r\\n\\r\\nfunction siftUp(heap, node, i) {\\r\\n  var index = i;\\r\\n\\r\\n  while (index > 0) {\\r\\n    var parentIndex = index - 1 >>> 1;\\r\\n    var parent = heap[parentIndex];\\r\\n\\r\\n    if (compare(parent, node) > 0) {\\r\\n      // The parent is larger. Swap positions.\\r\\n      heap[parentIndex] = node;\\r\\n      heap[index] = parent;\\r\\n      index = parentIndex;\\r\\n    } else {\\r\\n      // The parent is smaller. Exit.\\r\\n      return;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction siftDown(heap, node, i) {\\r\\n  var index = i;\\r\\n  var length = heap.length;\\r\\n  var halfLength = length >>> 1;\\r\\n\\r\\n  while (index < halfLength) {\\r\\n    var leftIndex = (index + 1) * 2 - 1;\\r\\n    var left = heap[leftIndex];\\r\\n    var rightIndex = leftIndex + 1;\\r\\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\\r\\n\\r\\n    if (compare(left, node) < 0) {\\r\\n      if (rightIndex < length && compare(right, left) < 0) {\\r\\n        heap[index] = right;\\r\\n        heap[rightIndex] = node;\\r\\n        index = rightIndex;\\r\\n      } else {\\r\\n        heap[index] = left;\\r\\n        heap[leftIndex] = node;\\r\\n        index = leftIndex;\\r\\n      }\\r\\n    } else if (rightIndex < length && compare(right, node) < 0) {\\r\\n      heap[index] = right;\\r\\n      heap[rightIndex] = node;\\r\\n      index = rightIndex;\\r\\n    } else {\\r\\n      // Neither child is smaller. Exit.\\r\\n      return;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction compare(a, b) {\\r\\n  // Compare sort index first, then task id.\\r\\n  var diff = a.sortIndex - b.sortIndex;\\r\\n  return diff !== 0 ? diff : a.id - b.id;\\r\\n}\\r\\n\\r\\n// TODO: Use symbols?\\r\\nvar ImmediatePriority = 1;\\r\\nvar UserBlockingPriority = 2;\\r\\nvar NormalPriority = 3;\\r\\nvar LowPriority = 4;\\r\\nvar IdlePriority = 5;\\r\\n\\r\\nfunction markTaskErrored(task, ms) {\\r\\n}\\r\\n\\r\\n/* eslint-disable no-var */\\r\\n\\r\\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\\r\\n\\r\\nif (hasPerformanceNow) {\\r\\n  var localPerformance = performance;\\r\\n\\r\\n  exports.unstable_now = function () {\\r\\n    return localPerformance.now();\\r\\n  };\\r\\n} else {\\r\\n  var localDate = Date;\\r\\n  var initialTime = localDate.now();\\r\\n\\r\\n  exports.unstable_now = function () {\\r\\n    return localDate.now() - initialTime;\\r\\n  };\\r\\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\\r\\n// Math.pow(2, 30) - 1\\r\\n// 0b111111111111111111111111111111\\r\\n\\r\\n\\r\\nvar maxSigned31BitInt = 1073741823; // Times out immediately\\r\\n\\r\\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\\r\\n\\r\\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\\r\\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\\r\\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\\r\\n\\r\\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\\r\\n\\r\\nvar taskQueue = [];\\r\\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\\r\\n\\r\\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\\r\\nvar currentTask = null;\\r\\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\\r\\n\\r\\nvar isPerformingWork = false;\\r\\nvar isHostCallbackScheduled = false;\\r\\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\\r\\n\\r\\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\\r\\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\\r\\nvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\\r\\n\\r\\nvar isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\\r\\n\\r\\nfunction advanceTimers(currentTime) {\\r\\n  // Check for tasks that are no longer delayed and add them to the queue.\\r\\n  var timer = peek(timerQueue);\\r\\n\\r\\n  while (timer !== null) {\\r\\n    if (timer.callback === null) {\\r\\n      // Timer was cancelled.\\r\\n      pop(timerQueue);\\r\\n    } else if (timer.startTime <= currentTime) {\\r\\n      // Timer fired. Transfer to the task queue.\\r\\n      pop(timerQueue);\\r\\n      timer.sortIndex = timer.expirationTime;\\r\\n      push(taskQueue, timer);\\r\\n    } else {\\r\\n      // Remaining timers are pending.\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    timer = peek(timerQueue);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction handleTimeout(currentTime) {\\r\\n  isHostTimeoutScheduled = false;\\r\\n  advanceTimers(currentTime);\\r\\n\\r\\n  if (!isHostCallbackScheduled) {\\r\\n    if (peek(taskQueue) !== null) {\\r\\n      isHostCallbackScheduled = true;\\r\\n      requestHostCallback(flushWork);\\r\\n    } else {\\r\\n      var firstTimer = peek(timerQueue);\\r\\n\\r\\n      if (firstTimer !== null) {\\r\\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction flushWork(hasTimeRemaining, initialTime) {\\r\\n\\r\\n\\r\\n  isHostCallbackScheduled = false;\\r\\n\\r\\n  if (isHostTimeoutScheduled) {\\r\\n    // We scheduled a timeout but it's no longer needed. Cancel it.\\r\\n    isHostTimeoutScheduled = false;\\r\\n    cancelHostTimeout();\\r\\n  }\\r\\n\\r\\n  isPerformingWork = true;\\r\\n  var previousPriorityLevel = currentPriorityLevel;\\r\\n\\r\\n  try {\\r\\n    if (enableProfiling) {\\r\\n      try {\\r\\n        return workLoop(hasTimeRemaining, initialTime);\\r\\n      } catch (error) {\\r\\n        if (currentTask !== null) {\\r\\n          var currentTime = exports.unstable_now();\\r\\n          markTaskErrored(currentTask, currentTime);\\r\\n          currentTask.isQueued = false;\\r\\n        }\\r\\n\\r\\n        throw error;\\r\\n      }\\r\\n    } else {\\r\\n      // No catch in prod code path.\\r\\n      return workLoop(hasTimeRemaining, initialTime);\\r\\n    }\\r\\n  } finally {\\r\\n    currentTask = null;\\r\\n    currentPriorityLevel = previousPriorityLevel;\\r\\n    isPerformingWork = false;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction workLoop(hasTimeRemaining, initialTime) {\\r\\n  var currentTime = initialTime;\\r\\n  advanceTimers(currentTime);\\r\\n  currentTask = peek(taskQueue);\\r\\n\\r\\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\\r\\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\\r\\n      // This currentTask hasn't expired, and we've reached the deadline.\\r\\n      break;\\r\\n    }\\r\\n\\r\\n    var callback = currentTask.callback;\\r\\n\\r\\n    if (typeof callback === 'function') {\\r\\n      currentTask.callback = null;\\r\\n      currentPriorityLevel = currentTask.priorityLevel;\\r\\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\\r\\n\\r\\n      var continuationCallback = callback(didUserCallbackTimeout);\\r\\n      currentTime = exports.unstable_now();\\r\\n\\r\\n      if (typeof continuationCallback === 'function') {\\r\\n        currentTask.callback = continuationCallback;\\r\\n      } else {\\r\\n\\r\\n        if (currentTask === peek(taskQueue)) {\\r\\n          pop(taskQueue);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      advanceTimers(currentTime);\\r\\n    } else {\\r\\n      pop(taskQueue);\\r\\n    }\\r\\n\\r\\n    currentTask = peek(taskQueue);\\r\\n  } // Return whether there's additional work\\r\\n\\r\\n\\r\\n  if (currentTask !== null) {\\r\\n    return true;\\r\\n  } else {\\r\\n    var firstTimer = peek(timerQueue);\\r\\n\\r\\n    if (firstTimer !== null) {\\r\\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\\r\\n  switch (priorityLevel) {\\r\\n    case ImmediatePriority:\\r\\n    case UserBlockingPriority:\\r\\n    case NormalPriority:\\r\\n    case LowPriority:\\r\\n    case IdlePriority:\\r\\n      break;\\r\\n\\r\\n    default:\\r\\n      priorityLevel = NormalPriority;\\r\\n  }\\r\\n\\r\\n  var previousPriorityLevel = currentPriorityLevel;\\r\\n  currentPriorityLevel = priorityLevel;\\r\\n\\r\\n  try {\\r\\n    return eventHandler();\\r\\n  } finally {\\r\\n    currentPriorityLevel = previousPriorityLevel;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_next(eventHandler) {\\r\\n  var priorityLevel;\\r\\n\\r\\n  switch (currentPriorityLevel) {\\r\\n    case ImmediatePriority:\\r\\n    case UserBlockingPriority:\\r\\n    case NormalPriority:\\r\\n      // Shift down to normal priority\\r\\n      priorityLevel = NormalPriority;\\r\\n      break;\\r\\n\\r\\n    default:\\r\\n      // Anything lower than normal priority should remain at the current level.\\r\\n      priorityLevel = currentPriorityLevel;\\r\\n      break;\\r\\n  }\\r\\n\\r\\n  var previousPriorityLevel = currentPriorityLevel;\\r\\n  currentPriorityLevel = priorityLevel;\\r\\n\\r\\n  try {\\r\\n    return eventHandler();\\r\\n  } finally {\\r\\n    currentPriorityLevel = previousPriorityLevel;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_wrapCallback(callback) {\\r\\n  var parentPriorityLevel = currentPriorityLevel;\\r\\n  return function () {\\r\\n    // This is a fork of runWithPriority, inlined for performance.\\r\\n    var previousPriorityLevel = currentPriorityLevel;\\r\\n    currentPriorityLevel = parentPriorityLevel;\\r\\n\\r\\n    try {\\r\\n      return callback.apply(this, arguments);\\r\\n    } finally {\\r\\n      currentPriorityLevel = previousPriorityLevel;\\r\\n    }\\r\\n  };\\r\\n}\\r\\n\\r\\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\\r\\n  var currentTime = exports.unstable_now();\\r\\n  var startTime;\\r\\n\\r\\n  if (typeof options === 'object' && options !== null) {\\r\\n    var delay = options.delay;\\r\\n\\r\\n    if (typeof delay === 'number' && delay > 0) {\\r\\n      startTime = currentTime + delay;\\r\\n    } else {\\r\\n      startTime = currentTime;\\r\\n    }\\r\\n  } else {\\r\\n    startTime = currentTime;\\r\\n  }\\r\\n\\r\\n  var timeout;\\r\\n\\r\\n  switch (priorityLevel) {\\r\\n    case ImmediatePriority:\\r\\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\\r\\n      break;\\r\\n\\r\\n    case UserBlockingPriority:\\r\\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\\r\\n      break;\\r\\n\\r\\n    case IdlePriority:\\r\\n      timeout = IDLE_PRIORITY_TIMEOUT;\\r\\n      break;\\r\\n\\r\\n    case LowPriority:\\r\\n      timeout = LOW_PRIORITY_TIMEOUT;\\r\\n      break;\\r\\n\\r\\n    case NormalPriority:\\r\\n    default:\\r\\n      timeout = NORMAL_PRIORITY_TIMEOUT;\\r\\n      break;\\r\\n  }\\r\\n\\r\\n  var expirationTime = startTime + timeout;\\r\\n  var newTask = {\\r\\n    id: taskIdCounter++,\\r\\n    callback: callback,\\r\\n    priorityLevel: priorityLevel,\\r\\n    startTime: startTime,\\r\\n    expirationTime: expirationTime,\\r\\n    sortIndex: -1\\r\\n  };\\r\\n\\r\\n  if (startTime > currentTime) {\\r\\n    // This is a delayed task.\\r\\n    newTask.sortIndex = startTime;\\r\\n    push(timerQueue, newTask);\\r\\n\\r\\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\\r\\n      // All tasks are delayed, and this is the task with the earliest delay.\\r\\n      if (isHostTimeoutScheduled) {\\r\\n        // Cancel an existing timeout.\\r\\n        cancelHostTimeout();\\r\\n      } else {\\r\\n        isHostTimeoutScheduled = true;\\r\\n      } // Schedule a timeout.\\r\\n\\r\\n\\r\\n      requestHostTimeout(handleTimeout, startTime - currentTime);\\r\\n    }\\r\\n  } else {\\r\\n    newTask.sortIndex = expirationTime;\\r\\n    push(taskQueue, newTask);\\r\\n    // wait until the next time we yield.\\r\\n\\r\\n\\r\\n    if (!isHostCallbackScheduled && !isPerformingWork) {\\r\\n      isHostCallbackScheduled = true;\\r\\n      requestHostCallback(flushWork);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return newTask;\\r\\n}\\r\\n\\r\\nfunction unstable_pauseExecution() {\\r\\n}\\r\\n\\r\\nfunction unstable_continueExecution() {\\r\\n\\r\\n  if (!isHostCallbackScheduled && !isPerformingWork) {\\r\\n    isHostCallbackScheduled = true;\\r\\n    requestHostCallback(flushWork);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_getFirstCallbackNode() {\\r\\n  return peek(taskQueue);\\r\\n}\\r\\n\\r\\nfunction unstable_cancelCallback(task) {\\r\\n  // remove from the queue because you can't remove arbitrary nodes from an\\r\\n  // array based heap, only the first one.)\\r\\n\\r\\n\\r\\n  task.callback = null;\\r\\n}\\r\\n\\r\\nfunction unstable_getCurrentPriorityLevel() {\\r\\n  return currentPriorityLevel;\\r\\n}\\r\\n\\r\\nvar isMessageLoopRunning = false;\\r\\nvar scheduledHostCallback = null;\\r\\nvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\\r\\n// thread, like user events. By default, it yields multiple times per frame.\\r\\n// It does not attempt to align with frame boundaries, since most tasks don't\\r\\n// need to be frame aligned; for those that do, use requestAnimationFrame.\\r\\n\\r\\nvar frameInterval = frameYieldMs;\\r\\nvar startTime = -1;\\r\\n\\r\\nfunction shouldYieldToHost() {\\r\\n  var timeElapsed = exports.unstable_now() - startTime;\\r\\n\\r\\n  if (timeElapsed < frameInterval) {\\r\\n    // The main thread has only been blocked for a really short amount of time;\\r\\n    // smaller than a single frame. Don't yield yet.\\r\\n    return false;\\r\\n  } // The main thread has been blocked for a non-negligible amount of time. We\\r\\n\\r\\n\\r\\n  return true;\\r\\n}\\r\\n\\r\\nfunction requestPaint() {\\r\\n\\r\\n}\\r\\n\\r\\nfunction forceFrameRate(fps) {\\r\\n  if (fps < 0 || fps > 125) {\\r\\n    // Using console['error'] to evade Babel and ESLint\\r\\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  if (fps > 0) {\\r\\n    frameInterval = Math.floor(1000 / fps);\\r\\n  } else {\\r\\n    // reset the framerate\\r\\n    frameInterval = frameYieldMs;\\r\\n  }\\r\\n}\\r\\n\\r\\nvar performWorkUntilDeadline = function () {\\r\\n  if (scheduledHostCallback !== null) {\\r\\n    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\\r\\n    // has been blocked.\\r\\n\\r\\n    startTime = currentTime;\\r\\n    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\\r\\n    // error can be observed.\\r\\n    //\\r\\n    // Intentionally not using a try-catch, since that makes some debugging\\r\\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\\r\\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\\r\\n\\r\\n    var hasMoreWork = true;\\r\\n\\r\\n    try {\\r\\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\\r\\n    } finally {\\r\\n      if (hasMoreWork) {\\r\\n        // If there's more work, schedule the next message event at the end\\r\\n        // of the preceding one.\\r\\n        schedulePerformWorkUntilDeadline();\\r\\n      } else {\\r\\n        isMessageLoopRunning = false;\\r\\n        scheduledHostCallback = null;\\r\\n      }\\r\\n    }\\r\\n  } else {\\r\\n    isMessageLoopRunning = false;\\r\\n  } // Yielding to the browser will give it a chance to paint, so we can\\r\\n};\\r\\n\\r\\nvar schedulePerformWorkUntilDeadline;\\r\\n\\r\\nif (typeof localSetImmediate === 'function') {\\r\\n  // Node.js and old IE.\\r\\n  // There's a few reasons for why we prefer setImmediate.\\r\\n  //\\r\\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\\r\\n  // (Even though this is a DOM fork of the Scheduler, you could get here\\r\\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\\r\\n  // https://github.com/facebook/react/issues/20756\\r\\n  //\\r\\n  // But also, it runs earlier which is the semantic we want.\\r\\n  // If other browsers ever implement it, it's better to use it.\\r\\n  // Although both of these would be inferior to native scheduling.\\r\\n  schedulePerformWorkUntilDeadline = function () {\\r\\n    localSetImmediate(performWorkUntilDeadline);\\r\\n  };\\r\\n} else if (typeof MessageChannel !== 'undefined') {\\r\\n  // DOM and Worker environments.\\r\\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\\r\\n  var channel = new MessageChannel();\\r\\n  var port = channel.port2;\\r\\n  channel.port1.onmessage = performWorkUntilDeadline;\\r\\n\\r\\n  schedulePerformWorkUntilDeadline = function () {\\r\\n    port.postMessage(null);\\r\\n  };\\r\\n} else {\\r\\n  // We should only fallback here in non-browser environments.\\r\\n  schedulePerformWorkUntilDeadline = function () {\\r\\n    localSetTimeout(performWorkUntilDeadline, 0);\\r\\n  };\\r\\n}\\r\\n\\r\\nfunction requestHostCallback(callback) {\\r\\n  scheduledHostCallback = callback;\\r\\n\\r\\n  if (!isMessageLoopRunning) {\\r\\n    isMessageLoopRunning = true;\\r\\n    schedulePerformWorkUntilDeadline();\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction requestHostTimeout(callback, ms) {\\r\\n  taskTimeoutID = localSetTimeout(function () {\\r\\n    callback(exports.unstable_now());\\r\\n  }, ms);\\r\\n}\\r\\n\\r\\nfunction cancelHostTimeout() {\\r\\n  localClearTimeout(taskTimeoutID);\\r\\n  taskTimeoutID = -1;\\r\\n}\\r\\n\\r\\nvar unstable_requestPaint = requestPaint;\\r\\nvar unstable_Profiling =  null;\\r\\n\\r\\nexports.unstable_IdlePriority = IdlePriority;\\r\\nexports.unstable_ImmediatePriority = ImmediatePriority;\\r\\nexports.unstable_LowPriority = LowPriority;\\r\\nexports.unstable_NormalPriority = NormalPriority;\\r\\nexports.unstable_Profiling = unstable_Profiling;\\r\\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\\r\\nexports.unstable_cancelCallback = unstable_cancelCallback;\\r\\nexports.unstable_continueExecution = unstable_continueExecution;\\r\\nexports.unstable_forceFrameRate = forceFrameRate;\\r\\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\\r\\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\\r\\nexports.unstable_next = unstable_next;\\r\\nexports.unstable_pauseExecution = unstable_pauseExecution;\\r\\nexports.unstable_requestPaint = unstable_requestPaint;\\r\\nexports.unstable_runWithPriority = unstable_runWithPriority;\\r\\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\\r\\nexports.unstable_shouldYield = shouldYieldToHost;\\r\\nexports.unstable_wrapCallback = unstable_wrapCallback;\\r\\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\\r\\nif (\\r\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\\r\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\\r\\n    'function'\\r\\n) {\\r\\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\\r\\n}\\r\\n        \\r\\n  })();\\r\\n}\\r\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\"]\n}\n"]