["^ ","~:output",["^ ","~:js","goog.provide('helix.core');\r\ngoog.scope(function(){\r\n  helix.core.goog$module$goog$object = goog.module.get('goog.object');\r\n});\r\nif((typeof Symbol !== 'undefined')){\r\n(Symbol.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (sym,writer,_){\r\nvar sym__$1 = this;\r\nreturn cljs.core._write(writer,[\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym__$1.toString()),\"\\\"\"].join(''));\r\n}));\r\n} else {\r\n}\r\n/**\r\n * React.Fragment. See `helix.core/<>` for macro version.\r\n */\r\nhelix.core.Fragment = module$node_modules$react$index.Fragment;\r\n/**\r\n * React.Suspense. See `helix.core/suspense` for macro version.\r\n */\r\nhelix.core.Suspense = module$node_modules$react$index.Suspense;\r\nhelix.core.create_element = module$node_modules$react$index.createElement;\r\n/**\r\n * React.createContext\r\n */\r\nhelix.core.create_context = module$node_modules$react$index.createContext;\r\nhelix.core.get_react = (function helix$core$get_react(){\r\nreturn module$node_modules$react$index;\r\n});\r\nhelix.core.jsx = module$node_modules$react$jsx_runtime.jsx;\r\nhelix.core.jsxs = module$node_modules$react$jsx_runtime.jsxs;\r\n/**\r\n * Create a new React element from a valid React type.\r\n * \r\n *   Example:\r\n *   ```\r\n *   ($ MyComponent\r\n * \"child1\"\r\n * ($ \"span\"\r\n *   {:style {:color \"green\"}}\r\n *   \"child2\" ))\r\n *   ```\r\n */\r\nhelix.core.$ = (function helix$core$$(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___22502 = arguments.length;\r\nvar i__5770__auto___22503 = (0);\r\nwhile(true){\r\nif((i__5770__auto___22503 < len__5769__auto___22502)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___22503]));\r\n\r\nvar G__22504 = (i__5770__auto___22503 + (1));\r\ni__5770__auto___22503 = G__22504;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\r\nreturn helix.core.$.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\r\n});\r\n\r\n(helix.core.$.cljs$core$IFn$_invoke$arity$variadic = (function (type,args){\r\nvar _QMARK_p = cljs.core.first(args);\r\nvar _QMARK_c = cljs.core.rest(args);\r\nvar native_QMARK_ = (function (){var or__5045__auto__ = (type instanceof cljs.core.Keyword);\r\nif(or__5045__auto__){\r\nreturn or__5045__auto__;\r\n} else {\r\nvar or__5045__auto____$1 = typeof type === 'string';\r\nif(or__5045__auto____$1){\r\nreturn or__5045__auto____$1;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"native\",\"native\",-613060878).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(type));\r\n}\r\n}\r\n})();\r\nvar has_props_QMARK_ = ((cljs.core.map_QMARK_(_QMARK_p)) || ((_QMARK_p == null)));\r\nvar children_STAR_ = ((has_props_QMARK_)?_QMARK_c:args);\r\nvar children = ((cljs.core.next(children_STAR_))?cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(children_STAR_):cljs.core.first(children_STAR_));\r\nvar props_STAR_ = (function (){var G__22405 = cljs.core.PersistentArrayMap.EMPTY;\r\nvar G__22405__$1 = ((has_props_QMARK_)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__22405,_QMARK_p):G__22405);\r\nif((!((children == null)))){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__22405__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),children);\r\n} else {\r\nreturn G__22405__$1;\r\n}\r\n})();\r\nvar props = (cljs.core.truth_(native_QMARK_)?helix.impl.props._dom_props.cljs$core$IFn$_invoke$arity$1(props_STAR_):helix.impl.props._props.cljs$core$IFn$_invoke$arity$1(props_STAR_));\r\nvar key = new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(props_STAR_);\r\nvar emit_fn = ((cljs.core.next(children_STAR_))?helix.core.jsxs:helix.core.jsx);\r\nvar type_SINGLEQUOTE_ = (((type instanceof cljs.core.Keyword))?cljs.core.name(type):type);\r\nif((!((key == null)))){\r\nreturn (emit_fn.cljs$core$IFn$_invoke$arity$3 ? emit_fn.cljs$core$IFn$_invoke$arity$3(type_SINGLEQUOTE_,props,key) : emit_fn.call(null,type_SINGLEQUOTE_,props,key));\r\n} else {\r\nreturn (emit_fn.cljs$core$IFn$_invoke$arity$2 ? emit_fn.cljs$core$IFn$_invoke$arity$2(type_SINGLEQUOTE_,props) : emit_fn.call(null,type_SINGLEQUOTE_,props));\r\n}\r\n}));\r\n\r\n(helix.core.$.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(helix.core.$.cljs$lang$applyTo = (function (seq22388){\r\nvar G__22389 = cljs.core.first(seq22388);\r\nvar seq22388__$1 = cljs.core.next(seq22388);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__22389,seq22388__$1);\r\n}));\r\n\r\n/**\r\n * Dynamically create a new React element from a valid React type.\r\n * \r\n *   `$` can typically be faster, because it will statically process the arguments\r\n *   at macro-time if possible.\r\n * \r\n *   Example:\r\n *   ```\r\n *   ($$ MyComponent\r\n * \"child1\"\r\n * ($$ \"span\"\r\n *   {:style {:color \"green\"}}\r\n *   \"child2\" ))\r\n *   ```\r\n */\r\nhelix.core.$$ = helix.core.$;\r\n\r\n/**\r\n * @interface\r\n */\r\nhelix.core.IExtractType = function(){};\r\n\r\nvar helix$core$IExtractType$_type$dyn_22518 = (function (factory){\r\nvar x__5393__auto__ = (((factory == null))?null:factory);\r\nvar m__5394__auto__ = (helix.core._type[goog.typeOf(x__5393__auto__)]);\r\nif((!((m__5394__auto__ == null)))){\r\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(factory) : m__5394__auto__.call(null,factory));\r\n} else {\r\nvar m__5392__auto__ = (helix.core._type[\"_\"]);\r\nif((!((m__5392__auto__ == null)))){\r\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(factory) : m__5392__auto__.call(null,factory));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"IExtractType.-type\",factory);\r\n}\r\n}\r\n});\r\n/**\r\n * Extracts the underlying type from the factory function.\r\n */\r\nhelix.core._type = (function helix$core$_type(factory){\r\nif((((!((factory == null)))) && ((!((factory.helix$core$IExtractType$_type$arity$1 == null)))))){\r\nreturn factory.helix$core$IExtractType$_type$arity$1(factory);\r\n} else {\r\nreturn helix$core$IExtractType$_type$dyn_22518(factory);\r\n}\r\n});\r\n\r\n/**\r\n * Geven a factory function created by `helix.core/factory` or `cljs-factory`,\r\n *   returns the original component that the factory creates elements of.\r\n */\r\nhelix.core.type = (function helix$core$type(f){\r\nreturn helix.core._type(f);\r\n});\r\n/**\r\n * Creates a factory function for a React component, that when called returns an\r\n *   element with the props and children passed to the factory.\r\n * \r\n *   Use `helix.core/type` to extract the original React component.\r\n */\r\nhelix.core.factory = (function helix$core$factory(type){\r\nvar x22417 = (function() { \r\nvar helix$core$factory_$_factory__delegate = function (args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(helix.core.$,type,args);\r\n};\r\nvar helix$core$factory_$_factory = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__22523__i = 0, G__22523__a = new Array(arguments.length -  0);\r\nwhile (G__22523__i < G__22523__a.length) {G__22523__a[G__22523__i] = arguments[G__22523__i + 0]; ++G__22523__i;}\r\n  args = new cljs.core.IndexedSeq(G__22523__a,0,null);\r\n} \r\nreturn helix$core$factory_$_factory__delegate.call(this,args);};\r\nhelix$core$factory_$_factory.cljs$lang$maxFixedArity = 0;\r\nhelix$core$factory_$_factory.cljs$lang$applyTo = (function (arglist__22525){\r\nvar args = cljs.core.seq(arglist__22525);\r\nreturn helix$core$factory_$_factory__delegate(args);\r\n});\r\nhelix$core$factory_$_factory.cljs$core$IFn$_invoke$arity$variadic = helix$core$factory_$_factory__delegate;\r\nreturn helix$core$factory_$_factory;\r\n})()\r\n;\r\n(x22417.helix$core$IExtractType$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x22417.helix$core$IExtractType$_type$arity$1 = (function (_){\r\nvar ___$1 = this;\r\nreturn type;\r\n}));\r\n\r\nreturn x22417;\r\n});\r\n/**\r\n * Creates a factory function for a component defined via `defnc`, that when\r\n *   called returns an element with the props and children passed to the factory.\r\n *   Slightly more performant than `factory` when used with a helix component.\r\n * \r\n *   Use `helix.core/type` to extract the original component this was called with.\r\n */\r\nhelix.core.cljs_factory = (function helix$core$cljs_factory(type){\r\nvar x22421 = (function() { \r\nvar helix$core$cljs_factory_$_factory__delegate = function (args){\r\nif(cljs.core.map_QMARK_(cljs.core.first(args))){\r\nvar props = cljs.core.first(args);\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(module$node_modules$react$index.createElement,type,({\"helix/props\": cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(props,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967)], 0)), \"key\": cljs.core.get.cljs$core$IFn$_invoke$arity$3(props,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),undefined), \"ref\": cljs.core.get.cljs$core$IFn$_invoke$arity$3(props,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),undefined)}),cljs.core.rest(args));\r\n} else {\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(module$node_modules$react$index.createElement,type,({}),args);\r\n}\r\n};\r\nvar helix$core$cljs_factory_$_factory = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__22529__i = 0, G__22529__a = new Array(arguments.length -  0);\r\nwhile (G__22529__i < G__22529__a.length) {G__22529__a[G__22529__i] = arguments[G__22529__i + 0]; ++G__22529__i;}\r\n  args = new cljs.core.IndexedSeq(G__22529__a,0,null);\r\n} \r\nreturn helix$core$cljs_factory_$_factory__delegate.call(this,args);};\r\nhelix$core$cljs_factory_$_factory.cljs$lang$maxFixedArity = 0;\r\nhelix$core$cljs_factory_$_factory.cljs$lang$applyTo = (function (arglist__22530){\r\nvar args = cljs.core.seq(arglist__22530);\r\nreturn helix$core$cljs_factory_$_factory__delegate(args);\r\n});\r\nhelix$core$cljs_factory_$_factory.cljs$core$IFn$_invoke$arity$variadic = helix$core$cljs_factory_$_factory__delegate;\r\nreturn helix$core$cljs_factory_$_factory;\r\n})()\r\n;\r\n(x22421.helix$core$IExtractType$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x22421.helix$core$IExtractType$_type$arity$1 = (function (_){\r\nvar ___$1 = this;\r\nreturn type;\r\n}));\r\n\r\nreturn x22421;\r\n});\r\nhelix.core.assoc_some = (function helix$core$assoc_some(m,k,x){\r\nif((!((x == null)))){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,x);\r\n} else {\r\nreturn m;\r\n}\r\n});\r\n/**\r\n * A helper function for turning a props object into a CLJS map. Works with both\r\n *   factory functions (which stores a map in a single key, \"helix/props\") and\r\n *   normal JS objects.\r\n *   Mostly used internally by helix, but can be useful when writing HOC.\r\n */\r\nhelix.core.extract_cljs_props = (function helix$core$extract_cljs_props(o){\r\nif(((goog.DEBUG) && (((cljs.core.map_QMARK_(o)) || ((o == null)))))){\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Props received were a map. This probably means you're calling your component as a function.\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),o], null));\r\n} else {\r\n}\r\n\r\nvar temp__5802__auto__ = helix.core.goog$module$goog$object.get(o,\"helix/props\");\r\nif(cljs.core.truth_(temp__5802__auto__)){\r\nvar props = temp__5802__auto__;\r\nreturn helix.core.assoc_some(props,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),helix.core.goog$module$goog$object.get(o,\"children\"));\r\n} else {\r\nreturn cljs_bean.core.bean.cljs$core$IFn$_invoke$arity$1(o);\r\n}\r\n});\r\nhelix.core.props_kvs_identical_QMARK_ = (function helix$core$props_kvs_identical_QMARK_(prev,cur){\r\nvar prev_props = helix.core.extract_cljs_props(prev);\r\nvar cur_props = helix.core.extract_cljs_props(cur);\r\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(prev_props),cljs.core.count(cur_props))) && (cljs.core.every_QMARK_((function (p1__22442_SHARP_){\r\nreturn (cljs.core.get.cljs$core$IFn$_invoke$arity$2(prev_props,p1__22442_SHARP_) === cljs.core.get.cljs$core$IFn$_invoke$arity$2(cur_props,p1__22442_SHARP_));\r\n}),cljs.core.keys(cur_props))));\r\n});\r\n/**\r\n * Like React.memo, but passes props to `compare` as CLJS map-likes instead of\r\n *   JS objects.\r\n *   `compare` should return true if props are equal, and false if not.\r\n */\r\nhelix.core.memo = (function helix$core$memo(var_args){\r\nvar G__22454 = arguments.length;\r\nswitch (G__22454) {\r\ncase 1:\r\nreturn helix.core.memo.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn helix.core.memo.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.core.memo.cljs$core$IFn$_invoke$arity$1 = (function (component){\r\nreturn module$node_modules$react$index.memo(component,helix.core.props_kvs_identical_QMARK_);\r\n}));\r\n\r\n(helix.core.memo.cljs$core$IFn$_invoke$arity$2 = (function (component,compare){\r\nreturn module$node_modules$react$index.memo(component,(function helix$core$memo_compare(o,o_SINGLEQUOTE_){\r\nvar G__22465 = helix.core.extract_cljs_props(o);\r\nvar G__22466 = helix.core.extract_cljs_props(o_SINGLEQUOTE_);\r\nreturn (compare.cljs$core$IFn$_invoke$arity$2 ? compare.cljs$core$IFn$_invoke$arity$2(G__22465,G__22466) : compare.call(null,G__22465,G__22466));\r\n}));\r\n}));\r\n\r\n(helix.core.memo.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Helper function for creating a class component. See `defcomponent`.\r\n */\r\nhelix.core.create_component = (function helix$core$create_component(spec,statics){\r\nvar render = spec.render;\r\nvar render_SINGLEQUOTE_ = (function (this$){\r\nvar G__22472 = this$;\r\nvar G__22473 = helix.core.extract_cljs_props(this$.props);\r\nvar G__22474 = this$.state;\r\nreturn (render.cljs$core$IFn$_invoke$arity$3 ? render.cljs$core$IFn$_invoke$arity$3(G__22472,G__22473,G__22474) : render.call(null,G__22472,G__22473,G__22474));\r\n});\r\nhelix.core.goog$module$goog$object.set(spec,\"render\",render_SINGLEQUOTE_);\r\n\r\nreturn helix.impl.classes.createComponent(module$node_modules$react$index.Component,spec,statics);\r\n});\r\n/**\r\n * Like react/createRef, but the ref can be swapped, reset, and dereferenced\r\n *   like an atom.\r\n * \r\n *   Note: `helix.core/create-ref` is mostly used for class components. Function\r\n *   components typically rely on `helix.hooks/use-ref` instead.\r\n */\r\nhelix.core.create_ref = (function helix$core$create_ref(var_args){\r\nvar G__22478 = arguments.length;\r\nswitch (G__22478) {\r\ncase 0:\r\nreturn helix.core.create_ref.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn helix.core.create_ref.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(helix.core.create_ref.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn helix.core.create_ref.cljs$core$IFn$_invoke$arity$1(null);\r\n}));\r\n\r\n(helix.core.create_ref.cljs$core$IFn$_invoke$arity$1 = (function (initial_value){\r\nvar ref = module$node_modules$react$index.createRef();\r\n(ref.current = (function (){var x22480 = ({\"current\": initial_value});\r\n(x22480.cljs$core$IDeref$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x22480.cljs$core$IDeref$_deref$arity$1 = (function (this$){\r\nvar this$__$1 = this;\r\nreturn this$__$1.current;\r\n}));\r\n\r\n(x22480.cljs$core$IReset$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x22480.cljs$core$IReset$_reset_BANG_$arity$2 = (function (this$,x){\r\nvar this$__$1 = this;\r\nreturn (this$__$1.current = x);\r\n}));\r\n\r\n(x22480.cljs$core$ISwap$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(x22480.cljs$core$ISwap$_swap_BANG_$arity$2 = (function (this$,f){\r\nvar this$__$1 = this;\r\nreturn (this$__$1.current = (function (){var G__22485 = this$__$1.current;\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22485) : f.call(null,G__22485));\r\n})());\r\n}));\r\n\r\n(x22480.cljs$core$ISwap$_swap_BANG_$arity$3 = (function (this$,f,a){\r\nvar this$__$1 = this;\r\nreturn (this$__$1.current = (function (){var G__22486 = this$__$1.current;\r\nvar G__22487 = a;\r\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__22486,G__22487) : f.call(null,G__22486,G__22487));\r\n})());\r\n}));\r\n\r\n(x22480.cljs$core$ISwap$_swap_BANG_$arity$4 = (function (this$,f,a,b){\r\nvar this$__$1 = this;\r\nreturn (this$__$1.current = (function (){var G__22491 = this$__$1.current;\r\nvar G__22492 = a;\r\nvar G__22493 = b;\r\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__22491,G__22492,G__22493) : f.call(null,G__22491,G__22492,G__22493));\r\n})());\r\n}));\r\n\r\n(x22480.cljs$core$ISwap$_swap_BANG_$arity$5 = (function (this$,f,a,b,xs){\r\nvar this$__$1 = this;\r\nreturn (this$__$1.current = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,this$__$1.current,a,b,xs));\r\n}));\r\n\r\nreturn x22480;\r\n})());\r\n\r\nreturn ref.current;\r\n}));\r\n\r\n(helix.core.create_ref.cljs$lang$maxFixedArity = 1);\r\n\r\n/**\r\n * Registers a component with the React Fresh runtime.\r\n *   `type` is the component function, and `id` is the unique ID assigned to it\r\n *   (e.g. component name) for cache invalidation.\r\n */\r\nhelix.core.register_BANG_ = (function helix$core$register_BANG_(type,id){\r\nif((typeof window !== 'undefined') && (typeof window.$$Register$$ !== 'undefined')){\r\nreturn window.$$Register$$(type,id);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nhelix.core.signature_BANG_ = (function helix$core$signature_BANG_(){\r\nvar and__5043__auto__ = (typeof window !== 'undefined') && (typeof window.$$Register$$ !== 'undefined');\r\nif(and__5043__auto__){\r\nreturn window.$$Signature$$();\r\n} else {\r\nreturn and__5043__auto__;\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","helix/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$type"]],"~:macros",["^ ","~$provider",["^ ","~:arglists",["~#list",[[["^ ","~:keys",["~$context","~$value"],"~:as","~$props"],"~$&","~$children"]]],"~:doc","Creates a Provider for a React Context value.\n\n  Example:\n\n    (def my-context (react/createContext))\n\n    (provider {:context my-context :value my-value} child1 child2 ...childN)","^7",84,"^8",1,"^6","helix/core.clj","~:name","~$helix.core/provider","~:ns","~$helix.core","~:macro",true],"~$defnc",["^ ","^Q","^R","^O","~$helix.core/defnc","^6","helix/core.clj","^8",1,"^7",190,"^S",true,"~:style/indent","~:defn","^F",["^G",[["~$display-name","~$&","~$form-body"]]],"^N","Defines a new functional React component. Used like:\n\n  ```\n  (defnc component-name\n    \"Optional docstring\"\n    {,,,fn-meta}\n    [props ?ref]\n    {,,,opts-map}\n    ,,,body)\n  ```\n\n  `component-name` will now be bound in the namespace a React function component\n  that returns a React Element.\n\n\n  Your component should adhere to the following:\n\n  First parameter is 'props', a map of properties passed to the component.\n\n  Second parameter is optional and is used with `React.forwardRef`.\n\n  `fn-meta` is optional and will be merged into the metadata of the `component-name`\n  symbol. A special `:wrap` key may contain an ordered sequence of higher-order\n  components to wrap the component in.\n\n  `opts-map` is optional and can be used to pass some configuration options to the\n  macro. Current options:\n   - `:helix/features` - a map of feature flags to enable. See \"Experimental\" docs.\n\n  `body` should return a React Element."],"~$defcomponent",["^ ","^Q","^R","^O","~$helix.core/defcomponent","^6","helix/core.clj","^8",1,"^7",379,"^S",true,"^V",[1,"~:form",[1]],"^F",["^G",[["^X","~$&","~$spec"]]],"^N","Defines a React class component.\n  Like `class display-name extends React.Component { ... }` in JS.\n\n  Methods are defined using (method-name [this ,,,] ,,,) syntax.\n  Properties elide the arguments vector (property-name expr)\n\n  Static properties and methods can be added by annotating the method or\n  property with metadata containing the :static keyword.\n\n  Some assumptions:\n  - To use setState, you must store the state as a JS obj\n  - The render method receives three arguments: this, a CLJS map of props,\n    and the state object.\n  - displayName by default is the symbol passed in, but can be customized\n    by manually adding it as a static property\n\n  Example:\n\n  (defcomponent foo\n   (constructor\n    [this]\n    (set! (.-state this) #js {:counter 0})))"],"~$fnc",["^ ","^Q","^R","^O","~$helix.core/fnc","^6","helix/core.clj","^8",1,"^7",134,"^S",true,"^V","^W","^F",["^G",[["~$&","~$body"]]],"^N","Creates a new anonymous function React component. Used like:\n\n  (fnc ?optional-component-name\n    [props ?forwarded-ref]\n    {,,,opts-map}\n    ,,,body)\n\n  Returns a function that can be used just like a component defined with\n  `defnc`, i.e. accepts a JS object as props and the body receives them as a\n  map, can be used with `$` macro, forwardRef, etc.\n\n  `opts-map` is optional and can be used to pass some configuration options.\n  Current options:\n   - ':wrap' - ordered sequence of higher-order components to wrap the component in\n   - ':helix/features' - a map of feature flags to enable.\n\n  Some feature flags only pertain to named components, i.e. Fast Refresh and\n  factory functions, and thus can not be used with `fnc`."],"~$suspense",["^ ","^F",["^G",[[["^ ","^H",["~$fallback"]],"~$&","^M"]]],"^N","Creates a React Suspense boundary.","^7",101,"^8",1,"^6","helix/core.clj","^O","~$helix.core/suspense","^Q","^R","^S",true],"~$$",["^ ","^Q","^R","^O","~$helix.core/$","^6","helix/core.clj","^8",1,"^7",14,"^S",true,"^V",0,"^F",["^G",[["^C","~$&","~$args"]]],"^N","Create a new React element from a valid React type.\n\n  Will try to statically convert props to a JS object.\n\n  To pass in dynamic props, use the special `&` or `:&` key in the props map\n  to have the map merged in.\n\n  Simple example:\n\n  ($ my-component\n     \"child1\"\n     ($ \"span\"\n        {:style {:color \"green\"}}\n        \"child2\" ))\n\n  Dynamic exmaple:\n\n  (let [dynamic-props {:foo \"bar\"}]\n    ($ my-component\n       {:static \"prop\"\n        & dynamic-props}))\n  "],"~$defhook",["^ ","^Q","^R","^O","~$helix.core/defhook","^6","helix/core.clj","^8",1,"^7",316,"^S",true,"^V","^W","^F",["^G",[["~$sym","~$&","^14"]]],"^N","Defines a new custom hook function.\n  Checks for invalid usage of other hooks in the body, and other helix\n  features."],"~$defnc-",["^ ","^Q","^R","^O","~$helix.core/defnc-","^6","helix/core.clj","^8",1,"^7",304,"^S",true,"^V","^W","^F",["^G",[["^X","~$&","~$rest"]]],"^N","Same as defnc, yielding a non-public def"],"~$<>",["^ ","^F",["^G",[["~$&","^M"]]],"^N","Creates a new React Fragment Element","^7",78,"^8",1,"^6","helix/core.clj","^O","~$helix.core/<>","^Q","^R","^S",true]],"^O","^R","~:reader-aliases",["^ "],"~:js-aliases",["^ ","react","~$module$node_modules$react$index","react/jsx-runtime","~$module$node_modules$react$jsx_runtime"],"~:op","^Q","~:imports",null,"~:requires",["^ ","~$impl.props","~$helix.impl.props","^1G","^1G","~$cljs-bean.core","^1M","~$bean","^1M","~$react","^1E","^?","^?","^1E","^1E","~$gobj","~$goog.object","~$goog","^1R","^1Q","^1Q","^1L","^1L","~$helix.impl.classes","^1S","~$helix.class","^1S","~$jsx-runtime","^1G"],"~:seen",["^B",["~:require","~:require-macros"]],"~:uses",null,"^1X",["^ ","^R","^R","^?","^?","^1K","^1L","^1L","^1L"],"^10",["^G",["~$ns","^R",["^G",["~:refer-clojure","~:exclude",["^C"]]],["^G",["^1W",["^1Q","^K","^1P"],["^1L","^K","^1K"],["^1S","^K","^1T"],["^1M","^K","^1N"],["react","^K","^1O"],["react/jsx-runtime","^K","^1U"]]],["^G",["^1X",["^R"]]]]],"~:flags",["^ ","^1W",["^B",[]],"^1X",["^B",[]]],"~:js-deps",["^ ","^1D",["^ ","^K","^1O"],"^1F",["^ ","^K","^1U"]],"~:deps",["^1R","^?","^1Q","^1L","^1S","^1M","^1E","^1G"]],"^Q","^R","~:resource-id",["~:shadow.build.classpath/resource","helix/core.cljs"],"~:compiled-at",1703447048757,"^1B",["^ ","^1K","^1L","^1G","^1G","^1M","^1M","^R","^R","^1N","^1M","^1O","^1E","^?","^?","^1E","^1E","^1P","^1Q","^1R","^1R","^1Q","^1Q","^1L","^1L","^1S","^1S","^1T","^1S","^1U","^1G"],"~:resource-name","helix/core.cljs","~:warnings",[],"~:source","(ns helix.core\n  (:refer-clojure :exclude [type])\n  (:require [goog.object :as gobj]\n            [helix.impl.props :as impl.props]\n            [helix.impl.classes :as helix.class]\n            [cljs-bean.core :as bean]\n            [\"react\" :as react]\n            [\"react/jsx-runtime\" :as jsx-runtime])\n  (:require-macros [helix.core]))\n\n\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    js/Symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n\n(def Fragment\n  \"React.Fragment. See `helix.core/<>` for macro version.\"\n  react/Fragment)\n\n\n(def Suspense\n  \"React.Suspense. See `helix.core/suspense` for macro version.\"\n  react/Suspense)\n\n\n(def create-element react/createElement)\n\n\n(def create-context\n  \"React.createContext\"\n  react/createContext)\n\n\n;; this is to enable calling `(.createElement (get-react))` without doing\n;; a dynamic arity dispatch. See https://github.com/Lokeh/helix/issues/20\n(defn ^js/React get-react [] react)\n\n(def jsx  jsx-runtime/jsx)\n(def jsxs jsx-runtime/jsxs)\n\n(defn $\n  \"Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \\\"child1\\\"\n   ($ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n  {:style/indent 0}\n  [type & args]\n  (let [?p (first args)\n        ?c (rest args)\n        native? (or (keyword? type)\n                    (string? type)\n                    (:native (meta type)))\n        has-props? ^boolean (or (map? ?p)\n                                (nil? ?p))\n        children* ^seq (if has-props?\n                         ?c\n                         args)\n        children (if (next children*)\n                   (into-array children*)\n                   (first children*))\n        props* (cond-> {}\n                 has-props?       (conj ?p)\n                 (some? children) (assoc :children children))\n        props (if native?\n                (impl.props/-dom-props props*)\n                (impl.props/-props     props*))\n        key (:key props*)\n        emit-fn (if (next children*)\n                  jsxs\n                  jsx)\n        type' (if (keyword? type)\n                (name type)\n                type)]\n    (if (some? key)\n      (emit-fn type' props key)\n      (emit-fn type' props))))\n\n\n(def ^:deprecated $$\n  \"Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \\\"child1\\\"\n   ($$ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n $)\n\n\n(defprotocol IExtractType\n  (-type [factory] \"Extracts the underlying type from the factory function.\"))\n\n\n(defn type\n  \"Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of.\"\n  [f]\n  (-type f))\n\n\n(defn factory\n  \"Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component.\"\n  [type]\n  (-> (fn factory [& args]\n        (apply $ type args))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn cljs-factory\n  \"Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with.\"\n  [type]\n  (-> (fn factory [& args]\n        (if (map? (first args))\n          (let [props (first args)]\n            (apply react/createElement\n                   type\n                   #js {\"helix/props\"\n                        (dissoc props\n                                :key\n                                :ref)\n                        \"key\" (get props :key js/undefined)\n                        \"ref\" (get props :ref js/undefined)}\n                   (rest args)))\n          (apply react/createElement\n                 type\n                 #js {}\n                 args)))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn- assoc-some [m k x]\n  (if (some? x)\n    (assoc m k x)\n    m))\n\n\n(defn extract-cljs-props\n  \"A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \\\"helix/props\\\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC.\"\n  [o]\n  (when (and ^boolean goog/DEBUG (or (map? o) (nil? o)))\n    (throw (ex-info \"Props received were a map. This probably means you're calling your component as a function.\" {:props o})))\n  (if-let [props (gobj/get o \"helix/props\")]\n    (assoc-some props :children (gobj/get o \"children\"))\n    (bean/bean o)))\n\n\n(defn- props-kvs-identical?\n  [prev cur]\n  (let [prev-props (extract-cljs-props prev)\n        cur-props (extract-cljs-props cur)]\n    (and (= (count prev-props) (count cur-props))\n         (every?\n          #(identical? (get prev-props %) (get cur-props %))\n          (keys cur-props)))))\n\n\n(defn memo\n  \"Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.\"\n  ([component] (react/memo component props-kvs-identical?))\n  ([component compare]\n   (react/memo\n    component\n    (fn memo-compare\n      [o o']\n      (compare\n       (extract-cljs-props o)\n       (extract-cljs-props o'))))))\n\n\n\n;;\n;; -- class components\n;;\n\n\n\n(defn create-component\n  \"Helper function for creating a class component. See `defcomponent`.\"\n  [spec statics]\n  (let [render (.-render ^js spec)\n        render' (fn [this]\n                  (render\n                   this\n                   (extract-cljs-props (.-props ^js this))\n                   (.-state ^js this)))]\n    (gobj/set spec \"render\" render')\n    (helix.class/createComponent react/Component spec statics)))\n\n(comment\n  (def MyComponent\n    (create-component #js {:displayName \"Foo\"\n                           :constructor\n                           (fn [this]\n                             (set! (.-state this) #js {:count 3}))\n                           :render\n                           (fn [this props state]\n                             (prn props state)\n                             ($$ \"div\" (.-count (.-state this))))}\n                      nil))\n\n  (js/console.log MyComponent)\n\n  (rds/renderToString ($$ MyComponent {:foo \"baz\"})))\n\n(defn create-ref\n  \"Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead.\"\n\n  ([]\n   (create-ref nil))\n\n  ([initial-value]\n   (let [^js ref (react/createRef)]\n     (set! (.-current ref)\n           (specify! #js {:current initial-value}\n             IDeref\n             (-deref [^js this]\n               (.-current this))\n\n             IReset\n             (-reset! [^js this x]\n               (set! (.-current this) x))\n\n             ISwap\n             (-swap!\n               ([^js this f]\n                (set! (.-current this) (f (.-current this))))\n               ([^js this f a]\n                (set! (.-current this) (f (.-current this) a)))\n               ([^js this f a b]\n                (set! (.-current this) (f (.-current this) a b)))\n               ([^js this f a b xs]\n                (set! (.-current this) (apply f (.-current this) a b xs))))))\n     (.-current ref))))\n\n;;\n;; -- React Fast Refresh\n;;\n\n\n(defn register!\n  \"Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation.\"\n  [type id]\n  (when (exists? js/window.$$Register$$)\n    (js/window.$$Register$$ type id)))\n\n\n(defn signature! []\n  ;; grrr `maybe` bug strikes again\n  (and (exists? js/window.$$Register$$)\n       (js/window.$$Signature$$)))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["js/Symbol","cljs.core/PROTOCOL_SENTINEL","sym","writer","_","cljs.core/-write","helix.core/Fragment","js/module$node_modules$react$index.Fragment","helix.core/Suspense","js/module$node_modules$react$index.Suspense","helix.core/create-element","js/module$node_modules$react$index.createElement","helix.core/create-context","js/module$node_modules$react$index.createContext","helix.core/get-react","js/module$node_modules$react$index","helix.core/jsx","js/module$node_modules$react$jsx_runtime.jsx","helix.core/jsxs","js/module$node_modules$react$jsx_runtime.jsxs","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","helix.core/$","seq22388","G__22389","cljs.core/first","cljs.core/next","self__5754__auto__","type","args","?p","?c","cljs.core/rest","native?","or__5045__auto__","cljs.core/Keyword","cljs.core/meta","has-props?","cljs.core/map?","children*","children","cljs.core.into_array","props*","G__22405","cljs.core.conj","cljs.core.assoc","props","helix.impl.props._dom_props","helix.impl.props._props","key","emit-fn","type'","cljs.core/name","helix.core/$$","helix$core$IExtractType$_type$dyn","x__5393__auto__","m__5394__auto__","helix.core/-type","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","helix.core/IExtractType","factory","helix.core/type","f","helix.core/factory","cljs.core.apply","x22417","helix.core/cljs-factory","cljs.core.dissoc","cljs.core.get","js/undefined","x22421","helix.core/assoc-some","m","k","x","helix.core/extract-cljs-props","o","goog/DEBUG","cljs.core.ex_info","temp__5802__auto__","helix.core.goog$module$goog$object.get","cljs_bean.core.bean","helix.core/props-kvs-identical?","prev","cur","prev-props","cur-props","cljs.core._EQ_","cljs.core/count","p1__22442#","cljs.core/every?","cljs.core/keys","G__22454","helix.core/memo","js/Error","component","js/module$node_modules$react$index.memo","compare","o'","G__22465","G__22466","helix.core/create-component","spec","statics","render","render'","this","G__22472","G__22473","G__22474","helix.core.goog$module$goog$object.set","helix.impl.classes/createComponent","js/module$node_modules$react$index.Component","G__22478","helix.core/create-ref","helix.core.create_ref","initial-value","ref","js/module$node_modules$react$index.createRef","x22480","G__22485","a","G__22486","G__22487","b","G__22491","G__22492","G__22493","xs","helix.core/register!","id","js/window","js/window.$$Register$$","helix.core/signature!","and__5043__auto__","js/window.$$Signature$$"]],"~:used-vars",["^B",["~$helix.core/signature!","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$helix.core/Suspense","~$helix.core.goog$module$goog$object.set","~$helix.core/type","~$js/undefined","~$js/module$node_modules$react$index","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/into-array","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$js/window.$$Register$$","~$cljs.core/count","~$goog/typeOf","^18","~$cljs.core/apply","~$cljs.core/Keyword","~$helix.impl.props/-dom-props","~$helix.core/assoc-some","~$js/module$node_modules$react$jsx_runtime.jsx","~$cljs.core/dissoc","~$cljs-bean.core/bean","~$helix.core/factory","~$js/module$node_modules$react$index.createElement","~$js/Symbol","~$cljs.core/map?","~$cljs.core/conj","~$helix.core/create-element","~$js/module$node_modules$react$index.Suspense","~$helix.core/register!","~$helix.core.goog$module$goog$object.get","~$js/window.$$Signature$$","~$helix.core/$$","~$cljs.core/get","~$js/module$node_modules$react$index.Fragment","~$helix.core/create-context","~$js/module$node_modules$react$index.memo","~$goog/DEBUG","~$helix.core/jsxs","~$cljs.core/missing-protocol","~$cljs.core/ex-info","~$cljs.core/meta","~$helix.core/props-kvs-identical?","~$helix.core/jsx","~$cljs.core/next","~$helix.impl.props/-props","~$helix.core/create-ref","~$cljs.core/not","~$helix.core/get-react","~$helix.impl.classes/createComponent","~$cljs.core/assoc","~$helix.core/extract-cljs-props","~$js/module$node_modules$react$jsx_runtime.jsxs","~$helix.core/Fragment","~$helix.core/cljs-factory","~$helix.core/IExtractType","~$helix.core/memo","~$helix.core/-type","~$js/module$node_modules$react$index.createContext","~$cljs.core/first","~$js/window","~$js/module$node_modules$react$index.Component","~$helix.core/create-component","~$cljs.core/name","~$cljs.core/every?","~$js/Error","~$js/module$node_modules$react$index.createRef"]]],"~:cache-keys",["~#cmap",[["^25","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^1R","~$goog.dom.HtmlElement"]]],["^25","helix/impl/classes.js"],["8ff081e0a741edb0b3b3d213df7571e19e532ba1","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^25","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^47"]]],["^25","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46"]]],["^25","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^44","^47"]]],["^25","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3[",["^ ","^40",2,"^41",["^B",[0,1]],"^42",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^25","shadow/js.js"],["1ee65ad37b2c4980451f8a2979308ed6a021f431","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46"]]],"~:SHADOW-TIMESTAMP",[1703446907000,1703446907000,1701588412000],["^4>","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","1df918e8981877c2759388dfae58a059e089860d","^3[",["^ ","^40",1,"^41",["^B",[]],"^42",["^4?"]]],["^25","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","~$goog.reflect"]]],["^25","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","~$goog.fs.blob","^4:","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4<","^4="]]],["^4>","node_modules/react/cjs/react-jsx-runtime.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","9ee5fedb511e63f070206e457c8a1e5a555fc2fa","^3[",["^ ","^40",4,"^41",["^B",[2]],"^42",["^4?","^1E"]]],["^25","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","cljs_bean/core.cljs"],["48253381fc2e9a7be115de76154157bad516ea85","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^?","~$cljs-bean.from.cljs.core","^1Q"]]],["^25","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4<","~$goog.html.SafeUrl","^4=","^46","^47"]]],["^25","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4E","~$goog.html.SafeStyle","^4H","^4;","~$goog.html.uncheckedconversions","^4<","^47"]]],["^25","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","~$goog.dom.TagName","^46","~$goog.dom.element"]]],["^25","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4<","^4E","^4M","~$goog.html.SafeStyleSheet","^4H","^4O","^4;","^4=","^46","~$goog.labs.userAgent.browser","~$goog.array","^1Q","^47","~$goog.dom.tags","^4F"]]],["^25","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^1Q"]]],["^25","helix/impl/props.cljc"],["8ff081e0a741edb0b3b3d213df7571e19e532ba1","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^?","~$clojure.string","^1M","^1Q"]]],["^25","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^25","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4S","^46","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^25","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^45"]]],["^25","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^4>","node_modules/react/cjs/react-jsx-runtime.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","ed2520ac13317ed539301a6e41df9ac7f9593616","^3[",["^ ","^40",3,"^41",["^B",[2]],"^42",["^4?","^1E"]]],["^25","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",[]]],["^25","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4S","^1Q"]]],["^25","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^?","^4Y","~$goog.string.StringBuffer"]]],["^4>","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^3[",["^ ","^40",0,"^41",["^B",[]],"^42",["^4?"]]],["^25","helix/core.cljs"],["8ff081e0a741edb0b3b3d213df7571e19e532ba1","^3[",["^ ","^40",null,"^41",["^B",[2,5]],"^42",["^1R","^?","^1Q","^1L","^1S","^1M","^1E","^1G"]]],["^25","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","~$goog.dom.safe","^4N","^4<","^47"]]],["^25","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^47","^49"]]],["^25","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","~$goog.flags"]]],["^25","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4W","^4O"]]],["^25","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","^4L","^4E","^4M","^4Q","^4H","^4;","^4<","^47"]]],["^25","cljs_bean/from/cljs/core.cljs"],["48253381fc2e9a7be115de76154157bad516ea85","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^?"]]],["^25","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R"]]],["^25","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","~$goog.math.Long","~$goog.math.Integer","^4Y","^1Q","^4S","~$goog.Uri","^52"]]],["^25","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4<","^4=","^4F","^46"]]],["^25","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4<","^4M","^4=","^1Q","^46","^47"]]],["^25","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^4C"]]],["^25","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","^4Y"]]],["^25","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3[",["^ ","^40",null,"^41",["^B",[]],"^42",["^1R","^46","^4="]]],["^4>","node_modules/react/jsx-runtime.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","e0b2f53601de8bd550caf5a3e7cba1c5122ce137","^3[",["^ ","^40",5,"^41",["^B",[4,3]],"^42",["^4?","~$module$node_modules$react$cjs$react_jsx_runtime_production_min","~$module$node_modules$react$cjs$react_jsx_runtime_development"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/lilactown/helix/0.2.0/helix-0.2.0.jar!/helix/core.clj",1701644990000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/lilactown/helix/0.2.0/helix-0.2.0.jar!/helix/impl/analyzer.clj",1701644990000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/api.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/lilactown/helix/0.2.0/helix-0.2.0.jar!/helix/impl/props.cljc",1701644990000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/zip.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1700591986000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","helix/core.cljs","^7",1,"^8",5,"^9",1,"^:",15],"^;",["^ ","^<","^=","^>","^?"],"~:shadow/protocol-prefixes",["^B",["helix$core$IExtractType$"]],"^@",null,"^A",["^B",["^C"]],"^D",["^ ","^E",["^ ","^F",["^G",[[["^ ","^H",["^I","^J"],"^K","^L"],"~$&","^M"]]],"^N","Creates a Provider for a React Context value.\n\n  Example:\n\n    (def my-context (react/createContext))\n\n    (provider {:context my-context :value my-value} child1 child2 ...childN)","^7",84,"^8",1,"^6","helix/core.clj","^O","^P","^Q","^R","^S",true],"^T",["^ ","^Q","^R","^O","^U","^6","helix/core.clj","^8",1,"^7",190,"^S",true,"^V","^W","^F",["^G",[["^X","~$&","^Y"]]],"^N","Defines a new functional React component. Used like:\n\n  ```\n  (defnc component-name\n    \"Optional docstring\"\n    {,,,fn-meta}\n    [props ?ref]\n    {,,,opts-map}\n    ,,,body)\n  ```\n\n  `component-name` will now be bound in the namespace a React function component\n  that returns a React Element.\n\n\n  Your component should adhere to the following:\n\n  First parameter is 'props', a map of properties passed to the component.\n\n  Second parameter is optional and is used with `React.forwardRef`.\n\n  `fn-meta` is optional and will be merged into the metadata of the `component-name`\n  symbol. A special `:wrap` key may contain an ordered sequence of higher-order\n  components to wrap the component in.\n\n  `opts-map` is optional and can be used to pass some configuration options to the\n  macro. Current options:\n   - `:helix/features` - a map of feature flags to enable. See \"Experimental\" docs.\n\n  `body` should return a React Element."],"^Z",["^ ","^Q","^R","^O","^[","^6","helix/core.clj","^8",1,"^7",379,"^S",true,"^V",[1,"^10",[1]],"^F",["^G",[["^X","~$&","^11"]]],"^N","Defines a React class component.\n  Like `class display-name extends React.Component { ... }` in JS.\n\n  Methods are defined using (method-name [this ,,,] ,,,) syntax.\n  Properties elide the arguments vector (property-name expr)\n\n  Static properties and methods can be added by annotating the method or\n  property with metadata containing the :static keyword.\n\n  Some assumptions:\n  - To use setState, you must store the state as a JS obj\n  - The render method receives three arguments: this, a CLJS map of props,\n    and the state object.\n  - displayName by default is the symbol passed in, but can be customized\n    by manually adding it as a static property\n\n  Example:\n\n  (defcomponent foo\n   (constructor\n    [this]\n    (set! (.-state this) #js {:counter 0})))"],"^12",["^ ","^Q","^R","^O","^13","^6","helix/core.clj","^8",1,"^7",134,"^S",true,"^V","^W","^F",["^G",[["~$&","^14"]]],"^N","Creates a new anonymous function React component. Used like:\n\n  (fnc ?optional-component-name\n    [props ?forwarded-ref]\n    {,,,opts-map}\n    ,,,body)\n\n  Returns a function that can be used just like a component defined with\n  `defnc`, i.e. accepts a JS object as props and the body receives them as a\n  map, can be used with `$` macro, forwardRef, etc.\n\n  `opts-map` is optional and can be used to pass some configuration options.\n  Current options:\n   - ':wrap' - ordered sequence of higher-order components to wrap the component in\n   - ':helix/features' - a map of feature flags to enable.\n\n  Some feature flags only pertain to named components, i.e. Fast Refresh and\n  factory functions, and thus can not be used with `fnc`."],"^15",["^ ","^F",["^G",[[["^ ","^H",["^16"]],"~$&","^M"]]],"^N","Creates a React Suspense boundary.","^7",101,"^8",1,"^6","helix/core.clj","^O","^17","^Q","^R","^S",true],"~$$",["^ ","^Q","^R","^O","^18","^6","helix/core.clj","^8",1,"^7",14,"^S",true,"^V",0,"^F",["^G",[["^C","~$&","^19"]]],"^N","Create a new React element from a valid React type.\n\n  Will try to statically convert props to a JS object.\n\n  To pass in dynamic props, use the special `&` or `:&` key in the props map\n  to have the map merged in.\n\n  Simple example:\n\n  ($ my-component\n     \"child1\"\n     ($ \"span\"\n        {:style {:color \"green\"}}\n        \"child2\" ))\n\n  Dynamic exmaple:\n\n  (let [dynamic-props {:foo \"bar\"}]\n    ($ my-component\n       {:static \"prop\"\n        & dynamic-props}))\n  "],"^1:",["^ ","^Q","^R","^O","^1;","^6","helix/core.clj","^8",1,"^7",316,"^S",true,"^V","^W","^F",["^G",[["^1<","~$&","^14"]]],"^N","Defines a new custom hook function.\n  Checks for invalid usage of other hooks in the body, and other helix\n  features."],"^1=",["^ ","^Q","^R","^O","^1>","^6","helix/core.clj","^8",1,"^7",304,"^S",true,"^V","^W","^F",["^G",[["^X","~$&","^1?"]]],"^N","Same as defnc, yielding a non-public def"],"^1@",["^ ","^F",["^G",[["~$&","^M"]]],"^N","Creates a new React Fragment Element","^7",78,"^8",1,"^6","helix/core.clj","^O","^1A","^Q","^R","^S",true]],"~:shadow/js-access-properties",["^B",["$$Signature$$","createElement","Fragment","jsx","$$Register$$","createContext","Suspense","Component","createRef","jsxs","memo"]],"^O","^R","^1B",["^ "],"^1C",["^ ","^1D","^1E","^1F","^1G"],"^1I",null,"^1J",["^ ","^1K","^1L","^1G","^1G","^1M","^1M","^1N","^1M","^1O","^1E","^?","^?","^1E","^1E","^1P","^1Q","^1R","^1R","^1Q","^1Q","^1L","^1L","^1S","^1S","^1T","^1S","^1U","^1G"],"^1V",["^B",["^1W","^1X"]],"~:shadow/js-access-global",["^B",["window","Symbol","undefined","Error"]],"^1Y",null,"~:defs",["^ ","~$jsx",["^ ","^5",["^ ","^6","helix/core.cljs","^7",41,"^8",6,"^9",41,"^:",9],"^O","^3A","^6","helix/core.cljs","^:",9,"^8",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^G",["~$def","^66","~$jsx-runtime/jsx"]]],"^7",41,"^9",41,"~:tag","~$js"],"~$$$",["^ ","^5",["^ ","^6","helix/core.cljs","^7",88,"^8",19,"^9",88,"^:",21,"~:deprecated",true],"^O","^36","^6","helix/core.cljs","^:",21,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6;","^6?","Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \"child1\"\n   ($$ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```","~$$"]]],"^7",88,"^6@",true,"^9",88,"^N","Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \"child1\"\n   ($$ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```"],"~$create-context",["^ ","^5",["^ ","^6","helix/core.cljs","^7",32,"^8",6,"^9",32,"^:",20],"^O","^39","^6","helix/core.cljs","^:",20,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6;","^6A","React.createContext","~$react/createContext"]]],"^7",32,"^9",32,"^6=","^6>","^N","React.createContext"],"~$memo",["^ ","~:protocol-inline",null,"^5",["^ ","^6","helix/core.cljs","^7",184,"^8",7,"^9",184,"^:",11,"^F",["^G",["~$quote",["^G",[["~$component"],["^6F","~$compare"]]]]],"^N","Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^6F"],["^6F","^6G"]],"^F",["^G",[["^6F"],["^6F","^6G"]]],"~:arglists-meta",["^G",[null,null]]]],"^O","^3N","^6","helix/core.cljs","^:",11,"^6H",["^ ","^6I",false,"^6J",2,"^6K",2,"^6L",[["^6F"],["^6F","^6G"]],"^F",["^G",[["^6F"],["^6F","^6G"]]],"^6M",["^G",[null,null]]],"^6L",[["^6F"],["^6F","^6G"]],"~:protocol-impl",null,"^6J",2,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["~$defn","^6C","Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.",["^G",[["^6F"],["^G",["~$react/memo","^6F","~$props-kvs-identical?"]]]],["^G",[["^6F","^6G"],["^G",["^6P","^6F",["^G",["~$fn","~$memo-compare",["~$o","~$o'"],["^G",["^6G",["^G",["~$extract-cljs-props","~$o"]],["^G",["^6U","^6T"]]]]]]]]]]]]],"^6I",false,"~:methods",[["^ ","^6J",1,"^6I",false,"^6=","^6>"],["^ ","^6J",2,"^6I",false,"^6=","^6>"]],"^7",184,"^9",184,"^6K",2,"~:fn-var",true,"^F",["^G",[["^6F"],["^6F","^6G"]]],"^N","Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not."],"~$IExtractType",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","helix/core.cljs","^:",26,"^8",14,"^7",105,"~:protocol-info",["^ ","^6V",["^ ","~$-type",[["~$factory"]]]],"^9",105,"~:sigs",["^ ","~:-type",["^ ","^O","^6[","^F",["^G",[["^70"]]],"^N","Extracts the underlying type from the factory function."]],"~:jsdoc",["^G",["@interface"]]],"^6Y",true,"^O","^3M","^6","helix/core.cljs","^:",26,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["~$defprotocol","^6X",["^G",["^6[",["^70"],"Extracts the underlying type from the factory function."]]]]],"^7",105,"^6Z",["^ ","^6V",["^ ","^6[",[["^70"]]]],"~:info",null,"^9",105,"^6=","~$any","^71",["^ ","^72",["^ ","^O","^6[","^F",["^G",[["^70"]]],"^N","Extracts the underlying type from the factory function."]],"~:impls",["^B",["~$x22417","~$x22421"]],"^73",["^G",["@interface"]]],"~$jsxs",["^ ","^5",["^ ","^6","helix/core.cljs","^7",42,"^8",6,"^9",42,"^:",10],"^O","^3<","^6","helix/core.cljs","^:",10,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6;","^7:","~$jsx-runtime/jsxs"]]],"^7",42,"^9",42,"^6=","^6>"],"^6Q",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",174,"^8",8,"^9",174,"^:",28,"~:private",true,"^F",["^G",["^6E",["^G",[["~$prev","~$cur"]]]]]],"^7<",true,"^O","^3@","^6","helix/core.cljs","^:",28,"^6L",["^G",[["^7=","^7>"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["~$defn-","^6Q",["^7=","^7>"],["^G",["~$let",["~$prev-props",["^G",["^6U","^7="]],"~$cur-props",["^G",["^6U","^7>"]]],["^G",["~$and",["^G",["~$=",["^G",["~$count","^7A"]],["^G",["^7D","^7B"]]]],["^G",["~$every?",["^G",["~$fn*",["~$p1__22442#"],["^G",["~$identical?",["^G",["~$get","^7A","^7G"]],["^G",["^7I","^7B","^7G"]]]]]],["^G",["~$keys","^7B"]]]]]]]]]]],"^6I",false,"^7",174,"~:ret-tag","~$boolean","^9",174,"^6K",2,"^6W",true,"^F",["^G",["^6E",["^G",[["^7=","^7>"]]]]]],"~$create-ref",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",234,"^8",7,"^9",234,"^:",17,"^F",["^G",["^6E",["^G",[[],["~$initial-value"]]]]],"^N","Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead.","^6H",["^ ","^6I",false,"^6J",1,"^6K",1,"^6L",[[],["^7N"]],"^F",["^G",[[],["^7N"]]],"^6M",["^G",[null,null]]]],"^O","^3D","^6","helix/core.cljs","^:",17,"^6H",["^ ","^6I",false,"^6J",1,"^6K",1,"^6L",[[],["^7N"]],"^F",["^G",[[],["^7N"]]],"^6M",["^G",[null,null]]],"^6L",[[],["^7N"]],"^6N",null,"^6J",1,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^7M","Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead.",["^G",[[],["^G",["^7M",null]]]],["^G",[["^7N"],["^G",["^7@",["~$ref",["^G",["~$react/createRef"]]],["^G",["~$set!",["^G",["~$.-current","^7O"]],["^G",["~$specify!",["~#js-value",["^ ","~:current","^7N"]],"~$IDeref",["^G",["~$-deref",["~$this"],["^G",["^7R","^7X"]]]],"~$IReset",["^G",["~$-reset!",["^7X","~$x"],["^G",["^7Q",["^G",["^7R","^7X"]],"~$x"]]]],"~$ISwap",["^G",["~$-swap!",["^G",[["^7X","~$f"],["^G",["^7Q",["^G",["^7R","^7X"]],["^G",["~$f",["^G",["^7R","^7X"]]]]]]]],["^G",[["^7X","~$f","~$a"],["^G",["^7Q",["^G",["^7R","^7X"]],["^G",["~$f",["^G",["^7R","^7X"]],"~$a"]]]]]],["^G",[["^7X","~$f","~$a","~$b"],["^G",["^7Q",["^G",["^7R","^7X"]],["^G",["~$f",["^G",["^7R","^7X"]],"~$a","~$b"]]]]]],["^G",[["^7X","~$f","~$a","~$b","~$xs"],["^G",["^7Q",["^G",["^7R","^7X"]],["^G",["~$apply","~$f",["^G",["^7R","^7X"]],"~$a","~$b","^81"]]]]]]]]]]]],["^G",["^7R","^7O"]]]]]]]]],"^6I",false,"^6V",[["^ ","^6J",0,"^6I",false,"^6=","^76"],["^ ","^6J",1,"^6I",false,"^6=","^6>"]],"^7",234,"^9",234,"^6K",1,"^6W",true,"^F",["^G",[[],["^7N"]]],"^N","Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead."],"~$get-react",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",39,"^8",17,"^9",39,"^:",26,"^6=","~$js/React","^F",["^G",["^6E",["^G",[[]]]]]],"^O","^3F","^6","helix/core.cljs","^:",26,"^6L",["^G",[[]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^83",[],"^1O"]]],"^6I",false,"^7",39,"^7K","^84","^9",39,"^6K",0,"^6=","^84","^6W",true,"^F",["^G",["^6E",["^G",[[]]]]]],"~$create-component",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",206,"^8",7,"^9",206,"^:",23,"^F",["^G",["^6E",["^G",[["^11","~$statics"]]]]],"^N","Helper function for creating a class component. See `defcomponent`."],"^O","^3T","^6","helix/core.cljs","^:",23,"^6L",["^G",[["^11","^86"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^85","Helper function for creating a class component. See `defcomponent`.",["^11","^86"],["^G",["^7@",["~$render",["^G",["~$.-render","^11"]],"~$render'",["^G",["^6R",["^7X"],["^G",["^87","^7X",["^G",["^6U",["^G",["~$.-props","^7X"]]]],["^G",["~$.-state","^7X"]]]]]]],["^G",["~$gobj/set","^11","render","^89"]],["^G",["~$helix.class/createComponent","~$react/Component","^11","^86"]]]]]]],"^6I",false,"^7",206,"^7K","^6>","^9",206,"^6K",2,"^6W",true,"^F",["^G",["^6E",["^G",[["^11","^86"]]]]],"^N","Helper function for creating a class component. See `defcomponent`."],"~$Fragment",["^ ","^5",["^ ","^6","helix/core.cljs","^7",19,"^8",6,"^9",19,"^:",14],"^O","^3K","^6","helix/core.cljs","^:",14,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6;","^8?","React.Fragment. See `helix.core/<>` for macro version.","~$react/Fragment"]]],"^7",19,"^9",19,"^6=","^6>","^N","React.Fragment. See `helix.core/<>` for macro version."],"^6U",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",161,"^8",7,"^9",161,"^:",25,"^F",["^G",["^6E",["^G",[["~$o"]]]]],"^N","A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \"helix/props\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC."],"^O","^3I","^6","helix/core.cljs","^:",25,"^6L",["^G",[["~$o"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^6U","A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \"helix/props\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC.",["~$o"],["^G",["~$when",["^G",["^7C","^3;",["^G",["~$or",["^G",["~$map?","~$o"]],["^G",["~$nil?","~$o"]]]]]],["^G",["~$throw",["^G",["~$ex-info","Props received were a map. This probably means you're calling your component as a function.",["^ ","~:props","~$o"]]]]]]],["^G",["~$if-let",["^L",["^G",["~$gobj/get","~$o","helix/props"]]],["^G",["~$assoc-some","^L","~:children",["^G",["^8I","~$o","children"]]]],["^G",["~$bean/bean","~$o"]]]]]]],"^6I",false,"^7",161,"^7K",["^B",[null,"~$clj","^76","~$cljs-bean.core/Bean"]],"^9",161,"^6K",1,"^6W",true,"^F",["^G",["^6E",["^G",[["~$o"]]]]],"^N","A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \"helix/props\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC."],"~$cljs-factory",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",128,"^8",7,"^9",128,"^:",19,"^F",["^G",["^6E",["^G",[["^C"]]]]],"^N","Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with."],"^O","^3L","^6","helix/core.cljs","^:",19,"^6L",["^G",[["^C"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^8O","Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with.",["^C"],["^G",["~$->",["^G",["^6R","^70",["~$&","^19"],["^G",["~$if",["^G",["^8C",["^G",["~$first","^19"]]]],["^G",["^7@",["^L",["^G",["^8R","^19"]]],["^G",["^82","~$react/createElement","^C",["^7T",["^ ","helix/props",["^G",["~$dissoc","^L","~:key","~:ref"]],"key",["^G",["^7I","^L","^8V","^2G"]],"ref",["^G",["^7I","^L","^8W","^2G"]]]],["^G",["^1?","^19"]]]]]],["^G",["^82","^8S","^C",["^7T",["^ "]],"^19"]]]]]],["^G",["^7S","^6X",["^G",["^6[",["~$_"],"^C"]]]]]]]]],"^6I",false,"^7",128,"^7K","~$function","^9",128,"^6K",1,"^6W",true,"^F",["^G",["^6E",["^G",[["^C"]]]]],"^N","Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with."],"^6[",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",106,"^8",4,"^9",106,"^:",9,"~:protocol","^3M","^N","Extracts the underlying type from the factory function.","^F",["^G",["^6E",["^G",[["^70"]]]]]],"^8Y","^3M","^O","^3O","^6","helix/core.cljs","^:",9,"^6L",["^G",[["^70"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^74","^6X",["^G",["^6[",["^70"],"Extracts the underlying type from the factory function."]]]]],"^6I",false,"^7",105,"^7K","^76","^9",106,"^6K",1,"^6W",true,"^F",["^G",["^6E",["^G",[["^70"]]]]],"^N","Extracts the underlying type from the factory function."],"~$Suspense",["^ ","^5",["^ ","^6","helix/core.cljs","^7",24,"^8",6,"^9",24,"^:",14],"^O","^2D","^6","helix/core.cljs","^:",14,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6;","^8Z","React.Suspense. See `helix.core/suspense` for macro version.","~$react/Suspense"]]],"^7",24,"^9",24,"^6=","^6>","^N","React.Suspense. See `helix.core/suspense` for macro version."],"~$signature!",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",282,"^8",7,"^9",282,"^:",17,"^F",["^G",["^6E",["^G",[[]]]]]],"^O","^2A","^6","helix/core.cljs","^:",17,"^6L",["^G",[[]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^90",[],["^G",["^7C",["^G",["~$exists?","^2N"]],["^G",["^35"]]]]]]],"^6I",false,"^7",282,"^7K",["^B",["^7L","^6>"]],"^9",282,"^6K",0,"^6W",true,"^F",["^G",["^6E",["^G",[[]]]]]],"^C",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",109,"^8",7,"^9",109,"^:",11,"^F",["^G",["^6E",["^G",[["~$f"]]]]],"^N","Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of."],"^O","^2F","^6","helix/core.cljs","^:",11,"^6L",["^G",[["~$f"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^C","Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of.",["~$f"],["^G",["^6[","~$f"]]]]],"^6I",false,"^7",109,"^7K","^76","^9",109,"^6K",1,"^6W",true,"^F",["^G",["^6E",["^G",[["~$f"]]]]],"^N","Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of."],"~$$",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^:",8,"^6H",["^ ","^6I",true,"^6J",1,"^6K",1,"^6L",[["^G",["^C","^19"]]],"^F",["^G",[["^C","~$&","^19"]]],"^6M",["^G",[null]]],"^8",7,"^7",44,"^V",0,"^9",44,"^F",["^G",["^6E",["^G",[["^C","~$&","^19"]]]]],"^N","Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \"child1\"\n   ($ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```"],"^O","^18","^6","helix/core.cljs","^:",8,"^6H",["^ ","^6I",true,"^6J",1,"^6K",1,"^6L",[["^G",["^C","^19"]]],"^F",["^G",[["^C","~$&","^19"]]],"^6M",["^G",[null]]],"^6L",[["^G",["^C","^19"]]],"^6N",null,"^6J",1,"^6M",["^G",[null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","~$$","Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \"child1\"\n   ($ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```",["^ ","^V",0],["^C","~$&","^19"],["^G",["^7@",["~$?p",["^G",["^8R","^19"]],"~$?c",["^G",["^1?","^19"]],"~$native?",["^G",["^8B",["^G",["~$keyword?","^C"]],["^G",["~$string?","^C"]],["^G",["~:native",["^G",["~$meta","^C"]]]]]],"~$has-props?",["^G",["^8B",["^G",["^8C","^92"]],["^G",["^8D","^92"]]]],"~$children*",["^G",["^8Q","^99","^93","^19"]],"^M",["^G",["^8Q",["^G",["~$next","^9:"]],["^G",["~$into-array","^9:"]],["^G",["^8R","^9:"]]]],"~$props*",["^G",["~$cond->",["^ "],"^99",["^G",["~$conj","^92"]],["^G",["~$some?","^M"]],["^G",["~$assoc","^8K","^M"]]]],"^L",["^G",["^8Q","^94",["^G",["~$impl.props/-dom-props","^9="]],["^G",["~$impl.props/-props","^9="]]]],"~$key",["^G",["^8V","^9="]],"~$emit-fn",["^G",["^8Q",["^G",["^9;","^9:"]],"^7:","^66"]],"~$type'",["^G",["^8Q",["^G",["^95","^C"]],["^G",["~$name","^C"]],"^C"]]],["^G",["^8Q",["^G",["^9@","^9D"]],["^G",["^9E","^9F","^L","^9D"]],["^G",["^9E","^9F","^L"]]]]]]]]],"^6I",true,"^6V",[["^ ","^6J",1,"^6I",true,"^6=","^76"]],"^7",44,"^7K","^76","^V",0,"^9",44,"^6K",1,"^6W",true,"^F",["^G",[["^C","~$&","^19"]]],"^N","Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \"child1\"\n   ($ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```"],"^70",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",116,"^8",7,"^9",116,"^:",14,"^F",["^G",["^6E",["^G",[["^C"]]]]],"^N","Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component."],"^O","^2X","^6","helix/core.cljs","^:",14,"^6L",["^G",[["^C"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^70","Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component.",["^C"],["^G",["^8P",["^G",["^6R","^70",["~$&","^19"],["^G",["^82","~$$","^C","^19"]]]],["^G",["^7S","^6X",["^G",["^6[",["~$_"],"^C"]]]]]]]]],"^6I",false,"^7",116,"^7K","^8X","^9",116,"^6K",1,"^6W",true,"^F",["^G",["^6E",["^G",[["^C"]]]]],"^N","Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component."],"^8J",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",155,"^8",8,"^9",155,"^:",18,"^7<",true,"^F",["^G",["^6E",["^G",[["~$m","~$k","~$x"]]]]]],"^7<",true,"^O","^2T","^6","helix/core.cljs","^:",18,"^6L",["^G",[["~$m","~$k","~$x"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^7?","^8J",["~$m","~$k","~$x"],["^G",["^8Q",["^G",["^9@","~$x"]],["^G",["^9A","~$m","~$k","~$x"]],"~$m"]]]]],"^6I",false,"^7",155,"^7K",["^B",[null,"^8M","^76"]],"^9",155,"^6K",3,"^6W",true,"^F",["^G",["^6E",["^G",[["~$m","~$k","~$x"]]]]]],"~$create-element",["^ ","^5",["^ ","^6","helix/core.cljs","^7",29,"^8",6,"^9",29,"^:",20],"^O","^31","^6","helix/core.cljs","^:",20,"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6;","^9H","^8S"]]],"^7",29,"^9",29,"^6=","^6>"],"~$register!",["^ ","^6D",null,"^5",["^ ","^6","helix/core.cljs","^7",273,"^8",7,"^9",273,"^:",16,"^F",["^G",["^6E",["^G",[["^C","~$id"]]]]],"^N","Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation."],"^O","^33","^6","helix/core.cljs","^:",16,"^6L",["^G",[["^C","^9J"]]],"^6N",null,"^6M",["^G",[null,null]],"^8",1,"^67",["^ ","^68","^69","^6:",["^G",["^6O","^9I","Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation.",["^C","^9J"],["^G",["^8A",["^G",["^91","^2N"]],["^G",["^2N","^C","^9J"]]]]]]],"^6I",false,"^7",273,"^7K",["^B",["^6>","~$clj-nil"]],"^9",273,"^6K",2,"^6W",true,"^F",["^G",["^6E",["^G",[["^C","^9J"]]]]],"^N","Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation."]],"^1X",["^ ","^R","^R","^?","^?","^1K","^1L","^1L","^1L"],"~:cljs.analyzer/constants",["^ ","^1V",["^B",["^8K","^8V","^8W","^97","^8G"]],"~:order",["^97","^8K","^8V","^8W","^8G"]],"^21",["^ ","^1W",["^B",[]],"^1X",["^B",[]]],"^22",["^ ","^1D",["^ ","^K","^1O"],"^1F",["^ ","^K","^1U"]],"^23",["^1R","^?","^1Q","^1L","^1S","^1M","^1E","^1G"]],"^Q","^R","~:ns-specs",["^ "],"~:ns-spec-vars",["^B",[]],"~:compiler-options",["^3Z",[["^9P","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^9P","~:shadow-tweaks"],null,["^9P","~:source-map-inline"],null,["^9P","~:elide-asserts"],true,["^9P","~:optimize-constants"],null,["^9P","^28"],null,["^9P","~:external-config"],null,["^9P","~:tooling-config"],null,["^9P","~:emit-constants"],null,["^9P","~:load-tests"],false,["^9P","~:form-size-threshold"],null,["^9P","~:global-goog-object&array"],null,["^9P","~:data-readers"],null,["^9P","~:infer-externs"],"~:auto",["^9P","^2:"],null,["^9R","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^9P","~:fn-invoke-direct"],null,["^9P","~:source-map"],null]]]