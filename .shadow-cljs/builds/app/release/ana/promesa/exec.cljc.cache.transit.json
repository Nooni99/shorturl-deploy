["^ ","~:output",["^ ","~:js","goog.provide('promesa.exec');\r\ngoog.scope(function(){\r\n  promesa.exec.goog$module$goog$object = goog.module.get('goog.object');\r\n});\r\npromesa.exec._STAR_default_scheduler_STAR_ = null;\r\npromesa.exec._STAR_default_executor_STAR_ = null;\r\n/**\r\n * Var that indicates the availability of virtual threads.\r\n */\r\npromesa.exec.virtual_threads_available_QMARK_ = false;\r\n/**\r\n * backward compatibility alias for `virtual-threads-available?`\r\n */\r\npromesa.exec.vthread_supported_QMARK_ = promesa.exec.virtual_threads_available_QMARK_;\r\npromesa.exec.noop = cljs.core.constantly(null);\r\n/**\r\n * Default scheduled executor instance.\r\n */\r\npromesa.exec.default_scheduler = (new cljs.core.Delay((function (){\r\nreturn (promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.scheduled_executor.call(null));\r\n}),null));\r\n/**\r\n * Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\r\n */\r\npromesa.exec.default_executor = (new cljs.core.Delay((function (){\r\nreturn (promesa.exec.microtask_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.microtask_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.microtask_executor.call(null));\r\n}),null));\r\n/**\r\n * Default Executor instance that runs the task in the same thread.\r\n */\r\npromesa.exec.default_current_thread_executor = (new cljs.core.Delay((function (){\r\nreturn (promesa.exec.current_thread_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.current_thread_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.current_thread_executor.call(null));\r\n}),null));\r\n/**\r\n * A global, cached thread executor service.\r\n */\r\npromesa.exec.default_cached_executor = promesa.exec.default_executor;\r\n/**\r\n * A global, thread per task executor service.\r\n */\r\npromesa.exec.default_thread_executor = promesa.exec.default_executor;\r\n/**\r\n * A global, virtual thread per task executor service.\r\n */\r\npromesa.exec.default_vthread_executor = promesa.exec.default_executor;\r\n/**\r\n * Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\r\n */\r\npromesa.exec.executor_QMARK_ = (function promesa$exec$executor_QMARK_(o){\r\nif((!((o == null)))){\r\nif(((false) || ((cljs.core.PROTOCOL_SENTINEL === o.promesa$protocols$IExecutor$)))){\r\nreturn true;\r\n} else {\r\nif((!o.cljs$lang$protocol_mask$partition$)){\r\nreturn cljs.core.native_satisfies_QMARK_(promesa.protocols.IExecutor,o);\r\n} else {\r\nreturn false;\r\n}\r\n}\r\n} else {\r\nreturn cljs.core.native_satisfies_QMARK_(promesa.protocols.IExecutor,o);\r\n}\r\n});\r\npromesa.exec.resolve_executor = (function promesa$exec$resolve_executor(var_args){\r\nvar G__22872 = arguments.length;\r\nswitch (G__22872) {\r\ncase 0:\r\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(null);\r\n}));\r\n\r\n(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1 = (function (executor){\r\nif((executor == null)){\r\nreturn cljs.core.deref(promesa.exec.default_executor);\r\n} else {\r\nif(promesa.exec.executor_QMARK_(executor)){\r\nreturn executor;\r\n} else {\r\nif(cljs.core.delay_QMARK_(executor)){\r\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(executor));\r\n} else {\r\nvar G__22876 = executor;\r\nvar G__22876__$1 = (((G__22876 instanceof cljs.core.Keyword))?G__22876.fqn:null);\r\nswitch (G__22876__$1) {\r\ncase \"default\":\r\nreturn cljs.core.deref(promesa.exec.default_executor);\r\n\r\nbreak;\r\ncase \"cached\":\r\nreturn cljs.core.deref(promesa.exec.default_cached_executor);\r\n\r\nbreak;\r\ncase \"thread\":\r\nreturn cljs.core.deref(promesa.exec.default_thread_executor);\r\n\r\nbreak;\r\ncase \"vthread\":\r\nreturn cljs.core.deref(promesa.exec.default_vthread_executor);\r\n\r\nbreak;\r\ncase \"same-thread\":\r\nreturn cljs.core.deref(promesa.exec.default_current_thread_executor);\r\n\r\nbreak;\r\ncase \"current-thread\":\r\nreturn cljs.core.deref(promesa.exec.default_current_thread_executor);\r\n\r\nbreak;\r\ndefault:\r\nthrow (new TypeError(\"invalid executor\"));\r\n\r\n}\r\n\r\n}\r\n}\r\n}\r\n}));\r\n\r\n(promesa.exec.resolve_executor.cljs$lang$maxFixedArity = 1);\r\n\r\npromesa.exec.resolve_scheduler = (function promesa$exec$resolve_scheduler(var_args){\r\nvar G__22888 = arguments.length;\r\nswitch (G__22888) {\r\ncase 0:\r\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1(null);\r\n}));\r\n\r\n(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1 = (function (scheduler){\r\nif((((scheduler == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),scheduler)))){\r\nreturn cljs.core.deref(promesa.exec.default_scheduler);\r\n} else {\r\nreturn promesa.util.maybe_deref(scheduler);\r\n}\r\n}));\r\n\r\n(promesa.exec.resolve_scheduler.cljs$lang$maxFixedArity = 1);\r\n\r\npromesa.exec.wrap_bindings = (function promesa$exec$wrap_bindings(f){\r\nreturn f;\r\n});\r\n/**\r\n * Run the task in the provided executor, returns `nil`. Analogous to\r\n *   the `(.execute executor f)`. Fire and forget.\r\n */\r\npromesa.exec.exec_BANG_ = (function promesa$exec$exec_BANG_(var_args){\r\nvar G__22905 = arguments.length;\r\nswitch (G__22905) {\r\ncase 1:\r\nreturn promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn promesa.protocols._exec_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\r\n}));\r\n\r\n(promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\r\nreturn promesa.protocols._exec_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\r\n}));\r\n\r\n(promesa.exec.exec_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Run the task in the provided executor.\r\n */\r\npromesa.exec.run_BANG_ = (function promesa$exec$run_BANG_(var_args){\r\nvar G__22915 = arguments.length;\r\nswitch (G__22915) {\r\ncase 1:\r\nreturn promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn promesa.protocols._run_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\r\n}));\r\n\r\n(promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\r\nreturn promesa.protocols._run_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\r\n}));\r\n\r\n(promesa.exec.run_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Submit a task to be executed in a provided executor\r\n *   and return a promise that will be completed with\r\n *   the return value of a task.\r\n * \r\n *   A task is a plain clojure function.\r\n */\r\npromesa.exec.submit_BANG_ = (function promesa$exec$submit_BANG_(var_args){\r\nvar G__22925 = arguments.length;\r\nswitch (G__22925) {\r\ncase 1:\r\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn promesa.protocols._submit_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\r\n}));\r\n\r\n(promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\r\nreturn promesa.protocols._submit_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\r\n}));\r\n\r\n(promesa.exec.submit_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Schedule a callable to be executed after the `ms` delay\r\n *   is reached.\r\n * \r\n *   In JVM it uses a scheduled executor service and in JS\r\n *   it uses the `setTimeout` function.\r\n */\r\npromesa.exec.schedule_BANG_ = (function promesa$exec$schedule_BANG_(var_args){\r\nvar G__22940 = arguments.length;\r\nswitch (G__22940) {\r\ncase 2:\r\nreturn promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (ms,f){\r\nreturn promesa.protocols._schedule_BANG_(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0(),ms,f);\r\n}));\r\n\r\n(promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (scheduler,ms,f){\r\nreturn promesa.protocols._schedule_BANG_(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1(scheduler),ms,f);\r\n}));\r\n\r\n(promesa.exec.schedule_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n\r\n/**\r\n* @constructor\r\n * @implements {promesa.protocols.IExecutor}\r\n * @implements {cljs.core.IMeta}\r\n * @implements {cljs.core.IWithMeta}\r\n*/\r\npromesa.exec.t_promesa$exec22961 = (function (meta22962){\r\nthis.meta22962 = meta22962;\r\nthis.cljs$lang$protocol_mask$partition0$ = 393216;\r\nthis.cljs$lang$protocol_mask$partition1$ = 0;\r\n});\r\n(promesa.exec.t_promesa$exec22961.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_22963,meta22962__$1){\r\nvar self__ = this;\r\nvar _22963__$1 = this;\r\nreturn (new promesa.exec.t_promesa$exec22961(meta22962__$1));\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec22961.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_22963){\r\nvar self__ = this;\r\nvar _22963__$1 = this;\r\nreturn self__.meta22962;\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec22961.prototype.promesa$protocols$IExecutor$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(promesa.exec.t_promesa$exec22961.prototype.promesa$protocols$IExecutor$_exec_BANG_$arity$2 = (function (this$,f){\r\nvar self__ = this;\r\nvar this$__$1 = this;\r\ntry{(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\r\n\r\nreturn null;\r\n}catch (e22974){var _ = e22974;\r\nreturn null;\r\n}}));\r\n\r\n(promesa.exec.t_promesa$exec22961.prototype.promesa$protocols$IExecutor$_run_BANG_$arity$2 = (function (this$,f){\r\nvar self__ = this;\r\nvar this$__$1 = this;\r\ntry{return promesa.protocols._promise(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(promesa.exec.noop,f));\r\n}catch (e22976){var cause = e22976;\r\nreturn promesa.protocols._promise(cause);\r\n}}));\r\n\r\n(promesa.exec.t_promesa$exec22961.prototype.promesa$protocols$IExecutor$_submit_BANG_$arity$2 = (function (this$,f){\r\nvar self__ = this;\r\nvar this$__$1 = this;\r\ntry{return promesa.protocols._promise((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)));\r\n}catch (e22979){var cause = e22979;\r\nreturn promesa.protocols._promise(cause);\r\n}}));\r\n\r\n(promesa.exec.t_promesa$exec22961.getBasis = (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"meta22962\",\"meta22962\",-1166392909,null)], null);\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec22961.cljs$lang$type = true);\r\n\r\n(promesa.exec.t_promesa$exec22961.cljs$lang$ctorStr = \"promesa.exec/t_promesa$exec22961\");\r\n\r\n(promesa.exec.t_promesa$exec22961.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\r\nreturn cljs.core._write(writer__5331__auto__,\"promesa.exec/t_promesa$exec22961\");\r\n}));\r\n\r\n/**\r\n * Positional factory function for promesa.exec/t_promesa$exec22961.\r\n */\r\npromesa.exec.__GT_t_promesa$exec22961 = (function promesa$exec$__GT_t_promesa$exec22961(meta22962){\r\nreturn (new promesa.exec.t_promesa$exec22961(meta22962));\r\n});\r\n\r\n\r\n/**\r\n * Creates an executor instance that run tasks in the same thread.\r\n */\r\npromesa.exec.current_thread_executor = (function promesa$exec$current_thread_executor(){\r\nreturn (new promesa.exec.t_promesa$exec22961(cljs.core.PersistentArrayMap.EMPTY));\r\n});\r\n\r\n/**\r\n* @constructor\r\n * @implements {promesa.protocols.IExecutor}\r\n * @implements {cljs.core.IMeta}\r\n * @implements {cljs.core.IWithMeta}\r\n*/\r\npromesa.exec.t_promesa$exec23015 = (function (meta23016){\r\nthis.meta23016 = meta23016;\r\nthis.cljs$lang$protocol_mask$partition0$ = 393216;\r\nthis.cljs$lang$protocol_mask$partition1$ = 0;\r\n});\r\n(promesa.exec.t_promesa$exec23015.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_23017,meta23016__$1){\r\nvar self__ = this;\r\nvar _23017__$1 = this;\r\nreturn (new promesa.exec.t_promesa$exec23015(meta23016__$1));\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec23015.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_23017){\r\nvar self__ = this;\r\nvar _23017__$1 = this;\r\nreturn self__.meta23016;\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec23015.prototype.promesa$protocols$IExecutor$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(promesa.exec.t_promesa$exec23015.prototype.promesa$protocols$IExecutor$_exec_BANG_$arity$2 = (function (this$,f){\r\nvar self__ = this;\r\nvar this$__$1 = this;\r\nreturn promesa.impl.promise.nextTick(f);\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec23015.prototype.promesa$protocols$IExecutor$_run_BANG_$arity$2 = (function (this$,f){\r\nvar self__ = this;\r\nvar this$__$1 = this;\r\nreturn promesa.protocols._fmap(promesa.protocols._fmap(promesa.protocols._promise(null),(function (_){\r\ntry{return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\r\n}catch (e23069){var ___$1 = e23069;\r\nreturn null;\r\n}})),promesa.exec.noop);\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec23015.prototype.promesa$protocols$IExecutor$_submit_BANG_$arity$2 = (function (this$,f){\r\nvar self__ = this;\r\nvar this$__$1 = this;\r\nreturn promesa.protocols._fmap(promesa.protocols._promise(null),(function (_){\r\nreturn (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\r\n}));\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec23015.getBasis = (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"meta23016\",\"meta23016\",-1036508044,null)], null);\r\n}));\r\n\r\n(promesa.exec.t_promesa$exec23015.cljs$lang$type = true);\r\n\r\n(promesa.exec.t_promesa$exec23015.cljs$lang$ctorStr = \"promesa.exec/t_promesa$exec23015\");\r\n\r\n(promesa.exec.t_promesa$exec23015.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\r\nreturn cljs.core._write(writer__5331__auto__,\"promesa.exec/t_promesa$exec23015\");\r\n}));\r\n\r\n/**\r\n * Positional factory function for promesa.exec/t_promesa$exec23015.\r\n */\r\npromesa.exec.__GT_t_promesa$exec23015 = (function promesa$exec$__GT_t_promesa$exec23015(meta23016){\r\nreturn (new promesa.exec.t_promesa$exec23015(meta23016));\r\n});\r\n\r\n\r\n/**\r\n * An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\r\n */\r\npromesa.exec.microtask_executor = (function promesa$exec$microtask_executor(){\r\nreturn (new promesa.exec.t_promesa$exec23015(cljs.core.PersistentArrayMap.EMPTY));\r\n});\r\n\r\n/**\r\n* @constructor\r\n * @implements {promesa.protocols.IScheduler}\r\n*/\r\npromesa.exec.Scheduler = (function (){\r\n});\r\n(promesa.exec.Scheduler.prototype.promesa$protocols$IScheduler$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(promesa.exec.Scheduler.prototype.promesa$protocols$IScheduler$_schedule_BANG_$arity$3 = (function (_,ms,f){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nvar df = promesa.impl.promise.deferred();\r\nvar tid = setTimeout((function (){\r\ntry{return promesa.protocols._resolve_BANG_(df,(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)));\r\n}catch (e23070){var cause = e23070;\r\nreturn promesa.protocols._reject_BANG_(df,cause);\r\n}}),ms);\r\npromesa.protocols._fnly(df,(function (___$2,c){\r\nif(cljs.core.truth_(promesa.impl.promise.isCancellationError(c))){\r\nreturn clearTimeout(tid);\r\n} else {\r\nreturn null;\r\n}\r\n}));\r\n\r\nreturn df;\r\n}));\r\n\r\n(promesa.exec.Scheduler.getBasis = (function (){\r\nreturn cljs.core.PersistentVector.EMPTY;\r\n}));\r\n\r\n(promesa.exec.Scheduler.cljs$lang$type = true);\r\n\r\n(promesa.exec.Scheduler.cljs$lang$ctorStr = \"promesa.exec/Scheduler\");\r\n\r\n(promesa.exec.Scheduler.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\r\nreturn cljs.core._write(writer__5331__auto__,\"promesa.exec/Scheduler\");\r\n}));\r\n\r\n/**\r\n * Positional factory function for promesa.exec/Scheduler.\r\n */\r\npromesa.exec.__GT_Scheduler = (function promesa$exec$__GT_Scheduler(){\r\nreturn (new promesa.exec.Scheduler());\r\n});\r\n\r\n/**\r\n * A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\r\n *   in CLJS) instance allows execute asynchronous tasks some time later.\r\n */\r\npromesa.exec.scheduled_executor = (function promesa$exec$scheduled_executor(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___23132 = arguments.length;\r\nvar i__5770__auto___23133 = (0);\r\nwhile(true){\r\nif((i__5770__auto___23133 < len__5769__auto___23132)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___23133]));\r\n\r\nvar G__23134 = (i__5770__auto___23133 + (1));\r\ni__5770__auto___23133 = G__23134;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\r\nreturn promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\r\n});\r\n\r\n(promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$variadic = (function (p__23078){\r\nvar map__23079 = p__23078;\r\nvar map__23079__$1 = cljs.core.__destructure_map(map__23079);\r\nvar parallelism = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__23079__$1,new cljs.core.Keyword(null,\"parallelism\",\"parallelism\",-930922333),(1));\r\nvar factory = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__23079__$1,new cljs.core.Keyword(null,\"factory\",\"factory\",63933746));\r\nreturn promesa.exec.__GT_Scheduler();\r\n}));\r\n\r\n(promesa.exec.scheduled_executor.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(promesa.exec.scheduled_executor.cljs$lang$applyTo = (function (seq23076){\r\nvar self__5755__auto__ = this;\r\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq23076));\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Executors & Schedulers facilities.","~:file","promesa/exec.cljc","~:line",7,"~:column",5,"~:end-line",7,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$await","~$pmap","~$run!"]],"~:name","~$promesa.exec","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$impl","~$promesa.impl.promise","~$promesa.protocols","^P","^@","^@","~$pt","^P","~$promesa.util","^R","~$gobj","~$goog.object","~$goog","^U","^T","^T","^O","^O","~$pu","^R"],"~:seen",["^C",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^@","^@"],"~:form",["~#list",["~$ns","^H","Executors & Schedulers facilities.",["^10",["~:refer-clojure","~:exclude",["^F","^E","^D"]]],["^10",["^X",["^P","~:as","^Q"],["^R","^14","^V"],["^T","^14","^S"],["^O","^14","^N"]]]]],"~:flags",["^ ","^X",["^C",[]]],"~:js-deps",["^ "],"~:deps",["^U","^@","^P","^R","^T","^O"]],"^K","^H","~:resource-id",["~:shadow.build.classpath/resource","promesa/exec.cljc"],"~:compiled-at",1703447049133,"^I",["^ ","^N","^O","^P","^P","^@","^@","^Q","^P","^R","^R","^S","^T","^U","^U","^T","^T","^O","^O","^V","^R"],"~:resource-name","promesa/exec.cljc","~:warnings",[],"~:source",";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.exec\n  \"Executors & Schedulers facilities.\"\n  (:refer-clojure :exclude [run! pmap await])\n  (:require\n   [promesa.protocols :as pt]\n   [promesa.util :as pu]\n   #?(:cljs [goog.object :as gobj])\n   #?(:cljs [promesa.impl.promise :as impl]))\n  #?(:clj\n     (:import\n      clojure.lang.Var\n      java.lang.AutoCloseable\n      java.lang.Thread$UncaughtExceptionHandler\n      java.time.Duration\n      java.util.concurrent.BlockingQueue\n      java.util.concurrent.Callable\n      java.util.concurrent.CancellationException\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionException\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.CountDownLatch\n      java.util.concurrent.ExecutionException\n      java.util.concurrent.Executor\n      java.util.concurrent.ExecutorService\n      java.util.concurrent.Executors\n      java.util.concurrent.ForkJoinPool\n      java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory\n      java.util.concurrent.ForkJoinPool$ManagedBlocker\n      java.util.concurrent.ForkJoinWorkerThread\n      java.util.concurrent.Future\n      java.util.concurrent.ScheduledExecutorService\n      java.util.concurrent.SynchronousQueue\n      java.util.concurrent.ThreadFactory\n      java.util.concurrent.ThreadPoolExecutor\n      java.util.concurrent.TimeUnit\n      java.util.concurrent.TimeoutException\n      java.util.concurrent.atomic.AtomicLong\n      java.util.function.Supplier)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; --- Globals & Defaults (with CLJS Impl)\n\n(declare thread-factory)\n(declare scheduled-executor)\n(declare current-thread-executor)\n(declare ->ScheduledTask)\n\n#?(:clj  (declare cached-executor))\n#?(:cljs (declare microtask-executor))\n\n(def ^:dynamic *default-scheduler* nil)\n(def ^:dynamic *default-executor* nil)\n\n(def virtual-threads-available?\n  \"Var that indicates the availability of virtual threads.\"\n  #?(:clj (if (and (pu/has-method? Thread \"ofVirtual\")\n                   ;; the following should succeed with the `--enable-preview` java argument:\n                   ;; eval happens on top level = compile time, which is ok for GraalVM\n                   (try (eval '(Thread/ofVirtual))\n                        (catch Exception _ false)))\n            true\n            false)\n     :cljs false))\n\n#?(:clj\n   (do\n     (defmacro compile-if-virtual [then else]\n       (if virtual-threads-available?\n         then else))\n     (defmacro compile-when-virtual [body]\n       `(compile-if-virtual ~body nil))))\n\n;; DEPRECATED\n(def ^{:deprecated true\n       :doc \"backward compatibility alias for `virtual-threads-available?`\"}\n  vthread-supported?\n  virtual-threads-available?)\n\n(def ^{:no-doc true} noop (constantly nil))\n\n#?(:clj\n   (defn get-available-processors\n     []\n     (.availableProcessors (Runtime/getRuntime))))\n\n(defonce\n  ^{:doc \"Default scheduled executor instance.\"}\n  default-scheduler\n  (delay\n    #?(:clj  (scheduled-executor :parallelism (get-available-processors))\n       :cljs (scheduled-executor))))\n\n(defonce\n  ^{:doc \"Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\"}\n  default-executor\n  (delay\n    #?(:clj  (ForkJoinPool/commonPool)\n       :cljs (microtask-executor))))\n\n;; Executor that executes the task in the calling thread\n(def ^{:doc \"Default Executor instance that runs the task in the same thread.\"}\n  default-current-thread-executor\n  (delay (current-thread-executor)))\n\n(defonce\n  ^{:doc \"A global, cached thread executor service.\"\n    :no-doc true}\n  default-cached-executor\n  #?(:clj  (delay (cached-executor))\n     :cljs default-executor))\n\n(defonce\n  ^{:doc \"A global, thread per task executor service.\"\n    :no-doc true}\n  default-thread-executor\n  #?(:clj (compile-if-virtual\n           (delay (java.util.concurrent.Executors/newThreadPerTaskExecutor\n                   ^ThreadFactory (promesa.exec/thread-factory)))\n           default-cached-executor)\n     :cljs default-executor))\n\n(defonce\n  ^{:doc \"A global, virtual thread per task executor service.\"\n    :no-doc true}\n  default-vthread-executor\n  #?(:clj  (compile-if-virtual\n            (delay (java.util.concurrent.Executors/newVirtualThreadPerTaskExecutor))\n            default-cached-executor)\n     :cljs default-executor))\n\n(defn executor?\n  \"Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\"\n  [o]\n  #?(:clj  (or (instance? Executor o)\n               (satisfies? pt/IExecutor o))\n     :cljs (satisfies? pt/IExecutor o)))\n\n#?(:clj\n(defn shutdown!\n  \"Shutdowns the executor service.\"\n  [^ExecutorService executor]\n  (.shutdown executor)))\n\n#?(:clj\n(defn shutdown-now!\n  \"Shutdowns and interrupts the executor service.\"\n  [^ExecutorService executor]\n  (.shutdownNow executor)))\n\n#?(:clj\n(defn shutdown?\n  \"Check if execitor is in shutdown state.\"\n  [^ExecutorService executor]\n  (.isShutdown executor)))\n\n(defn resolve-executor\n  {:no-doc true}\n  ([] (resolve-executor nil))\n  ([executor]\n   (cond\n     (nil? executor)      @default-executor\n     (executor? executor) executor\n     (delay? executor)    (resolve-executor @executor)\n     :else\n     (case executor\n       :default        @default-executor\n       :cached         @default-cached-executor\n       :thread         @default-thread-executor\n       :vthread        @default-vthread-executor\n       :same-thread    @default-current-thread-executor\n       :current-thread @default-current-thread-executor\n       (throw #?(:clj (IllegalArgumentException. \"invalid executor\")\n                 :cljs (js/TypeError. \"invalid executor\")))))))\n\n(defn resolve-scheduler\n  {:no-doc true}\n  ([] (resolve-scheduler nil))\n  ([scheduler]\n   (if (or (nil? scheduler) (= :default scheduler))\n     @default-scheduler\n     (pu/maybe-deref scheduler))))\n\n(defn wrap-bindings\n  {:no-doc true}\n  [f]\n  #?(:cljs f\n     :clj\n     (let [bindings (get-thread-bindings)]\n       (fn\n         ([]\n          (push-thread-bindings bindings)\n          (try\n            (f)\n            (finally\n              (pop-thread-bindings))))\n         ([a]\n          (push-thread-bindings bindings)\n          (try\n            (f a)\n            (finally\n              (pop-thread-bindings))))\n         ([a b]\n          (push-thread-bindings bindings)\n          (try\n            (f a b)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d e)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e & args]\n          (push-thread-bindings bindings)\n          (try\n            (apply f a b c d e args)\n            (finally\n              (pop-thread-bindings))))))))\n\n;; --- Public API\n\n(defn exec!\n  \"Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget.\"\n  ([f]\n   (pt/-exec! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-exec! (resolve-executor executor) f)))\n\n(defn run!\n  \"Run the task in the provided executor.\"\n  ([f]\n   (pt/-run! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-run! (resolve-executor executor) f)))\n\n(defn submit!\n  \"Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.\"\n  ([f]\n   (pt/-submit! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-submit! (resolve-executor executor) f)))\n\n(defn schedule!\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  ([ms f]\n   (pt/-schedule! (resolve-scheduler) ms f))\n  ([scheduler ms f]\n   (pt/-schedule! (resolve-scheduler scheduler) ms f)))\n\n;; --- Pool & Thread Factories\n\n#?(:clj\n   (defn thread-factory?\n     \"Checks if `o` is an instance of ThreadFactory\"\n     [o]\n     (instance? ThreadFactory o)))\n\n#?(:clj\n   (defn- fn->thread-factory\n     \"Adapt a simple clojure function into a ThreadFactory instance.\"\n     [func]\n     (reify ThreadFactory\n       (^Thread newThread [_ ^Runnable runnable]\n        (func runnable)))))\n\n#?(:clj\n(def ^{:no-doc true :dynamic true}\n  *default-counter*\n  (AtomicLong. 0)))\n\n#?(:clj\n(defn get-next\n  \"Get next value from atomic long counter\"\n  {:no-doc true}\n  ([] (.getAndIncrement ^AtomicLong *default-counter*))\n  ([counter] (.getAndIncrement ^AtomicLong counter))))\n\n#?(:clj\n(defn thread-factory\n  \"Returns an instance of promesa default thread factory.\"\n  [& {:keys [name daemon priority]\n      :or {daemon true\n           priority Thread/NORM_PRIORITY\n           name \"promesa/thread/%s\"}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ThreadFactory\n      (newThread [this runnable]\n        (doto (Thread. ^Runnable runnable)\n          (.setPriority (int priority))\n          (.setDaemon ^Boolean daemon)\n          (.setName (format name (get-next counter)))))))))\n\n#?(:clj\n(defn forkjoin-thread-factory\n  ^ForkJoinPool$ForkJoinWorkerThreadFactory\n  [& {:keys [name daemon] :or {name \"promesa/forkjoin/%s\" daemon true}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ForkJoinPool$ForkJoinWorkerThreadFactory\n      (newThread [_ pool]\n        (let [thread (.newThread ForkJoinPool/defaultForkJoinWorkerThreadFactory pool)\n              tname  (format name (get-next counter))]\n          (.setName ^ForkJoinWorkerThread thread ^String tname)\n          (.setDaemon ^ForkJoinWorkerThread thread ^Boolean daemon)\n          thread))))))\n\n#?(:clj\n(defn- resolve-thread-factory\n  {:no-doc true}\n  ^ThreadFactory\n  [opts]\n  (cond\n    (thread-factory? opts) opts\n    (= :default opts)      (thread-factory)\n    (nil? opts)            (thread-factory)\n    (map? opts)            (thread-factory opts)\n    (fn? opts)             (fn->thread-factory opts)\n    :else                  (throw (ex-info \"Invalid thread factory\" {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-pool\n     \"A cached thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newCachedThreadPool))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newCachedThreadPool factory)))))\n\n#?(:clj\n   (defn fixed-pool\n     \"A fixed thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([n]\n      (Executors/newFixedThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newFixedThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn single-pool\n     \"A single thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newSingleThreadExecutor))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newSingleThreadExecutor factory)))))\n\n#?(:clj\n   (defn scheduled-pool\n     \"A scheduled thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newScheduledThreadPool (int 0)))\n     ([n] (Executors/newScheduledThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newScheduledThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn work-stealing-pool\n     \"Creates a work-stealing thread pool.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newWorkStealingPool))\n     ([n] (Executors/newWorkStealingPool (int n)))))\n\n#?(:clj\n   (defn forkjoin-pool\n     {:deprecated \"9.0\" :no-doc true}\n     [{:keys [factory async? parallelism]\n       :or {async? true}\n       :as opts}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) ForkJoinPool/defaultForkJoinWorkerThreadFactory\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. parallelism factory nil async?))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- END DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-executor\n     \"A cached thread executor pool constructor.\"\n     [& {:keys [max-size factory keepalive] :or {keepalive 60000 max-size Integer/MAX_VALUE}}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/cached/%s\"))\n           queue   (SynchronousQueue.)]\n       (ThreadPoolExecutor. 0\n                            (long max-size)\n                            (long keepalive)\n                            TimeUnit/MILLISECONDS\n                            ^BlockingQueue queue\n                            ^ThreadFactory factory))))\n\n#?(:clj\n   (defn fixed-executor\n     \"A fixed thread executor pool constructor.\"\n     [& {:keys [parallelism factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/fixed/%s\"))]\n       (Executors/newFixedThreadPool (int parallelism) factory))))\n\n#?(:clj\n   (defn single-executor\n     \"A single thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/single/%s\"))]\n       (Executors/newSingleThreadExecutor factory))))\n\n(defn current-thread-executor\n  \"Creates an executor instance that run tasks in the same thread.\"\n  []\n  #?(:clj\n     (reify\n       Executor\n       (^void execute [_ ^Runnable f] (.run f)))\n\n     :cljs\n     (reify\n       pt/IExecutor\n       (-exec! [this f]\n         (try\n           (f)\n           nil\n           (catch :default _\n             nil)))\n\n       (-run! [this f]\n         (try\n           (pt/-promise (comp noop f))\n           (catch :default cause\n             (pt/-promise cause))))\n\n       (-submit! [this f]\n         (try\n           (pt/-promise (f))\n           (catch :default cause\n             (pt/-promise cause)))))))\n\n#?(:cljs\n   (defn microtask-executor\n     \"An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\"\n     []\n     (reify\n       pt/IExecutor\n       (-exec! [this f]\n         (impl/nextTick f))\n\n       (-run! [this f]\n         (-> (pt/-promise nil)\n             (pt/-fmap (fn [_]\n                        (try (f) (catch :default _ nil))))\n             (pt/-fmap noop)))\n\n       (-submit! [this f]\n         (-> (pt/-promise nil)\n             (pt/-fmap (fn [_] (f))))))))\n\n#?(:cljs\n   (deftype Scheduler []\n     pt/IScheduler\n     (-schedule! [_ ms f]\n       (let [df  (impl/deferred)\n             tid (js/setTimeout\n                  (fn []\n                    ;; (js/console.log \"111\")\n                    (try\n                      (pt/-resolve! df (f))\n                      (catch :default cause\n                        (pt/-reject! df cause))))\n                  ms)]\n         (pt/-fnly df\n                   (fn [_ c]\n                     ;; (js/console.log \"FNLY\")\n                     (when (impl/isCancellationError c)\n                       (js/clearTimeout tid))))\n         df))))\n\n(defn scheduled-executor\n  \"A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.\"\n  [& {:keys [parallelism factory] :or {parallelism 1}}]\n  #?(:clj\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/scheduled/%s\"))]\n\n\n       (doto (java.util.concurrent.ScheduledThreadPoolExecutor. (int parallelism) ^ThreadFactory factory)\n         (.setRemoveOnCancelPolicy true)))\n\n     :cljs\n     (->Scheduler)))\n\n#?(:clj\n   (compile-when-virtual\n    (defn thread-per-task-executor\n      [& {:keys [factory]}]\n      (let [factory (or (some-> factory resolve-thread-factory)\n                        (thread-factory :name \"promesa/thread-per-task/%s\"))]\n        (Executors/newThreadPerTaskExecutor ^ThreadFactory factory)))))\n\n#?(:clj\n   (compile-when-virtual\n    (defn vthread-per-task-executor\n      []\n      (Executors/newVirtualThreadPerTaskExecutor))))\n\n#?(:clj\n   (defn forkjoin-executor\n     [& {:keys [factory async parallelism keepalive core-size max-size]\n         :or {max-size 0x7fff async true keepalive 60000}}]\n     (let [parallelism (or parallelism (get-available-processors))\n           core-size   (or core-size parallelism)\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) (forkjoin-thread-factory)\n                         :else (throw (UnsupportedOperationException. \"Unexpected thread factory\")))]\n       (ForkJoinPool. (int parallelism)\n                      ^ForkJoinPool$ForkJoinWorkerThreadFactory factory\n                      nil\n                      async\n                      (int core-size)\n                      (int max-size)\n                      1,\n                      nil\n                      (long keepalive)\n                      TimeUnit/MILLISECONDS))))\n\n#?(:clj\n   (defn work-stealing-executor\n     \"An alias for the `forkjoin-executor`.\"\n     [& params]\n     (apply forkjoin-executor params)))\n\n#?(:clj\n   (defn configure-default-executor!\n     [& params]\n     (alter-var-root #'*default-executor*\n                     (fn [executor]\n                       (when (and (delay? executor) (realized? executor))\n                         (.close ^AutoCloseable @executor))\n                       (when (instance? AutoCloseable executor)\n                         (.close ^AutoCloseable executor))\n                       (apply forkjoin-executor params)))))\n\n#?(:clj\n   (extend-type Executor\n     pt/IExecutor\n     (-exec! [this f]\n       (.execute ^Executor this ^Runnable f))\n\n     (-run! [this f]\n       (CompletableFuture/runAsync ^Runnable f ^Executor this))\n\n     (-submit! [this f]\n       (CompletableFuture/supplyAsync ^Supplier (pu/->Supplier f) ^Executor this))))\n\n\n;; --- Scheduler & ScheduledTask\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule! [this ms f]\n       (let [ms  (if (instance? Duration ms) (inst-ms ms) ms)\n             df  (CompletableFuture.)\n             fut (.schedule this\n                            ^Runnable (fn []\n                                        (try\n                                          (pt/-resolve! df (f))\n                                          (catch Throwable cause\n                                            (pt/-reject! df cause))))\n                            (long ms)\n                            TimeUnit/MILLISECONDS)]\n\n         (pt/-fnly df\n                   (fn [_ c]\n                     (when (instance? CancellationException c)\n                       (pt/-cancel! fut))))\n         df))))\n\n(defmacro with-dispatch\n  \"Helper macro for dispatch execution of the body to an executor\n  service. The returned promise is not cancellable (the body will be\n  executed independently of the cancellation).\"\n  [executor & body]\n  `(-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n       (pt/-mcat pt/-promise)))\n\n(defmacro with-dispatch!\n  \"Blocking version of `with-dispatch`. Useful when you want to\n  dispatch a blocking operation to a separated thread and join current\n  thread waiting for result; effective when current thread is virtual\n  thread.\"\n  [executor & body]\n  (when (:ns &env)\n    (throw (ex-info \"cljs not supported on with-dispatch! macro\" {})))\n  `(try\n     (-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n         (pt/-mcat pt/-promise)\n         (pt/-await!))\n     (catch ExecutionException e#\n       (throw (.getCause e#)))\n     (catch CompletionException e#\n       (throw (.getCause e#)))))\n\n(defmacro with-executor\n  \"Binds the *default-executor* var with the provided executor,\n  executes the macro body. It also can optionally shutdown or shutdown\n  and interrupt on termination if you provide `^:shutdown` and\n  `^:interrupt` metadata.\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  [executor & body]\n  (let [interrupt?   (-> executor meta :interrupt)\n        shutdown?    (-> executor meta :shutdown)\n        executor-sym (gensym \"executor\")]\n    `(let [~executor-sym ~executor\n           ~executor-sym (if (fn? ~executor-sym) (~executor-sym) ~executor-sym)]\n       (binding [*default-executor* ~executor-sym]\n         (try\n           ~@body\n           (finally\n             ~(when (or shutdown? interrupt?)\n                (list (if interrupt? 'promesa.exec/shutdown-now! 'promesa.exec/shutdown!) executor-sym))))))))\n\n#?(:clj\n(defn pmap\n  \"Analogous to the `clojure.core/pmap` with the excetion that it allows\n  use a custom executor (binded to *default-executor* var) The default\n  clojure chunk size (32) is used for evaluation and the real\n  parallelism is determined by the provided executor.\n\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  {:experimental true}\n  ([f coll]\n   (let [executor (resolve-executor *default-executor*)\n         frame    (Var/cloneThreadBindingFrame)]\n     (->> coll\n          (map (fn [o] (pt/-submit! executor #(do\n                                                (Var/resetThreadBindingFrame frame)\n                                                (f o)))))\n          (clojure.lang.RT/iter)\n          (clojure.lang.RT/chunkIteratorSeq)\n          (map (fn [o] (.get ^CompletableFuture o))))))\n  ([f coll & colls]\n   (let [step-fn (fn step-fn [cs]\n                   (lazy-seq\n                    (let [ss (map seq cs)]\n                      (when (every? identity ss)\n                        (cons (map first ss) (step-fn (map rest ss)))))))]\n     (pmap #(apply f %) (step-fn (cons coll colls)))))))\n\n#?(:clj\n   (compile-if-virtual\n    (defn fn->thread\n      [f & {:keys [daemon virtual start priority name]\n            :or {daemon true virtual false start true priority Thread/NORM_PRIORITY}}]\n      (let [name   (or name (format \"promesa/unpooled-thread/%s\" (get-next)))\n            thread (if virtual\n                     (let [thb (Thread/ofVirtual)\n                           thb (.name thb ^String name)]\n                       (.unstarted thb ^Runnable f))\n                     (let [thb (Thread/ofPlatform)\n                           thb (.name thb ^String name)\n                           thb (.priority thb (int priority))\n                           thb (.daemon thb (boolean daemon))]\n                       (.unstarted thb ^Runnable f)))]\n        (if start\n          (.start ^Thread thread))\n        thread))\n    (defn fn->thread\n      [f & {:keys [daemon start priority name]\n            :or {daemon true start true priority Thread/NORM_PRIORITY}}]\n      (let [thread (doto (Thread. ^Runnable f)\n                     (.setName ^String name)\n                     (.setPriority (int priority))\n                     (.setDaemon (boolean daemon)))]\n        (if start\n          (.start ^Thread thread))\n        thread))))\n\n#?(:clj\n(defmacro thread\n  \"A low-level, not-pooled thread constructor, it accepts an optional\n  map as first argument and the body. The options map is interepreted\n  as options if a literal map is provided. The available options are:\n  `:name`, `:priority`, `:daemon` and `:virtual`. The `:virtual`\n  option is ignored if you are using a JVM that has no support for\n  Virtual Threads.\"\n  [opts & body]\n  (let [[opts body] (if (map? opts) [opts body] [nil (cons opts body)])]\n    `(fn->thread (^:once fn* [] ~@body)\n                 {:daemon ~(:daemon opts true)\n                  :virtual ~(:virtual opts false)\n                  :start ~(:start opts true)\n                  :name ~(or (:name opts) (format \"promesa/unpooled-thread/%s\" (get-next)))}))))\n\n#?(:clj\n(defn thread-call\n  \"Advanced version of `p/thread-call` that creates and starts a thread\n  configured with `opts`. No executor service is used, this will start\n  a plain unpooled thread.\"\n  [f & {:as opts}]\n  (let [p (CompletableFuture.)]\n    (fn->thread #(try\n                   (pt/-resolve! p (f))\n                   (catch Throwable cause\n                     (pt/-reject! p cause)))\n                (assoc opts :start true))\n    p)))\n\n#?(:clj\n(defn current-thread\n  \"Return the current thread.\"\n  []\n  (Thread/currentThread)))\n\n#?(:clj\n(defn set-name!\n  \"Rename thread.\"\n  ([name] (set-name! (current-thread) name))\n  ([thread name] (.setName ^Thread thread ^String name))))\n\n#?(:clj\n(defn get-name\n  \"Retrieve thread name\"\n  ([] (get-name (current-thread)))\n  ([thread]\n   (.getName ^Thread thread))))\n\n#?(:clj\n(defn interrupted?\n  \"Check if the thread has the interrupted flag set.\n\n  There are two special cases:\n\n  Using the `:current` keyword as argument will check the interrupted\n  flag on the current thread.\n\n  Using the arity 0 (passing no arguments), then the current thread\n  will be checked and **WARNING** the interrupted flag reset to\n  `false`.\"\n  ([]\n   (Thread/interrupted))\n  ([thread]\n   (if (= :current thread)\n     (.isInterrupted (Thread/currentThread))\n     (.isInterrupted ^Thread thread)))))\n\n#?(:clj\n(defn get-thread-id\n  \"Retrieves the thread ID.\"\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn thread-id\n  \"Retrieves the thread ID.\"\n  {:deprecated \"11.0\"}\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn interrupt!\n  \"Interrupt a thread.\"\n  ([]\n   (.interrupt (Thread/currentThread)))\n  ([^Thread thread]\n   (.interrupt thread))))\n\n#?(:clj\n(defn thread?\n  \"Check if provided object is a thread instance.\"\n  [t]\n  (instance? Thread t)))\n\n#?(:clj\n(defn sleep\n  \"Turn the current thread to sleep accept a number of milliseconds or\n  Duration instance.\"\n  [ms]\n  (if (instance? Duration ms)\n    (Thread/sleep (int (.toMillis ^Duration ms)))\n    (Thread/sleep (int ms)))))\n\n#?(:clj\n(defn throw-uncaught!\n  \"Throw an exception to the current uncaught exception handler.\"\n  [cause]\n  (let [thr (current-thread)\n        hdl (.getUncaughtExceptionHandler ^Thread thr)]\n    (.uncaughtException ^Thread$UncaughtExceptionHandler hdl\n                        ^Thread thr\n                        ^Throwable cause))))\n\n;; #?(:clj\n;;    (defn managed-blocker\n;;      {:no-doc true}\n;;      [f]\n;;      (let [state (volatile! nil)]\n;;        (reify\n;;          ForkJoinPool$ManagedBlocker\n;;          (block [_]\n;;            (try\n;;              (vreset! state (.call ^Callable f))\n;;              (catch Throwable cause#\n;;                (vreset! state cause#)))\n;;            true)\n;;          (isReleasable [_]\n;;            false)\n\n;;          clojure.lang.IDeref\n;;          (deref [_]\n;;            (let [v @state]\n;;              (if (instance? Throwable v)\n;;                (throw v)\n;;                v)))))))\n\n;; (defmacro blocking\n;;   {:no-doc true}\n;;   [& body]\n;;   `(let [f# (^:once fn* [] ~@body)\n;;          m# (managed-blocker f#)]\n;;      (ForkJoinPool/managedBlock m#)\n;;      (deref m#)))\n","~:reader-features",["^C",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["promesa.exec/*default-scheduler*","promesa.exec/*default-executor*","promesa.exec/virtual-threads-available?","promesa.exec/vthread-supported?","promesa.exec/noop","cljs.core/constantly","promesa.exec/default-scheduler","cljs.core/Delay","promesa.exec/scheduled-executor","promesa.exec/default-executor","promesa.exec/microtask-executor","promesa.exec/default-current-thread-executor","promesa.exec/current-thread-executor","promesa.exec/default-cached-executor","promesa.exec/default-thread-executor","promesa.exec/default-vthread-executor","promesa.exec/executor?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","promesa.protocols/IExecutor","var_args","G__22872","promesa.exec/resolve-executor","js/Error","promesa.exec.resolve_executor","executor","cljs.core/deref","cljs.core/delay?","G__22876","cljs.core/Keyword","js/TypeError","G__22888","promesa.exec/resolve-scheduler","promesa.exec.resolve_scheduler","scheduler","cljs.core._EQ_","promesa.util/maybe-deref","promesa.exec/wrap-bindings","f","G__22905","promesa.exec/exec!","promesa.protocols/-exec!","G__22915","promesa.exec/run!","promesa.protocols/-run!","G__22925","promesa.exec/submit!","promesa.protocols/-submit!","G__22940","promesa.exec/schedule!","ms","promesa.protocols/-schedule!","promesa.exec/t_promesa$exec22961","this","e22974","_","e22976","promesa.protocols/-promise","cljs.core.comp","cause","e22979","promesa.exec/t_promesa$exec23015","promesa.impl.promise/nextTick","promesa.protocols/-fmap","e23069","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","promesa.exec/Scheduler","promesa.exec/->Scheduler","df","promesa.impl.promise/deferred","tid","js/setTimeout","e23070","promesa.protocols/-resolve!","promesa.protocols/-reject!","promesa.protocols/-fnly","c","promesa.impl.promise/isCancellationError","js/clearTimeout","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","p__23078","map__23079","cljs.core/--destructure-map","cljs.core.get","seq23076","self__5755__auto__","cljs.core/seq","parallelism","factory"]],"~:used-vars",["^C",["~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/comp","~$promesa.exec/thread-factory","~$promesa.impl.promise/isCancellationError","~$promesa.exec/default-current-thread-executor","~$js/TypeError","~$promesa.protocols/-reject!","~$promesa.protocols/-exec!","~$promesa.protocols/-resolve!","~$promesa.exec/scheduled-executor","~$cljs.core/=","~$promesa.exec/resolve-executor","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$promesa.exec/wrap-bindings","~$promesa.exec/*default-executor*","~$promesa.protocols/-schedule!","~$cljs.core/deref","~$promesa.impl.promise/nextTick","~$cljs.core/seq","~$promesa.exec/->t_promesa$exec22961","~$cljs.core/Keyword","~$promesa.protocols/-run!","~$promesa.exec/vthread-supported?","~$cljs.core/Delay","~$promesa.protocols/-promise","~$promesa.exec/submit!","~$promesa.exec/t_promesa$exec22961","~$js/setTimeout","~$promesa.exec/default-vthread-executor","~$cljs.core/native-satisfies?","~$promesa.protocols/IExecutor","~$promesa.exec/->t_promesa$exec23015","~$promesa.exec/->Scheduler","~$promesa.protocols/-submit!","~$promesa.exec/default-executor","~$promesa.exec/microtask-executor","~$promesa.exec/executor?","~$promesa.util/maybe-deref","~$cljs.core/get","~$cljs.core/constantly","~$promesa.exec/*default-scheduler*","~$promesa.exec/->ScheduledTask","~$promesa.protocols/-fmap","~$promesa.protocols/-fnly","~$promesa.exec/default-cached-executor","~$promesa.exec/default-scheduler","~$cljs.core/not","~$promesa.exec/noop","~$promesa.exec/virtual-threads-available?","~$promesa.exec/t_promesa$exec23015","~$js/clearTimeout","~$promesa.exec/Scheduler","~$promesa.exec/exec!","~$cljs.core/delay?","~$promesa.exec/default-thread-executor","~$promesa.exec/schedule!","~$js/Error","~$promesa.exec/current-thread-executor","~$promesa.impl.promise/deferred","~$promesa.exec/resolve-scheduler","~$promesa.exec/run!"]]],"~:cache-keys",["~#cmap",[["^19","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^C",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^19","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^19","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^36"]]],["^19","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35"]]],["^19","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^33","^36"]]],["^19","promesa/impl/promise.js"],["0ee1690ba74b2609c2d85b51edacad13046a18e2","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35"]]],"~:SHADOW-TIMESTAMP",[1703446907000,1703446907000,1701588412000],["^19","promesa/util.cljc"],["0ee1690ba74b2609c2d85b51edacad13046a18e2","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^@","^P"]]],["^19","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","~$goog.reflect"]]],["^19","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","~$goog.fs.blob","^39","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3;","^3<"]]],["^19","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3;","~$goog.html.SafeUrl","^3<","^35","^36"]]],["^19","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3@","~$goog.html.SafeStyle","^3B","^3:","~$goog.html.uncheckedconversions","^3;","^36"]]],["^19","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","~$goog.dom.TagName","^35","~$goog.dom.element"]]],["^19","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3;","^3@","^3G","~$goog.html.SafeStyleSheet","^3B","^3I","^3:","^3<","^35","~$goog.labs.userAgent.browser","~$goog.array","^T","^36","~$goog.dom.tags","^3A"]]],["^19","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^T"]]],["^19","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3M","^35","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^34"]]],["^19","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",[]]],["^19","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3M","^T"]]],["^19","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","~$goog.dom.safe","^3H","^3;","^36"]]],["^19","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^36","^38"]]],["^19","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","promesa/protocols.cljc"],["0ee1690ba74b2609c2d85b51edacad13046a18e2","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^@"]]],["^19","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","~$goog.flags"]]],["^19","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3P","^3I"]]],["^19","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","^3F","^3@","^3G","^3K","^3B","^3:","^3;","^36"]]],["^19","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U"]]],["^19","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","~$goog.math.Long","~$goog.math.Integer","^3R","^T","^3M","~$goog.Uri","~$goog.string.StringBuffer"]]],["^19","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3;","^3<","^3A","^35"]]],["^19","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3;","^3G","^3<","^T","^35","^36"]]],["^19","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^3>"]]],["^19","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","^3R"]]],["^19","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^35","^3<"]]],["^19","promesa/exec.cljc"],["0ee1690ba74b2609c2d85b51edacad13046a18e2","^2Z",["^ ","^2[",null,"^30",["^C",[]],"^31",["^U","^@","^P","^R","^T","^O"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1701588412000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1700591986000,"jar:file:/C:/Users/hmish/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1700591986000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Executors & Schedulers facilities.","^7","promesa/exec.cljc","^8",7,"^9",5,"^:",7,"^;",17],"^<",["^ ","^=","^>","^?","^@"],"^A",null,"^B",["^C",["^D","^E","^F"]],"^G","^H","^I",["^ "],"^L",null,"^M",["^ ","^N","^O","^P","^P","^@","^@","^Q","^P","^R","^R","^S","^T","^U","^U","^T","^T","^O","^O","^V","^R"],"^W",["^C",["^X"]],"~:shadow/js-access-global",["^C",["TypeError","clearTimeout","Error","setTimeout"]],"^Y",null,"~:defs",["^ ","~$exec!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","promesa/exec.cljc","^8",242,"^9",7,"^:",242,"^;",12,"~:arglists",["^10",["~$quote",["^10",[["~$f"],["~$executor","~$f"]]]]],"^6","Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$f"],["^4V","~$f"]],"^4T",["^10",[["~$f"],["^4V","~$f"]]],"~:arglists-meta",["^10",[null,null]]]],"^G","^2O","^7","promesa/exec.cljc","^;",12,"^4W",["^ ","^4X",false,"^4Y",2,"^4Z",2,"^4[",[["~$f"],["^4V","~$f"]],"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^50",["^10",[null,null]]],"^4[",[["~$f"],["^4V","~$f"]],"~:protocol-impl",null,"^4Y",2,"^50",["^10",[null,null]],"^9",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^10",["~$defn","^4R","Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget.",["^10",[["~$f"],["^10",["~$pt/-exec!",["^10",["~$resolve-executor","~$*default-executor*"]],"~$f"]]]],["^10",[["^4V","~$f"],["^10",["^57",["^10",["^58","^4V"]],"~$f"]]]]]]],"^4X",false,"~:methods",[["^ ","^4Y",1,"^4X",false,"~:tag","~$any"],["^ ","^4Y",2,"^4X",false,"^5;","^5<"]],"^8",242,"^:",242,"^4Z",2,"~:fn-var",true,"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^6","Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget."],"~$->t_promesa$exec23015",["^ ","^4S",null,"^5",["^ ","~:anonymous",true,"~:protocols",["^C",["^29","~$cljs.core/IMeta","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^C",["^5A","^5B"]],"~:factory","~:positional","^4T",["^10",["^4U",["^10",[["~$meta23016"]]]]],"^6","Positional factory function for promesa.exec/t_promesa$exec23015.","^7",null],"^5@",["^C",["^29","^5A","^5B"]],"^G","^2:","^7","promesa/exec.cljc","^4[",["^10",[["^5F"]]],"^51",null,"^50",["^10",[null,null]],"^5?",true,"^9",null,"^52",["^ ","^53","^54","^55",["^10",["~$cljs.core/deftype","~$t_promesa$exec23015",["^5F"],"^5B",["^10",["~$-with-meta",["~$_23017","^5F"],["^10",["~$new","^5H","^5F"]]]],"^5A",["^10",["~$-meta",["^5J"],"^5F"]],"~$pt/IExecutor",["^10",["~$-exec!",["~$this","~$f"],["^10",["~$impl/nextTick","~$f"]]]],["^10",["~$-run!",["^5O","~$f"],["^10",["~$->",["^10",["~$pt/-promise",null]],["^10",["~$pt/-fmap",["^10",["~$fn",["~$_"],["^10",["~$try",["^10",["~$f"]],["^10",["~$catch","~:default","~$_",null]]]]]]]],["^10",["^5T","~$noop"]]]]]],["^10",["~$-submit!",["^5O","~$f"],["^10",["^5R",["^10",["^5S",null]],["^10",["^5T",["^10",["^5U",["~$_"],["^10",["~$f"]]]]]]]]]]]]],"^4X",false,"^5D","^5E","^8",null,"~:ret-tag","^2L","^4Z",1,"^5=",true,"^4T",["^10",["^4U",["^10",[["^5F"]]]]],"^5C",["^C",["^5A","^5B"]],"^6","Positional factory function for promesa.exec/t_promesa$exec23015."],"~$default-scheduler",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",95,"^9",3,"^:",95,"^;",20,"^6","Default scheduled executor instance."],"^G","^2H","^7","promesa/exec.cljc","^;",20,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["~$defonce","^60",["^10",["~$delay",["^10",["~$scheduled-executor"]]]]]]],"^8",93,"^:",95,"^5;","^22","^6","Default scheduled executor instance."],"~$vthread-supported?",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",83,"^9",3,"^:",83,"^;",21,"~:deprecated",true,"^6","backward compatibility alias for `virtual-threads-available?`"],"^G","^21","^7","promesa/exec.cljc","^;",21,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["~$def","^64","~$virtual-threads-available?"]]],"^8",81,"^65",true,"^:",83,"^5;","~$boolean","^6","backward compatibility alias for `virtual-threads-available?`"],"~$executor?",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",138,"^9",7,"^:",138,"^;",16,"^4T",["^10",["^4U",["^10",[["~$o"]]]]],"^6","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol."],"^G","^2?","^7","promesa/exec.cljc","^;",16,"^4[",["^10",[["~$o"]]],"^51",null,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^69","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.",["~$o"],["^10",["~$satisfies?","^5M","~$o"]]]]],"^4X",false,"^8",138,"^5[","^68","^:",138,"^4Z",1,"^5=",true,"^4T",["^10",["^4U",["^10",[["~$o"]]]]],"^6","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol."],"^5H",["^ ","~:num-fields",1,"^5@",["^C",["^29","^5A","^5B"]],"^G","^2L","^7","promesa/exec.cljc","~:type",true,"^5?",true,"^9",null,"^52",["^ ","^53","^54","^55",["^10",["^5G","^5H",["^5F"],"^5B",["^10",["^5I",["^5J","^5F"],["^10",["^5K","^5H","^5F"]]]],"^5A",["^10",["^5L",["^5J"],"^5F"]],"^5M",["^10",["^5N",["^5O","~$f"],["^10",["^5P","~$f"]]]],["^10",["^5Q",["^5O","~$f"],["^10",["^5R",["^10",["^5S",null]],["^10",["^5T",["^10",["^5U",["~$_"],["^10",["^5V",["^10",["~$f"]],["^10",["^5W","^5X","~$_",null]]]]]]]],["^10",["^5T","^5Y"]]]]]],["^10",["^5Z",["^5O","~$f"],["^10",["^5R",["^10",["^5S",null]],["^10",["^5T",["^10",["^5U",["~$_"],["^10",["~$f"]]]]]]]]]]]]],"^8",null,"~:record",false,"^5;","~$function","^5C",["^C",["^5A","^5B"]]],"~$*default-scheduler*",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",58,"^9",16,"^:",58,"^;",35,"~:dynamic",true],"^G","^2C","^7","promesa/exec.cljc","^;",35,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^66","^6?",null]]],"^6@",true,"^8",58,"^:",58,"^5;","^5<"],"~$schedule!",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",268,"^9",7,"^:",268,"^;",16,"^4T",["^10",["^4U",["^10",[["~$ms","~$f"],["~$scheduler","^6B","~$f"]]]]],"^6","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.","^4W",["^ ","^4X",false,"^4Y",3,"^4Z",3,"^4[",[["^6B","~$f"],["^6C","^6B","~$f"]],"^4T",["^10",[["^6B","~$f"],["^6C","^6B","~$f"]]],"^50",["^10",[null,null]]]],"^G","^2R","^7","promesa/exec.cljc","^;",16,"^4W",["^ ","^4X",false,"^4Y",3,"^4Z",3,"^4[",[["^6B","~$f"],["^6C","^6B","~$f"]],"^4T",["^10",[["^6B","~$f"],["^6C","^6B","~$f"]]],"^50",["^10",[null,null]]],"^4[",[["^6B","~$f"],["^6C","^6B","~$f"]],"^51",null,"^4Y",3,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^6A","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.",["^10",[["^6B","~$f"],["^10",["~$pt/-schedule!",["^10",["~$resolve-scheduler"]],"^6B","~$f"]]]],["^10",[["^6C","^6B","~$f"],["^10",["^6D",["^10",["^6E","^6C"]],"^6B","~$f"]]]]]]],"^4X",false,"^5:",[["^ ","^4Y",2,"^4X",false,"^5;","^5<"],["^ ","^4Y",3,"^4X",false,"^5;","^5<"]],"^8",268,"^:",268,"^4Z",3,"^5=",true,"^4T",["^10",[["^6B","~$f"],["^6C","^6B","~$f"]]],"^6","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."],"~$default-cached-executor",["^ ","~:no-doc",true,"^5",["^ ","^7","promesa/exec.cljc","^8",115,"^9",3,"^:",115,"^;",26,"^6","A global, cached thread executor service.","^6G",true],"^G","^2G","^7","promesa/exec.cljc","^;",26,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^61","^6F","~$default-executor"]]],"^8",112,"^:",115,"^5;","^22","^6","A global, cached thread executor service."],"~$thread-factory",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",50,"^9",10,"^:",50,"^;",24,"~:declared",true],"^G","^1H","^7","promesa/exec.cljc","^;",24,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["~$declare","^6I"]]],"^8",50,"^6J",true,"^:",50],"~$microtask-executor",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",477,"^9",10,"^:",477,"^;",28,"^4T",["^10",["^4U",["^10",[[]]]]],"^6","An IExecutor that schedules tasks to be executed in the MicrotasksQueue."],"^G","^2>","^7","promesa/exec.cljc","^;",28,"^4[",["^10",[[]]],"^51",null,"^50",["^10",[null,null]],"^9",4,"^52",["^ ","^53","^54","^55",["^10",["^56","^6L","An IExecutor that schedules tasks to be executed in the MicrotasksQueue.",[],["^10",["~$reify","^5M",["^10",["^5N",["^5O","~$f"],["^10",["^5P","~$f"]]]],["^10",["^5Q",["^5O","~$f"],["^10",["^5R",["^10",["^5S",null]],["^10",["^5T",["^10",["^5U",["~$_"],["^10",["^5V",["^10",["~$f"]],["^10",["^5W","^5X","~$_",null]]]]]]]],["^10",["^5T","^5Y"]]]]]],["^10",["^5Z",["^5O","~$f"],["^10",["^5R",["^10",["^5S",null]],["^10",["^5T",["^10",["^5U",["~$_"],["^10",["~$f"]]]]]]]]]]]]]]],"^4X",false,"^8",477,"^5[","^2L","^:",477,"^4Z",0,"^5=",true,"^4T",["^10",["^4U",["^10",[[]]]]],"^6","An IExecutor that schedules tasks to be executed in the MicrotasksQueue."],"^67",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",61,"^9",6,"^:",61,"^;",32],"^G","^2K","^7","promesa/exec.cljc","^;",32,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^66","^67","Var that indicates the availability of virtual threads.",false]]],"^8",61,"^:",61,"^5;","^68","^6","Var that indicates the availability of virtual threads."],"^5Y",["^ ","^6G",true,"^5",["^ ","^7","promesa/exec.cljc","^8",86,"^9",22,"^:",86,"^;",26,"^6G",true],"^G","^2J","^7","promesa/exec.cljc","^;",26,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^66","^5Y",["^10",["~$constantly",null]]]]],"^8",86,"^:",86,"^5;","^6>"],"^63",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",515,"^9",7,"^:",515,"^;",25,"^4T",["^10",["^4U",["^10",[["~$&",["^ ","~:keys",["~$parallelism","~$factory"],"~:or",["^ ","^6P",1]]]]]]],"^6","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.","^4W",["^ ","^4X",true,"^4Y",0,"^4Z",0,"^4[",[["^10",[["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]]]],"^4T",["^10",[["~$&",["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]]]],"^50",["^10",[null]]]],"^G","^1O","^7","promesa/exec.cljc","^;",25,"^4W",["^ ","^4X",true,"^4Y",0,"^4Z",0,"^4[",[["^10",[["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]]]],"^4T",["^10",[["~$&",["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]]]],"^50",["^10",[null]]],"^4[",[["^10",[["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]]]],"^51",null,"^4Y",0,"^50",["^10",[null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^63","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.",["~$&",["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]],["^10",["~$->Scheduler"]]]]],"^4X",true,"^5:",[["^ ","^4Y",0,"^4X",true,"^5;","^2N"]],"^8",515,"^5[","^5<","^:",515,"^4Z",0,"^5=",true,"^4T",["^10",[["~$&",["^ ","^6O",["^6P","^6Q"],"^6R",["^ ","^6P",1]]]]],"^6","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later."],"~$default-thread-executor",["^ ","^6G",true,"^5",["^ ","^7","promesa/exec.cljc","^8",122,"^9",3,"^:",122,"^;",26,"^6","A global, thread per task executor service.","^6G",true],"^G","^2Q","^7","promesa/exec.cljc","^;",26,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^61","^6T","^6H"]]],"^8",119,"^:",122,"^5;","^22","^6","A global, thread per task executor service."],"^58",["^ ","^6G",true,"^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",163,"^9",7,"^:",163,"^;",23,"^4T",["^10",["^4U",["^10",[[],["^4V"]]]]],"^6G",true,"^4W",["^ ","^4X",false,"^4Y",1,"^4Z",1,"^4[",[[],["^4V"]],"^4T",["^10",[[],["^4V"]]],"^50",["^10",[null,null]]]],"^G","^1Q","^7","promesa/exec.cljc","^;",23,"^4W",["^ ","^4X",false,"^4Y",1,"^4Z",1,"^4[",[[],["^4V"]],"^4T",["^10",[[],["^4V"]]],"^50",["^10",[null,null]]],"^4[",[[],["^4V"]],"^51",null,"^4Y",1,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^58",["^ ","^6G",true],["^10",[[],["^10",["^58",null]]]],["^10",[["^4V"],["^10",["~$cond",["^10",["~$nil?","^4V"]],["^10",["~$clojure.core/deref","^6H"]],["^10",["^69","^4V"]],"^4V",["^10",["~$delay?","^4V"]],["^10",["^58",["^10",["^6W","^4V"]]]],"~:else",["^10",["~$case","^4V","^5X",["^10",["^6W","^6H"]],"~:cached",["^10",["^6W","^6F"]],"~:thread",["^10",["^6W","^6T"]],"~:vthread",["^10",["^6W","~$default-vthread-executor"]],"~:same-thread",["^10",["^6W","~$default-current-thread-executor"]],"~:current-thread",["^10",["^6W","^74"]],["^10",["~$throw",["^10",["~$js/TypeError.","invalid executor"]]]]]]]]]]]]],"^4X",false,"^5:",[["^ ","^4Y",0,"^4X",false,"^5;","^5<"],["^ ","^4Y",1,"^4X",false,"^5;",["^C",[null,"^5<"]]]],"^8",163,"^:",163,"^4Z",1,"^5=",true,"^4T",["^10",[[],["^4V"]]]],"~$current-thread-executor",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",446,"^9",7,"^:",446,"^;",30,"^4T",["^10",["^4U",["^10",[[]]]]],"^6","Creates an executor instance that run tasks in the same thread."],"^G","^2T","^7","promesa/exec.cljc","^;",30,"^4[",["^10",[[]]],"^51",null,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^78","Creates an executor instance that run tasks in the same thread.",[],["^10",["^6M","^5M",["^10",["^5N",["^5O","~$f"],["^10",["^5V",["^10",["~$f"]],null,["^10",["^5W","^5X","~$_",null]]]]]],["^10",["^5Q",["^5O","~$f"],["^10",["^5V",["^10",["^5S",["^10",["~$comp","^5Y","~$f"]]]],["^10",["^5W","^5X","~$cause",["^10",["^5S","^7:"]]]]]]]],["^10",["^5Z",["^5O","~$f"],["^10",["^5V",["^10",["^5S",["^10",["~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["^5S","^7:"]]]]]]]]]]]]],"^4X",false,"^8",446,"^5[","^25","^:",446,"^4Z",0,"^5=",true,"^4T",["^10",["^4U",["^10",[[]]]]],"^6","Creates an executor instance that run tasks in the same thread."],"~$wrap-bindings",["^ ","^6G",true,"^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",190,"^9",7,"^:",190,"^;",20,"^4T",["^10",["^4U",["^10",[["~$f"]]]]],"^6G",true],"^G","^1T","^7","promesa/exec.cljc","^;",20,"^4[",["^10",[["~$f"]]],"^51",null,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^7;",["^ ","^6G",true],["~$f"],"~$f"]]],"^4X",false,"^8",190,"^:",190,"^4Z",1,"^5=",true,"^4T",["^10",["^4U",["^10",[["~$f"]]]]]],"^6E",["^ ","^6G",true,"^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",182,"^9",7,"^:",182,"^;",24,"^4T",["^10",["^4U",["^10",[[],["^6C"]]]]],"^6G",true,"^4W",["^ ","^4X",false,"^4Y",1,"^4Z",1,"^4[",[[],["^6C"]],"^4T",["^10",[[],["^6C"]]],"^50",["^10",[null,null]]]],"^G","^2V","^7","promesa/exec.cljc","^;",24,"^4W",["^ ","^4X",false,"^4Y",1,"^4Z",1,"^4[",[[],["^6C"]],"^4T",["^10",[[],["^6C"]]],"^50",["^10",[null,null]]],"^4[",[[],["^6C"]],"^51",null,"^4Y",1,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^6E",["^ ","^6G",true],["^10",[[],["^10",["^6E",null]]]],["^10",[["^6C"],["^10",["~$if",["^10",["~$or",["^10",["^6V","^6C"]],["^10",["~$=","^5X","^6C"]]]],["^10",["^6W","^60"]],["^10",["~$pu/maybe-deref","^6C"]]]]]]]]],"^4X",false,"^5:",[["^ ","^4Y",0,"^4X",false,"^5;","^5<"],["^ ","^4Y",1,"^4X",false,"^5;",["^C",[null,"^5<"]]]],"^8",182,"^:",182,"^4Z",1,"^5=",true,"^4T",["^10",[[],["^6C"]]]],"^6H",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",102,"^9",3,"^:",102,"^;",19,"^6","Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS."],"^G","^2=","^7","promesa/exec.cljc","^;",19,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^61","^6H",["^10",["^62",["^10",["^6L"]]]]]]],"^8",100,"^:",102,"^5;","^22","^6","Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS."],"^F",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",250,"^9",7,"^:",250,"^;",11,"^4T",["^10",["^4U",["^10",[["~$f"],["^4V","~$f"]]]]],"^6","Run the task in the provided executor.","^4W",["^ ","^4X",false,"^4Y",2,"^4Z",2,"^4[",[["~$f"],["^4V","~$f"]],"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^50",["^10",[null,null]]]],"^G","^2W","^7","promesa/exec.cljc","^;",11,"^4W",["^ ","^4X",false,"^4Y",2,"^4Z",2,"^4[",[["~$f"],["^4V","~$f"]],"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^50",["^10",[null,null]]],"^4[",[["~$f"],["^4V","~$f"]],"^51",null,"^4Y",2,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^F","Run the task in the provided executor.",["^10",[["~$f"],["^10",["~$pt/-run!",["^10",["^58","^59"]],"~$f"]]]],["^10",[["^4V","~$f"],["^10",["^7?",["^10",["^58","^4V"]],"~$f"]]]]]]],"^4X",false,"^5:",[["^ ","^4Y",1,"^4X",false,"^5;","^5<"],["^ ","^4Y",2,"^4X",false,"^5;","^5<"]],"^8",250,"^:",250,"^4Z",2,"^5=",true,"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^6","Run the task in the provided executor."],"^74",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",109,"^9",3,"^:",109,"^;",34,"^6","Default Executor instance that runs the task in the same thread."],"^G","^1J","^7","promesa/exec.cljc","^;",34,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^66","^74",["^10",["^62",["^10",["^78"]]]]]]],"^8",108,"^:",109,"^5;","^22","^6","Default Executor instance that runs the task in the same thread."],"~$Scheduler",["^ ","^6;",0,"^5@",["^C",["~$promesa.protocols/IScheduler"]],"^G","^2N","^7","promesa/exec.cljc","^;",22,"^6<",true,"^9",13,"^52",["^ ","^53","^54","^55",["^10",["~$deftype","^7@",[],"~$pt/IScheduler",["^10",["~$-schedule!",["~$_","^6B","~$f"],["^10",["~$let",["~$df",["^10",["~$impl/deferred"]],"~$tid",["^10",["^26",["^10",["^5U",[],["^10",["^5V",["^10",["~$pt/-resolve!","^7F",["^10",["~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["~$pt/-reject!","^7F","^7:"]]]]]]]],"^6B"]]],["^10",["~$pt/-fnly","^7F",["^10",["^5U",["~$_","~$c"],["^10",["~$when",["^10",["~$impl/isCancellationError","~$c"]],["^10",["^2M","^7H"]]]]]]]],"^7F"]]]]]]],"^8",496,"^6=",false,"^:",496,"^5;","^6>","^5C",null],"~$t_promesa$exec22961",["^ ","^6;",1,"^5@",["^C",["^29","^5A","^5B"]],"^G","^25","^7","promesa/exec.cljc","^6<",true,"^5?",true,"^9",null,"^52",["^ ","^53","^54","^55",["^10",["^5G","^7N",["~$meta22962"],"^5B",["^10",["^5I",["~$_22963","^7O"],["^10",["^5K","^7N","^7O"]]]],"^5A",["^10",["^5L",["^7P"],"^7O"]],"^5M",["^10",["^5N",["^5O","~$f"],["^10",["^5V",["^10",["~$f"]],null,["^10",["^5W","^5X","~$_",null]]]]]],["^10",["^5Q",["^5O","~$f"],["^10",["^5V",["^10",["^5S",["^10",["^79","^5Y","~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["^5S","^7:"]]]]]]]],["^10",["^5Z",["^5O","~$f"],["^10",["^5V",["^10",["^5S",["^10",["~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["^5S","^7:"]]]]]]]]]]],"^8",null,"^6=",false,"^5;","^6>","^5C",["^C",["^5A","^5B"]]],"^72",["^ ","^6G",true,"^5",["^ ","^7","promesa/exec.cljc","^8",132,"^9",3,"^:",132,"^;",27,"^6","A global, virtual thread per task executor service.","^6G",true],"^G","^27","^7","promesa/exec.cljc","^;",27,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^61","^72","^6H"]]],"^8",129,"^:",132,"^5;","^22","^6","A global, virtual thread per task executor service."],"^59",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",59,"^9",16,"^:",59,"^;",34,"^6@",true],"^G","^1U","^7","promesa/exec.cljc","^;",34,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^66","^59",null]]],"^6@",true,"^8",59,"^:",59,"^5;","^5<"],"^6S",["^ ","^4S",null,"^5",["^ ","^5@",["^C",["^7A"]],"^7","promesa/exec.cljc","^;",22,"^9",13,"^5D","^5E","^8",496,"^:",496,"^4T",["^10",["^4U",["^10",[[]]]]],"^5C",null,"^6","Positional factory function for promesa.exec/Scheduler."],"^5@",["^C",["^7A"]],"^G","^2;","^7","promesa/exec.cljc","^;",22,"^4[",["^10",[[]]],"^51",null,"^50",["^10",[null,null]],"^9",4,"^52",["^ ","^53","^54","^55",["^10",["^7B","^7@",[],"^7C",["^10",["^7D",["~$_","^6B","~$f"],["^10",["^7E",["^7F",["^10",["^7G"]],"^7H",["^10",["^26",["^10",["^5U",[],["^10",["^5V",["^10",["^7I","^7F",["^10",["~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["^7J","^7F","^7:"]]]]]]]],"^6B"]]],["^10",["^7K","^7F",["^10",["^5U",["~$_","~$c"],["^10",["^7L",["^10",["^7M","~$c"]],["^10",["^2M","^7H"]]]]]]]],"^7F"]]]]]]],"^4X",false,"^5D","^5E","^8",496,"^5[","^2N","^:",496,"^4Z",0,"^5=",true,"^4T",["^10",["^4U",["^10",[[]]]]],"^5C",null,"^6","Positional factory function for promesa.exec/Scheduler."],"~$->t_promesa$exec22961",["^ ","^4S",null,"^5",["^ ","^5?",true,"^5@",["^C",["^29","^5A","^5B"]],"^5C",["^C",["^5A","^5B"]],"^5D","^5E","^4T",["^10",["^4U",["^10",[["^7O"]]]]],"^6","Positional factory function for promesa.exec/t_promesa$exec22961.","^7",null],"^5@",["^C",["^29","^5A","^5B"]],"^G","^1Z","^7","promesa/exec.cljc","^4[",["^10",[["^7O"]]],"^51",null,"^50",["^10",[null,null]],"^5?",true,"^9",null,"^52",["^ ","^53","^54","^55",["^10",["^5G","^7N",["^7O"],"^5B",["^10",["^5I",["^7P","^7O"],["^10",["^5K","^7N","^7O"]]]],"^5A",["^10",["^5L",["^7P"],"^7O"]],"^5M",["^10",["^5N",["^5O","~$f"],["^10",["^5V",["^10",["~$f"]],null,["^10",["^5W","^5X","~$_",null]]]]]],["^10",["^5Q",["^5O","~$f"],["^10",["^5V",["^10",["^5S",["^10",["^79","^5Y","~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["^5S","^7:"]]]]]]]],["^10",["^5Z",["^5O","~$f"],["^10",["^5V",["^10",["^5S",["^10",["~$f"]]]],["^10",["^5W","^5X","^7:",["^10",["^5S","^7:"]]]]]]]]]]],"^4X",false,"^5D","^5E","^8",null,"^5[","^25","^4Z",1,"^5=",true,"^4T",["^10",["^4U",["^10",[["^7O"]]]]],"^5C",["^C",["^5A","^5B"]],"^6","Positional factory function for promesa.exec/t_promesa$exec22961."],"~$submit!",["^ ","^4S",null,"^5",["^ ","^7","promesa/exec.cljc","^8",257,"^9",7,"^:",257,"^;",14,"^4T",["^10",["^4U",["^10",[["~$f"],["^4V","~$f"]]]]],"^6","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.","^4W",["^ ","^4X",false,"^4Y",2,"^4Z",2,"^4[",[["~$f"],["^4V","~$f"]],"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^50",["^10",[null,null]]]],"^G","^24","^7","promesa/exec.cljc","^;",14,"^4W",["^ ","^4X",false,"^4Y",2,"^4Z",2,"^4[",[["~$f"],["^4V","~$f"]],"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^50",["^10",[null,null]]],"^4[",[["~$f"],["^4V","~$f"]],"^51",null,"^4Y",2,"^50",["^10",[null,null]],"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^56","^7R","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.",["^10",[["~$f"],["^10",["~$pt/-submit!",["^10",["^58","^59"]],"~$f"]]]],["^10",[["^4V","~$f"],["^10",["^7S",["^10",["^58","^4V"]],"~$f"]]]]]]],"^4X",false,"^5:",[["^ ","^4Y",1,"^4X",false,"^5;","^5<"],["^ ","^4Y",2,"^4X",false,"^5;","^5<"]],"^8",257,"^:",257,"^4Z",2,"^5=",true,"^4T",["^10",[["~$f"],["^4V","~$f"]]],"^6","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function."],"~$->ScheduledTask",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",53,"^9",10,"^:",53,"^;",25,"^6J",true],"^G","^2D","^7","promesa/exec.cljc","^;",25,"^9",1,"^52",["^ ","^53","^54","^55",["^10",["^6K","^7T"]]],"^8",53,"^6J",true,"^:",53]],"^Z",["^ ","^@","^@"],"~:cljs.analyzer/constants",["^ ","^W",["^C",["~:parallelism","^6Y","^5X","^5D","^7O","^5F"]],"~:order",["^6Y","^5X","^7O","^5F","^7V","^5D"]],"^15",["^ ","^X",["^C",[]]],"^16",["^ "],"^17",["^U","^@","^P","^R","^T","^O"]],"^K","^H","~:ns-specs",["^ "],"~:ns-spec-vars",["^C",[]],"~:compiler-options",["^2Y",[["^7Z","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7Z","~:shadow-tweaks"],null,["^7Z","~:source-map-inline"],null,["^7Z","~:elide-asserts"],true,["^7Z","~:optimize-constants"],null,["^7Z","^1<"],null,["^7Z","~:external-config"],null,["^7Z","~:tooling-config"],null,["^7Z","~:emit-constants"],null,["^7Z","~:load-tests"],false,["^7Z","~:form-size-threshold"],null,["^7Z","~:global-goog-object&array"],null,["^7Z","~:data-readers"],null,["^7Z","~:infer-externs"],"~:auto",["^7Z","^1>"],null,["^80","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^7Z","~:fn-invoke-direct"],null,["^7Z","~:source-map"],null]]]